<?xml version="1.0"?>
<!--
    Copyright (C) 2004 Orbeon, Inc.

    This program is free software; you can redistribute it and/or modify it under the terms of the
    GNU Lesser General Public License as published by the Free Software Foundation; either version
    2.1 of the License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
    without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU Lesser General Public License for more details.

    The full text of the license is available at http://www.gnu.org/copyleft/lesser.html
-->
<?xml-stylesheet type="text/xsl" href="ant2html.xsl"?>
<project name="orbeon" default="orbeon-war" basedir=".">

    <!--<echoproperties/>-->

    <!-- set global build.root to be dir containing this file. -->
    <dirname property='build.root' file='${ant.file}'/>
    <property name="lib.dir" location="lib"/>
<!--    <property name='unstbl-bld-dst' value='/var/tmp/tomcat/ops-unstable/' /> -->
    <property name='local-repos' value=':local:/home/cvs/objectweb-src' />
    <property name="build.dir" value="build"/>
    <property name="project.name" value="ops"/>
    <property name="war.dir" value="${build.dir}/${project.name}-war"/>
    <property name="war.inf" value="${war.dir}/WEB-INF"/>
    <property name="war.classes" value="${war.inf}/classes"/>
    <property name="war.lib" value="${war.inf}/lib"/>

    <property name="src.dir" location="src"/>
    <property name="examples-src.dir" location="${src.dir}/examples"/>
    <property name="web-examples-src.dir" location="${examples-src.dir}/web"/>

    <fileset id='war.libs' dir="${lib.dir}">
        <include name="dom4j-1_4_orbeon.jar"/>
        <include name="log4j-1.3alpha0.jar"/>
        <include name="jaxen-1_1-beta-1-dev.jar"/>
        <include name="saxpath-dev_orbeon.jar"/>
        <include name="resolver-xerces_2_6_2_orbeon.jar"/>
        <include name="xalan-2_5_1_orbeon.jar"/>
        <include name="xsltc-2_5_1_orbeon.jar"/>
        <include name="commons-collections-2_0.jar"/>
        <include name="commons-lang-1_0-b1.jar"/>
        <include name="commons-cli-1_0.jar"/>
        <include name="commons-fileupload-1.0.jar"/>
        <include name="commons-beanutils-1_5.jar"/>
        <include name="commons-pool-1.2.jar"/>
        <include name="commons-discovery-0_2.jar"/>
        <include name="axis_1_2_1-axis.jar"/>
        <include name="axis_1_2_1-jaxrpc.jar"/>
        <include name="axis_1_2_1-saaj.jar"/>
        <include name="axis_1_2_1-wsdl4j-1.5.1.jar"/>
        <include name="jakarta-oro-2_0_8_orbeon.jar"/>
        <include name="msv-20031020.jar"/>
        <include name="isorelax-20031020.jar"/>
        <include name="xsdlib-20031020.jar"/>
        <include name="relaxngDatatype-20031020.jar"/>
        <include name="hsqldb-1_7_2_8_orbeon.jar"/>
        <include name="jfreechart*"/>
        <include name="jcommon*"/>
        <include name="activation-1_0_2.jar"/>
        <include name="ymsg9-v0_51.jar"/>
        <include name="jtidy-04aug2000r7.jar"/>
        <include name="kawa-1_7.jar"/>
        <include name="mondrian-0_5_orbeon.jar"/>
        <include name="junit.jar"/>
        <include name="saxon-6_5_2.jar"/>
        <include name="saxon-8_1_1_orbeon.jar"/>
        <include name="joost-20030623_orbeon.jar"/>
        <include name="batik-all-1_5.jar"/>
        <include name="avalon*"/>
        <include name="fop-0_20_5.jar"/>
        <include name="jakarta-poi*"/>
        <include name="commons-digester-1_5.jar"/>
        <include name="metadata-extractor-2_1.jar"/>
        <include name="jdom-b9.jar"/>
        <include name="struts-1_1.jar"/>
        <include name="commons-validator-1_0_2.jar"/>
        <include name="castor-0_9_4_3-xml.jar"/>
        <include name="antlr-2_7_4.jar"/>
        <include name="antlr-2_7_4_orbeon.jar"/>
        <include name="commons-httpclient-slide_2_0rc1.jar"/>
        <include name="jakarta-slide-webdavlib-2.0rc1.jar"/>
        <include name="portlet-api_1.0.jar"/>
        <include name="exist-1_0b2_build_1107.jar"/>
        <include name="exist-optional-1_0b2_build_1107.jar"/>
        <include name="xmldb-exist_1_0b2_build_1107.jar"/>
        <include name="xmlrpc-1_2_patched_exist_1_0b2_build_1107.jar"/>
        <include name="jms-api-1_1.jar"/>
        <include name="mail-1_3_2.jar"/>
        <include name="itext-1_02b.jar"/>
        <include name="itext-xml-1_02.jar"/>
        <include name="xml-apis-xerces_2_6_2_orbeon.jar"/>
        <include name="pdfbox-0_7_1.jar"/>
        <include name="ant-1_5_4.jar"/>
    </fileset>
    <fileset id='war.libs.private' dir="${lib.dir}">
      <include name='xercesImpl_2_6_2_orbeon.jar' />
      <include name='commons-logging-1_0_4.jar' />
    </fileset>

    <target name="init">

        <tstamp/>
        <property name="version.number" value="3.0.beta3"/>
        <tstamp>
            <format property='time' pattern='yyyyMMddHHmm' timezone='GMT'/>
        </tstamp>
        <property name='release.number' value='${version.number}.${time}'/>

        <echo message="Building Orbeon PresentationServer ${release.number}"/>

        <property name="java-src.dir" value="${src.dir}/java"/>
        <property name="cli-examples-src.dir" value="${examples-src.dir}/cli"/>
        <property name="resources.dir" value="${src.dir}/resources"/>
        <property name="test-src.dir" value="test/src"/>

        <property name="build.classes.dir" value="${build.dir}/classes"/>
        <property name="build.test-classes.dir" value="${build.dir}/test-classes"/>
        <property name="build.lib.dir" value="${build.dir}/lib"/>
        <property name="build.distrib.dir" value="${build.dir}/distrib"/>
        <property name="build.temp.dir" value="${build.dir}/temp"/>
        <property name="build.doc.dir" value="${build.dir}/doc"/>
        <property name="jar.file" value="${build.lib.dir}/${project.name}.jar"/>
        <property name="cli.jar.file" value="${build.lib.dir}/cli-${project.name}.jar"/>

        <property name="build.portlet-classes.dir" value="${build.dir}/portlet-classes"/>

        <property name="install.tomcat" value="tomcat-4.1.27"/>
        <property name="install.jdk" value="jdk-1.4.2_01"/>
        <property name="xml-renderkit.version.number" value="1.0"/>

        <property name="build.compiler" value="modern"/>
        <property name="build.compiler.pedantic" value="false"/>
        <property name="build.compiler.fulldepend" value="true"/>
        <property name="build.debug" value="on"/>
    </target>

    <!-- Create build dir and web application dir -->
    <target name="prepare" depends="init">
        <mkdir dir="${build.classes.dir}"/>
        <mkdir dir="${build.lib.dir}"/>
        <condition property="is.debug">
            <equals arg1="${debug.enabled}" arg2="true"/>
        </condition>
    </target>

    <!-- Set classpath to compile and run the application -->
    <target name="classpath" depends="prepare">
        <path id="class.path">
            <pathelement location="${jar.file}"/>
            <fileset dir="${lib.dir}">
                <include name="**/*.jar"/>
                <exclude name="**/*jsf_1_1*.jar"/>
            </fileset>
            <!--            <pathelement location="${build.classes.dir}"/>-->
            <pathelement location="${java.home}/../lib/tools.jar"/>
            <pathelement location="C:\bea81sp2\weblogic81\server\lib\weblogic.jar"/>
        </path>
    </target>

    <!-- Compile source -->
    <target name="classes" depends="classpath">
        <mkdir dir="${build.dir}/src"/>
        <copy todir="${build.dir}/src" file="${java-src.dir}/org/orbeon/oxf/common/Version.java" overwrite="true">
            <filterset>
                <filter token="RELEASE" value="${release.number}"/>
            </filterset>
        </copy>
        <javac destdir="${build.classes.dir}"
            classpathref="class.path"
            debug="${build.debug}" optimize="off" target="1.3" source="1.3">
            <src path="${build.dir}/src"/>
            <src path="${java-src.dir}"/>
            <exclude name="org/orbeon/oxf/common/Version.java"/>
            <exclude name="org/orbeon/oxf/resources/XMLDB*"/>
            <exclude name="org/orbeon/faces/**/*.java"/>
            <exclude name="org/orbeon/faces11/**/*.java"/>
            <exclude name="org/orbeon/oxf/resources/Cache*"/>
            <!--      <exclude name="org/orbeon/oxf/resources/Tamino*"/>-->
            <!--      <exclude name="org/orbeon/oxf/processor/tamino/**/*.java"/>-->
            <!--            <exclude name="org/orbeon/oxf/processor/xmldb/**"/>-->
            <!--            <exclude name="org/orbeon/oxf/portlet/**/*.java"/>-->
            <!--            <exclude name="org/orbeon/oxf/pipeline/processors/FOP*"/>-->
            <!--            <exclude name="org/orbeon/oxf/pipeline/processors/JFreeChart*"/>-->
            <!--            <exclude name="org/orbeon/oxf/pipeline/processors/STXTransformer*"/>-->
            <!--            <exclude name="org/orbeon/oxf/pipeline/processors/XLS*"/>-->
            <!--            <exclude name="org/orbeon/oxf/pipeline/processors/Email*"/>-->
            <!--            <exclude name="org/orbeon/oxf/pipeline/processors/Batik*"/>-->
        </javac>
    </target>

    <!-- Compile test source -->
    <target name="test-classes" depends="classes">
        <mkdir dir="${build.test-classes.dir}"/>
        <javac srcdir="${test-src.dir}" destdir="${build.test-classes.dir}"
            classpathref="class.path" debug="on" optimize="off" target="1.3" source="1.3"
            includes="**/*.java">
        </javac>
    </target>

    <target name='transform' depends='prepare' >
      <property name='xsd-prefix' value='/org/orbeon/oxf/xml/schemas/page-flow-controller' />
      <xslt
        style='src/xslt/page-flow-controller-xsd.xslt'
        in='${java-src.dir}${xsd-prefix}.xsd'
        out='${build.classes.dir}${xsd-prefix}-runtime.xsd'
      />
    </target>

    <!-- JAR -->
    <target name="jars" depends="classes,transform">
      <pathconvert dirsep='/' pathsep=' ' property='jar.mf.cp' refid='war.libs.private' >
        <map from='${lib.dir}' to='private' />
      </pathconvert>

      <jar destfile='${jar.file}' compress='false' >
          <manifest>
            <attribute name='Class-Path' value='${jar.mf.cp}' />
          </manifest>
          <fileset dir="${java-src.dir}">
              <include name="**/*.xml"/>
              <include name="**/*.rng"/>
              <include name="**/*.css"/>
              <include name="**/*.xsd"/>
              <exclude name="org/orbeon/faces/**"/>
          </fileset>
          <fileset dir="${build.classes.dir}">
              <include name="**/*.class"/>
              <include name="**/*.xsd"/>
              <exclude name="org/orbeon/faces/**/*.class"/>
          </fileset>
          <fileset dir="${resources.dir}/oxf"/>
          <zipfileset dir="descriptors/jar" prefix="META-INF" >
            <exclude name='*.MF' />
          </zipfileset>
          <zipfileset dir="${java-src.dir}/org/orbeon/oxf/portlet/taglib" prefix="META-INF">
              <include name="*.tld"/>
          </zipfileset>
        </jar>

        <pathconvert dirsep='/' pathsep=' ' property='cli.jar.mf.cp' refid='war.libs' >
          <map from='${lib.dir}' to='lib' />
        </pathconvert>

        <basename file='${jar.file}' property='jar.name' />

        <jar destfile='${cli.jar.file}' compress='false'  >
          <manifest>
            <attribute name='Main-Class' value='org.orbeon.oxf.main.OPS' />
            <attribute name='Class-Path' value='lib/${jar.name} commons-cli-1_0.jar ${cli.jar.mf.cp}' />
          </manifest>
        </jar>
    </target>

    <target name="sql-patch-28-jar" depends="prepare">
      <pathconvert dirsep='/' pathsep=' ' property='jar.mf.cp' refid='war.libs.private' >
        <map from='${lib.dir}' to='private' />
      </pathconvert>

      <jar destfile='${build.lib.dir}/ops-2.8-sql_patch.jar' compress='false' >
          <fileset dir="${build.classes.dir}">
              <include name="org/orbeon/oxf/processor/sql/**/*.*"/>
              <include name="org/orbeon/oxf/xml/XMLConstants.class"/>
              <include name="org/orbeon/oxf/xml/DeferredContentHandler*.class"/>
              <include name="org/orbeon/oxf/xml/dom4j/NonLazy*.class"/>
          </fileset>
          <fileset dir="${java-src.dir}">
              <include name="org/orbeon/oxf/processor/sql/*.rng"/>
          </fileset>
        </jar>
    </target>

    <target name="file-serializer-patch-28-jar" depends="prepare">
      <pathconvert dirsep='/' pathsep=' ' property='jar.mf.cp' refid='war.libs.private' >
        <map from='${lib.dir}' to='private' />
      </pathconvert>

      <jar destfile='${build.lib.dir}/ops-2.8-file_serializer_patch.jar' compress='false' >
          <fileset dir="${build.classes.dir}">
              <include name="org/orbeon/oxf/processor/serializer/FileSerializer*.class"/>
              <include name="org/orbeon/oxf/xml/XMLConstants.class"/>
              <include name="org/orbeon/oxf/processor/serializer/legacy/FileSerializer*.class"/>
              <include name="org/orbeon/oxf/processor/serializer/BinaryTextContentHandler.class"/>
          </fileset>
          <fileset dir="${java-src.dir}">
              <include name="org/orbeon/oxf/schemas/file-serializer-config.rng"/>
          </fileset>
          <fileset dir="${resources.dir}">
              <include name="oxf/processors.xml"/>
          </fileset>
        </jar>
    </target>

    <!-- WAR -->
	
    <target name="war" depends="jars,orbeon-source-files-lists,orbeon-css-templates">
        <echo message="war.dir: ${war.dir}"/>
        <mkdir dir="${war.classes}"/>
        <!--<javac destdir="${war.dir}/WEB-INF/classes"-->
            <!--classpathref="class.path" debug="${build.debug}" optimize="off" target="1.3" source="1.3" srcdir="${web-examples-src.dir}/examples-standalone/struts-view/src"/>-->
        <copy todir="${war.classes}">
            <!--<fileset dir="${web-examples-src.dir}/examples-standalone/struts-view/src/" includes="**/*.properties"/>-->
            <fileset dir="descriptors/examples/web/jboss-security" includes="*.properties"/>
        </copy>

        <copy todir="${war.lib}">
          <fileset refid='war.libs' />
        </copy>

        <copy file='${jar.file}' todir='${war.lib}' />

        <copy todir='${war.lib}/private' >
          <fileset refid='war.libs.private' />
        </copy>

        <copy todir="${war.inf}">
            <fileset dir="${lib.dir}">
                <include name="commons-cli-1_0.jar"/>
            </fileset>
        </copy>
        <copy file='${cli.jar.file}' todir='${war.inf}' />
    </target>

    <target name="war-copy-descriptors" depends="prepare">
        <copy todir="${war.inf}">
            <fileset dir="${descriptors.dir}" includes="*.xml"/>
        </copy>
        <!-- eXist database -->
        <mkdir dir="${war.inf}/exist-data"/>
        <copy todir="${war.inf}/exist-data">
            <fileset dir="${descriptors.dir}/exist-data" includes="README.txt"/>
        </copy>
        <echo message="Target: ${target}"/>
        <xslt in="build.xml" style="${descriptors.dir}/web.xsl" out="${war.inf}/web.xml" force="true">
            <param name="target" expression="${target}"/>
            <param name="build-root" expression="${build.root}"/>
            <param name="build-root" expression="${build.root}"/>
            <param name="version-number" expression="${version.number}"/>
        </xslt>
        <!-- Override web.xml with local-web.xml when present -->
        <copy file="${descriptors.dir}/devel/local-web.xml" tofile="${war.inf}/web.xml"
            filtering="true" overwrite="true" failonerror="false">
            <filterset>
                <filter token="BUILD_ROOT" value="${build.root}"/>
            </filterset>
        </copy>
    </target>

    <!-- WAR file -->
    <target name="orbeon-war" depends="classes" description="Create uncompressed WAR file">
        <antcall target="war">
            <param name="descriptors.dir" value="descriptors/examples/web"/>
        </antcall>

        <antcall target="war-copy-descriptors">
            <param name="descriptors.dir" value="descriptors/examples/web"/>
            <param name="target" value="devel"/>
            <param name="build.root" value="${build.root}"/>
        </antcall>
    </target>

    <target name="orbeon-javadoc" depends="classpath">
        <!-- packagenames="org.orbeon.*" sourcepath="${src.dir}" -->
        <mkdir dir="${build.doc.dir}/javadoc"/>
        <javadoc destdir="${build.doc.dir}/javadoc" classpathref="class.path">
            <link href="http://java.sun.com/j2se/1.3/docs/api/"/>
            <link href="http://xml.apache.org/xalan-j/apidocs/"/>
            <link href="http://xml.apache.org/xerces2-j/javadocs/api/"/>
            <link href="http://jakarta.apache.org/tomcat/tomcat-4.0-doc/servletapi/"/>
            <link href="http://dom4j.org/apidocs/"/>
            <fileset dir="${java-src.dir}">
                <include name="org/orbeon/oxf/processor/SimpleProcessor.java"/>
                <include name="org/orbeon/oxf/processor/ProcessorInputOutputInfo.java"/>
                <include name="org/orbeon/oxf/common/*.java"/>
                <include name="org/orbeon/oxf/pipeline/api/*.java"/>
                <include name="org/orbeon/oxf/resources/ResourceManager.java"/>
                <include name="org/orbeon/oxf/resources/*ResourceManagerImpl.java"/>
                <exclude name="org/orbeon/oxf/resources/CacheResourceManagerImpl.java"/>
                <include name="org/orbeon/oxf/resources/OXFProperties.java"/>
                <include name="org/orbeon/oxf/xml/NamingConvention.java"/>
                <include name="org/orbeon/oxf/xml/dom4j/LocationData.java"/>
            </fileset>
        </javadoc>
    </target>

    <target name="orbeon-css-templates" depends="init">

        <filterset id="css-filter-set" begintoken="&amp;" endtoken=";">
            <filtersfile file="${web-examples-src.dir}/ops/css/css-constants.properties"/>
        </filterset>

        <copy file="${web-examples-src.dir}/ops/css/orbeon.css.template" toFile="${web-examples-src.dir}/config/theme/orbeon.css">
            <filterset refid="css-filter-set"/>
        </copy>
        <copy file="${web-examples-src.dir}/ops/css/xforms.css.template" toFile="${web-examples-src.dir}/config/theme/xforms.css">
            <filterset refid="css-filter-set"/>
        </copy>
    </target>

    <target name="orbeon-source-files-lists" depends="init">

      <taskdef resource="net/sf/antcontrib/antlib.xml">
          <classpath>
            <fileset dir='${basedir}/tools/ant/lib' >
                <include name='*.jar'/>
            </fileset>
          </classpath>
      </taskdef>

      <foreach target='make-one-source-list' param='example-descriptor' >
        <path>
          <fileset dir='${examples-src.dir}' >
              <include name='**/example-descriptor.xml' />
          </fileset>
        </path>
      </foreach>
    </target>

    <target name='make-one-source-list' >
        <dirname file='${example-descriptor}' property='dir' />

	<length property='files' mode='each' >
            <fileset dir='${dir}' >
                <include name='**/*.x?l' />
                <include name='**/*.xhtml' />
                <include name='**/*.java' />
                <include name='**/*.txt' />
                <exclude name='example-descriptor.xml' />
                <exclude name='example-descriptor-files.xml' />
            </fileset>
        </length>

        <tempfile property='file-list-temp' />

        <echo file='${file-list-temp}' >&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;source-files&gt;
${files}
&lt;/source-files&gt;
        </echo>
        
        <pathconvert property='file-list' >
            <path path='${example-descriptor}' />
            <globmapper from='${web-examples-src.dir}${file.separator}*${file.separator}example-descriptor.xml' to='${war.inf}/resources/*/example-descriptor-files.xml' />
        </pathconvert>
        
        <move file='${file-list-temp}' tofile='${file-list}' >
            <filterchain>
                <tokenfilter>
                    <linetokenizer/>
                    <replacestring from='${dir}${file.separator}' to='    &lt;file name=&apos;' />
                    <replaceregex pattern='\s:\s' replace='&apos; size=&apos;' />
                    <replaceregex pattern='(?&lt;=\d)\z' replace='&apos;/&gt;' />
                </tokenfilter>
            </filterchain>
        </move>
        
    </target>

    <target name="debug-enabled" if="is.debug">
        <property name="debug.arg1" value="-Xdebug"/>
        <property name="debug.arg2" value="-Xnoagent"/>
        <property name="debug.arg3" value="-Djava.compiler=NONE"/>
        <property name="debug.arg4" value="-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5001"/>
    </target>

    <target name="debug-disabled" unless="is.debug">
        <property name="debug.arg1" value=""/>
        <property name="debug.arg2" value=""/>
        <property name="debug.arg3" value=""/>
        <property name="debug.arg4" value=""/>
    </target>

    <target name="test" depends="jars, test-classes, debug-enabled, debug-disabled">
    	<!-- 11/14/2004 d : Found Processor was sorta invalid cause once it ran successully
    	     				it would leave behind .class files in java.io.tmpdir.  This
    	     				meant that on subsequent runs of the test it wouldn't try to
    	     				compile anything.

    	     				So now we delete,create,and specify a specific dir as the temp
    	     				dir so that compiles always occur.
    	 -->
    	<property name="test.tmp.dir" location="${build.temp.dir}/test" />
    	<delete dir="${test.tmp.dir}"/>
    	<mkdir dir="${test.tmp.dir}"/>
        <junit fork="yes" haltonerror="yes" haltonfailure="yes">
<!--            <test name="org.orbeon.oxf.test.ProcessorTest"/>-->
            <batchtest>
                <fileset dir="${test-src.dir}">
                    <include name="org/orbeon/oxf/test/*Test*.java"/>
                </fileset>
            </batchtest>

            <formatter type="plain" usefile="false"/>
            <sysproperty key="oxf.resources.factory" value="org.orbeon.oxf.resources.PriorityResourceManagerFactory"/>
            <sysproperty key="oxf.resources.filesystem.sandbox-directory" value="${web-examples-src.dir}"/>
            <sysproperty key="oxf.resources.priority.1" value="org.orbeon.oxf.resources.FilesystemResourceManagerFactory"/>
            <sysproperty key="oxf.resources.priority.2" value="org.orbeon.oxf.resources.ClassLoaderResourceManagerFactory"/>
            <sysproperty key="oxf.resources.common.min-reload-interval" value="50"/>
            <sysproperty key="oxf.test.config" value="ops/unit-tests/tests.xml"/>
        	<sysproperty key="java.io.tmpdir" value="${test.tmp.dir}" />
            <!--            <arg line="-class org.orbeon.oxf.test.ProcessorTest"/>-->
            <classpath>
                <path refid="class.path"/>
                <pathelement location="${build.test-classes.dir}"/>
                <!-- FWIW tomcat 5 doesn't include this jar. -->
                <pathelement location="${tomcat.dir}/common/lib/mailapi-1_3_2.jar"/>
            </classpath>
        </junit>
    </target>

    <target name="anthill-release" depends="clean, orbeon-dist, test-classes, debug-enabled, debug-disabled">
    	<!-- 11/14/2004 d : Found Processor was sorta invalid cause once it ran successully
    	     				it would leave behind .class files in java.io.tmpdir.  This
    	     				meant that on subsequent runs of the test it wouldn't try to
    	     				compile anything.

    	     				So now we delete,create,and specify a specific dir as the temp
    	     				dir so that compiles always occur.
    	 -->
    	<property name="test.tmp.dir" location="${build.temp.dir}/test" />
    	<delete dir="${test.tmp.dir}"/>
    	<mkdir dir="${test.tmp.dir}"/>
        <junit fork="yes" haltonerror="yes" haltonfailure="yes">
<!--            <test name="org.orbeon.oxf.test.ProcessorTest"/>-->

            <batchtest>
                <fileset dir="${test-src.dir}">
                    <include name="org/orbeon/oxf/test/*Test*.java"/>
                </fileset>
            </batchtest>

            <formatter type="plain" usefile="false"/>
            <sysproperty key="oxf.resources.factory" value="org.orbeon.oxf.resources.PriorityResourceManagerFactory"/>
            <sysproperty key="oxf.resources.filesystem.sandbox-directory" value="${web-examples-src.dir}"/>
            <sysproperty key="oxf.resources.priority.1" value="org.orbeon.oxf.resources.FilesystemResourceManagerFactory"/>
            <sysproperty key="oxf.resources.priority.2" value="org.orbeon.oxf.resources.ClassLoaderResourceManagerFactory"/>
            <sysproperty key="oxf.resources.common.min-reload-interval" value="50"/>
            <sysproperty key="oxf.test.config" value="ops/unit-tests/tests.xml"/>
        	<sysproperty key="java.io.tmpdir" value="${test.tmp.dir}" />
            <!--            <arg line="-class org.orbeon.oxf.test.ProcessorTest"/>-->
            <classpath>
                <path refid="class.path"/>
                <pathelement location="${build.test-classes.dir}"/>
                <!-- FWIW tomcat 5 doesn't include this jar. -->
                <pathelement location="${tomcat.dir}/common/lib/mailapi-1_3_2.jar"/>
            </classpath>
        </junit>

        <!-- dump version string with dots in into a file, then read that file convert -->
        <!-- the dots to underscores while reeading.   i.e. convert 2.5.4.3234 to      -->
        <!-- 2_5_4_3234                                                                -->
        <tempfile property='ops-temp-version-file'/>
        <echo message='ops-version=${release.number}' file='${ops-temp-version-file}'/>

        <loadproperties srcFile='${ops-temp-version-file}'>
            <filterchain>
                <tokenfilter>
                    <replaceregex pattern='\.' replace='_' flags='g'/>
                </tokenfilter>
            </filterchain>
        </loadproperties>
        <echo message='ops-version: ${ops-version}'/>


        <cvs command='tag TAG_OPS_${ops-version}'
            cvsRoot='${local-repos}' failonerror='true'/>

        <echo message="Deploying to ${deployDir}/${release.number}"/>

        <mkdir dir="${deployDir}/${release.number}"/>
        <copy todir="${deployDir}/${release.number}">
            <fileset dir="${build.distrib.dir}">
                <include name="*"/>
            </fileset>
        </copy>


        <!-- 2/27/2005 d : This triggers the taginfo synch script. -->
        <cvs command='tag -d TAG_Dummy_For_OW_Sync'
            cvsRoot='${local-repos}' failonerror='true'/>

        <copy file='${deployDir}/buildLogs/oxf-${version}-build.log' tofile='${deployDir}/${release.number}/build.log'/>

        <!-- Post the unstable build -->
        <exec executable='rsync' failonerror='true' dir='${deployDir}/${release.number}' >
          <arg value='--stats' />
          <arg value='-z' />
          <arg value='-c' />
          <arg value='--rsh=/usr/bin/ssh' />
          <arg value='build.log' />
          <arg value='ops.war' />
          <arg value='orbeonbld2@forge.objectweb.org:/var/lib/gforge/chroot/home/groups/ops/htdocs/unstable/ops' />
        </exec>

        <delete>
            <fileset dir="${deployDir}">
                <exclude name="${release.number}/**"/>
           </fileset>
        </delete>


    </target>

    <target name="clean" depends="init" description="Remove all generated files">
        <delete dir="${build.dir}"/>
    </target>

    <target name="orbeon-doc" depends="jars,orbeon-css-templates">
        <mkdir dir="${build.doc.dir}/reference"/>
        <mkdir dir="${build.doc.dir}/reference/theme"/>
        <java classname="org.orbeon.oxf.main.OPS" classpathref="class.path" fork="true" failonerror="true">
            <arg value="-r"/>
            <arg value="${web-examples-src.dir}"/>
            <arg value="oxf:/doc/generate-static-html.xpl"/>
        </java>
        <copy todir="${build.doc.dir}/reference">
            <fileset dir="${web-examples-src.dir}/config">
                <include name="theme/images/**"/>
                <include name="theme/javascript/**"/>
                <include name="theme/jscalendar/**"/>
                <include name="theme/style/**"/>
            </fileset>
        </copy>
        <copy todir="${build.doc.dir}/reference">
            <fileset dir="${web-examples-src.dir}">
                <include name="images/*.*"/>
            </fileset>
        </copy>
        <copy todir="${build.doc.dir}/reference">
            <fileset dir="${web-examples-src.dir}/doc">
                <include name="pages/*.png"/>
                <include name="pages/*.gif"/>
                <include name="pages/*.pdf"/>
            </fileset>
        </copy>
        <copy file="${web-examples-src.dir}/config/theme/orbeon.css" toDir="${build.doc.dir}/reference/theme"/>
        <copy file="${web-examples-src.dir}/config/theme/xforms.css" toDir="${build.doc.dir}/reference/theme"/>
        <copy todir="${build.doc.dir}" file="doc/OPS Tutorial.pdf"/>
    </target>

    <target name="orbeon-pdf-doc" depends="jars">
        <mkdir dir="${build.doc.dir}/reference"/>
        <java classname="org.orbeon.oxf.main.OPS" classpathref="class.path" fork="true" failonerror="true">
            <arg value="-r"/>
            <arg value="${web-examples-src.dir}"/>
            <arg value="oxf:/doc/generate-single-static-html.xpl"/>
        </java>
    </target>

    <target name="orbeon-dist-war" >
        <mkdir dir="${build.distrib.dir}"/>

        <antcall target="war">
            <param name="descriptors.dir" value="descriptors/examples/web"/>
        </antcall>
        <antcall target="war-copy-descriptors">
            <param name="descriptors.dir" value="descriptors/examples/web"/>
            <param name="target" value="war"/>
            <param name="build.root" value="${build.root}"/>
        </antcall>
        <zip zipfile="${build.distrib.dir}/${project.name}.war">
            <fileset dir="${war.dir}"/>
            <zipfileset dir="${web-examples-src.dir}" prefix="WEB-INF/resources">
                <exclude name="**/*.eps"/>
                <exclude name="**/*.pdf"/>
                <exclude name="**/*.jsp"/>
                <exclude name="**/*.cdr"/>
                <exclude name="**/*.cpl"/>
                <exclude name="doc/xtech-2005/**"/>
                <exclude name="ops/unit-tests/**"/>
                <exclude name="ops/css/**"/>
                <exclude name="oxfmark/**"/>
                <exclude name="struts-view/**"/>
            </zipfileset>
            <zipfileset dir="doc" prefix="WEB-INF/resources/doc/pages">
                <include name="OPS Tutorial.pdf"/>
            </zipfileset>
        </zip>
    </target>

    <target name="bizdoc-example" depends="prepare">
        <mkdir dir="${build.distrib.dir}"/>
        <zip zipfile="${build.distrib.dir}/bizdoc-example-${version.number}.zip">
            <zipfileset dir="doc/example-applications"/>
            <zipfileset dir="descriptors/examples/web/bizdoc" prefix="WEB-INF"/>
            <zipfileset dir="${web-examples-src.dir}" prefix="WEB-INF/resources">
                <include name="config/**/*"/>
                <include name="images/**/*"/>
            </zipfileset>
            <zipfileset dir="${web-examples-src.dir}/examples/bizdoc" prefix="WEB-INF/resources/bizdoc">
                <include name="**/*"/>
                <exclude name="example-descriptor.xml"/>
                <exclude name="page-flow.xpl"/>
            </zipfileset>
        </zip>
    </target>

    <target name="employees-example" depends="prepare">
        <mkdir dir="${build.distrib.dir}"/>
        <zip zipfile="${build.distrib.dir}/employees-example-${version.number}.zip">
            <zipfileset dir="doc/example-applications"/>
            <zipfileset dir="descriptors/examples/web/employees" prefix="WEB-INF"/>
            <zipfileset dir="${web-examples-src.dir}" prefix="WEB-INF/resources">
                <include name="config/**/*"/>
                <include name="examples/datasource-sql.xml"/>
                <include name="examples/employees/export-excel/employees.xls"/>
                <include name="images/**/*"/>
                <include name="init-database/**/*"/>
            </zipfileset>
            <zipfileset dir="${web-examples-src.dir}/examples/employees" prefix="WEB-INF/resources/employees">
                <include name="**/*"/>
                <exclude name="example-descriptor.xml"/>
                <exclude name="page-flow.xpl"/>
            </zipfileset>
        </zip>
    </target>

    <target name="orbeon-com-example" depends="prepare">
        <mkdir dir="${build.distrib.dir}"/>
        <zip zipfile="${build.distrib.dir}/orbeon-com-example-1.2.zip">
            <zipfileset dir="doc/example-applications"/>
            <zipfileset dir="descriptors/examples/web/orbeon-com" prefix="WEB-INF"/>
            <zipfileset dir="C:/Documents and Settings/Alessandro Vernet/My Documents/orbeon/cvs-public/oss-site/resources" prefix="WEB-INF/resources"/>
        </zip>
    </target>

    <target name="example-applications" depends="bizdoc-example, orbeon-com-example"/>

    <target name="orbeon-dist-packages" depends="orbeon-dist-war, orbeon-doc, orbeon-javadoc">
        <property name="prefix" value="ops-${release.number}"/>
        <!-- Create temporary zip file -->
        <property name="tmp-zip" value="${build.distrib.dir}/ops-${release.number}-tmp.zip"/>
        <zip zipfile="${tmp-zip}">
            <zipfileset dir="${build.distrib.dir}" prefix="${prefix}">
                <include name="${project.name}.war"/>
            </zipfileset>
            <zipfileset dir="${build.doc.dir}" prefix="${prefix}/doc"/>
            <zipfileset dir="doc/dist" prefix="${prefix}"/>
            <zipfileset dir="${cli-examples-src.dir}" prefix="${prefix}/cli-examples"/>
        </zip>
        <!-- Fix EOL for Windows platform -->
        <delete dir="${build.temp.dir}/distrib"/>
        <mkdir dir="${build.temp.dir}/distrib"/>
        <unzip src="${tmp-zip}" dest="${build.temp.dir}/distrib"/>
        <fixcrlf srcDir="${build.temp.dir}/distrib" eol="crlf">
            <include name="**/*.txt"/>
            <include name="**/*.xml"/>
            <include name="**/*.xsl"/>
            <include name="**/*.xpl"/>
            <include name="**/*.jsp"/>
            <include name="**/*.jspx"/>
            <include name="**/*.html"/>
            <include name="**/*.js"/>
            <include name="**/*.css"/>
            <include name="**/*.java"/>
        </fixcrlf>
        <zip zipfile="${build.distrib.dir}/ops-${release.number}.zip" basedir="${build.temp.dir}/distrib"/>
        <!-- Fix EOL for Unix platform -->
        <fixcrlf srcDir="${build.temp.dir}/distrib" eol="lf">
            <include name="**/*.txt"/>
            <include name="**/*.xml"/>
            <include name="**/*.xsl"/>
            <include name="**/*.xpl"/>
            <include name="**/*.jsp"/>
            <include name="**/*.jspx"/>
            <include name="**/*.html"/>
            <include name="**/*.js"/>
            <include name="**/*.css"/>
            <include name="**/*.java"/>
        </fixcrlf>
        <tar tarfile="${build.distrib.dir}/ops-${release.number}.tar.gz" compression="gzip" basedir="${build.temp.dir}/distrib"/>
        <delete file="${tmp-zip}"/>
    </target>

    <target name="orbeon-dist-install" depends="orbeon-dist-war">

        <!-- Create directories -->
        <mkdir dir="${build.dir}/install"/>
        <mkdir dir="${build.dir}/install/ops-${release.number}"/>
        <mkdir dir="${build.dir}/install/${install.tomcat}"/>
        <mkdir dir="${build.dir}/install/${install.jdk}"/>

        <!-- Prepare JDK -->
        <unzip src="descriptors/install/${install.jdk}.zip" dest="${build.dir}/install/${install.jdk}"/>

        <!-- Prepare Tomcat -->
        <unzip src="descriptors/install/${install.tomcat}.zip" dest="${build.dir}/install/${install.tomcat}"/>
        <copy file="descriptors/install/server.xml" todir="${build.dir}/install/${install.tomcat}/conf">
            <filterset>
                <filter token="VERSION" value="${release.number}"/>
            </filterset>
        </copy>
        <copy file="descriptors/install/tomcat-users.xml" todir="${build.dir}/install/${install.tomcat}/conf"/>
        <copy file="descriptors/install/oxf.ico" todir="${build.dir}/install"/>
        <copy file="descriptors/install/startOXF.bat" todir="${build.dir}/install"/>
        <copy file="lib/hsqldb-1_7_1.jar" todir="${build.dir}/install/${install.tomcat}/common/lib"/>

        <!-- Prepare Orbeon -->
        <unzip src="build/distrib/${project.name}.war" dest="${build.dir}/install/ops-${release.number}"/>
        <copy file="lib/portlet-api_1.0.jar" todir="${build.dir}/install/ops-${release.number}/WEB-INF/lib"/>
        <delete file="${build.dir}/install/ops-${release.number}/WEB-INF/web.xml"/>
        <xslt in="build.xml" style="${descriptors.dir}/web.xsl"
            out="${build.dir}/install/ops-${release.number}/WEB-INF/web.xml">
            <param name="target" expression="install"/>
            <param name="build-root" expression="${build.root}"/>
        </xslt>

        <!-- Make sure that text files are in the Windows encoding -->
        <fixcrlf srcDir="${build.dir}/install/" eol="crlf">
            <include name="**/*.txt"/>
            <include name="**/*.xml"/>
            <include name="**/*.xsl"/>
            <include name="**/*.xpl"/>
            <include name="**/*.jsp"/>
            <include name="**/*.jspx"/>
            <include name="**/*.html"/>
            <include name="**/*.js"/>
            <include name="**/*.css"/>
            <include name="**/*.java"/>
        </fixcrlf>

        <!-- Run install tool -->
        <exec dir="descriptors/install" executable="${nsis.home}/makensis.exe">
            <arg value="oxf.nsi"/>
        </exec>
    </target>

    <target name="orbeon-dist" depends="orbeon-dist-packages"/>
    
    <target name="post-update" depends="orbeon-source-files-lists,orbeon-css-templates">
        <chmod dir="${war.dir}/WEB-INF/exist-data" perm="a+rw"/>
    </target>

    <target name="copy-distrib" depends="orbeon-dist">
        <copy todir="/home/httpd/html/public/oxf/secret">
            <fileset dir="${build.distrib.dir}">
                <include name="ops-${release.number}.*"/>
            </fileset>
        </copy>
    </target>

    <target name="oxfmark" depends="classes">
        <!-- Compile code -->
        <javac destdir="build/classes"
            classpathref="class.path"
            debug="${build.debug}" optimize="off" target="1.3" source="1.3" failonerror="true">
            <src path="oxfmark/src"/>
        </javac>

        <!-- Unzip libraries -->
        <mkdir dir="build/oxfmark"/>
        <mkdir dir="build/oxfmark/lib"/>
        <unzip src="lib/looks-1_1_2.jar" dest="build/oxfmark/lib"/>
        <unzip src="lib/dom4j-1_4_orbeon.jar" dest="build/oxfmark/lib"/>
        <unzip src="lib/log4j-1.3alpha0.jar" dest="build/oxfmark/lib"/>
        <unzip src="lib/jaxen-1_1-beta-1-dev.jar" dest="build/oxfmark/lib"/>
        <unzip src="lib/saxpath-dev_orbeon.jar" dest="build/oxfmark/lib"/>
        <unzip src="lib/xercesImpl_2_6_2_orbeon.jar" dest="build/oxfmark/lib"/>
        <unzip src="lib/xml-apis-xerces_2_6_2_orbeon.jar" dest="build/oxfmark/lib"/>
        <unzip src="lib/xalan-2_5_1_orbeon.jar" dest="build/oxfmark/lib"/>
        <unzip src="lib/commons-collections-2_0.jar" dest="build/oxfmark/lib"/>
        <unzip src="lib/commons-lang-1_0-b1.jar" dest="build/oxfmark/lib"/>
        <unzip src="lib/commons-beanutils-1_5.jar" dest="build/oxfmark/lib"/>
        <unzip src="lib/commons-logging-1_0_4.jar" dest="build/oxfmark/lib"/>
        <unzip src="lib/commons-fileupload-1.0-beta-1.jar" dest="build/oxfmark/lib"/>
        <unzip src="lib/jakarta-oro-2_0_6.jar" dest="build/oxfmark/lib"/>
        <unzip src="lib/msv-20031020.jar" dest="build/oxfmark/lib"/>
        <unzip src="lib/isorelax-20031020.jar" dest="build/oxfmark/lib"/>
        <unzip src="lib/xsdlib-20031020.jar" dest="build/oxfmark/lib"/>
        <unzip src="lib/relaxngDatatype-20031020.jar" dest="build/oxfmark/lib"/>
        <!-- <unzip src="lib/servlet-2_3-4_0_4.jar" dest="build/oxfmark/lib"/> -->
        <unzip src="lib/avalon-framework-cvs-20020315.jar" dest="build/oxfmark/lib"/>
        <unzip src="lib/saxon-6_5_2.jar" dest="build/oxfmark/lib"/>
        <unzip src="lib/saxon-7_9_1_orbeon.jar" dest="build/oxfmark/lib"/>
        <delete file="build/oxfmark/lib/META-INF/MANIFEST.MF"/>

        <!-- Create oxfmark.jar -->
        <jar jarfile="build/oxfmark/oxfmark.jar" manifest="oxfmark/resources/MANIFEST.MF">
            <fileset dir="${build.classes.dir}"/>
            <fileset dir="oxfmark/resources" includes="*.png"/>
            <fileset dir="${java-src.dir}">
                <include name="**/*.xml"/>
                <include name="**/*.rng"/>
                <include name="**/*.css"/>
                <include name="**/*.xsd"/>
                <exclude name="org/orbeon/faces/**"/>
            </fileset>
            <fileset dir="${resources.dir}/oxf"/>
            <fileset dir="${web-examples-src.dir}">
                <include name="config/controller.xml"/>
                <include name="config/epilogue.xpl"/>
                <include name="config/properties.xml"/>
                <include name="hello/view.xsl"/>
                <include name="hello/xforms.xml"/>
                <include name="welcome/page.xml"/>
                <include name="config/theme/theme.xsl"/>
            </fileset>
            <fileset dir="build/oxfmark/lib"/>
        </jar>
        <signjar alias="orbeon" storepass="password" keystore="oxfmark/resources/myKeystore" jar="build/oxfmark/oxfmark.jar"/>

        <!-- Copy libraries and other files -->
        <copy file="oxfmark/resources/icon32.gif" todir="build/oxfmark"/>
        <copy file="oxfmark/resources/icon64.gif" todir="build/oxfmark"/>
        <copy file="oxfmark/resources/oxfmark.jnlp" todir="build/oxfmark"/>

    </target>

</project>
