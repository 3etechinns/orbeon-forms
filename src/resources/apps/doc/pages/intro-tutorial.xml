<?xml version="1.0" encoding="windows-1252"?>
<!--
    Copyright (C) 2006 Orbeon, Inc.

    The Orbeon documentation is not distributed under the LGPL license. Use of the documentation is
    subject to the following terms:

    * Conversion to other formats is allowed, but the actual content may not be altered or edited
      in any way.

    * You may create printed copies for your own personal use.

    * For all other uses, such as selling printed copies or using (parts of) the manual in another
      publication, prior written agreement from Orbeon, Inc. is required.

    Please contact Orbeon at info@orbeon.com for more information.
-->
<document xmlns:p="http://www.orbeon.com/oxf/pipeline">
    <header>
        <title>Orbeon Forms Tutorial</title>
    </header>
    <body>
        <section>
            <title>What is this?</title>
            <p>
                This is the tutorial for Orbeon Forms version 3.5.
            </p>
            <p>
                If you have questions or issues with this tutorial, please send a message to the <code>ops-users</code>
                mailing-list. It is easy to subscribe by following the instructions at <a
                href="http://www.orbeon.com/forms/mailing-list">http://www.orbeon.com/forms/mailing-list</a>.
            </p>
            <warning>
                This tutorial is not complete yet!
            </warning>
        </section>
        <section>
            <title>A Little Bit of Background</title>
            <section>
                <title>What Orbeon Forms Does for You</title>
                <p>
                    Orbeon Forms is a solution to build and deploy web forms. For more information, please visit the
                    Orbeon home page at <a href="http://www.orbeon.com/">http://www.orbeon.com/</a>.
                </p>

            </section>
            <section>
                <title>Prerequisites</title>
                <p>
                    To go through this tutorial, you don't need much: any reasonbly modern computer on which you can
                    install Java 1.5 (1.4.2 may work for you but 1.5 is strongly recommended) should do. You should be
                    comfortable with installing new software on your computer, including uncompressing zip or gzip
                    archives. You will also have to edit XML files. If you are familiar with HTML, this should not be a
                    problem.
                </p>
                <p>
                    You will <i>not</i> have to write any Java code or any scripting language code. You will <i>not</i>
                    have to use a compiler or other complicated build tool!
                </p>
            </section>
            <section>
                <title>Principles of Orbeon Forms</title>
                <p>
                    Orbeon Forms has a few principles:
                </p>
                <ul>
                    <li>
                        <p>
                            You write most applications without writing Java, JavaScript, or other scripting code. (But
                            you can if you really want.)
                        </p>
                    </li>
                    <li>
                        <p>
                            You get instant gratification by making changes to your application and just reloading your
                            page in your web browser. (You don't need to "compile" or "build".)
                        </p>
                    </li>
                    <li>
                        <p>
                            Orbeon Forms aims at "convention over configuration" and the "DRY" concept (don't repeat
                            yourself).
                        </p>
                    </li>
                </ul>
            </section>
        </section>
        <section>
            <title>Installing and Configuring Orbeon Forms</title>
            <section>
                <title>Downloading and Installing Java</title>
                <p>
                    Java provides the cross-platform environment in which Orbeon Forms runs.
                </p>
                <p>
                    If you don't have Java installed yet, download it from the Sun web site at <a
                    href="http://java.sun.com/javase/downloads/index.jsp">http://java.sun.com/javase/downloads/index.jsp</a>.
                    Sun provides Windows, Linux and Solaris versions. If you use a Mac with Mac OS X, you probably have
                    Java already installed on your machine, but if not visit <a
                    href="http://www.apple.com/macosx/features/java/">http://www.apple.com/macosx/features/java/</a>.
                    Then follow the instructions to install Java.
                </p>
            </section>
            <section>
                <title>Downloading and Installing Tomcat</title>
                <p>
                    Tomcat is the container application into which Orbeon Forms deploys. Follow these steps to download
                    and install Tomcat if you don't have it installed yet:
                </p>
                <ol>
                    <li>
                        <p>
                            Download Tomcat 5.5 from the Apache web site at <a
                            href="http://tomcat.apache.org/download-55.cgi">http://tomcat.apache.org/download-55.cgi</a>.
                        </p>
                    </li>
                    <li>
                        <p>
                            Install Tomcat as per the instructions. If you downloaded the installer version (Windows
                            only), run the installer. If you downloaded a compressed archive, uncompress it to the
                            location of your choice. We call the install location <code>TOMCAT_HOME</code> (on
                            windows, this could be <code>c:/Program Files/Apache/Tomcat</code>, on a Unix system,
                            <code>/home/jdoe/tomcat</code>, etc.).
                        </p>
                    </li>
                    <li>
                        <p>
                            Check that your Tomcat installation is working correctly:
                        </p>
                        <ul>
                            <li>
                                <p>
                                    Run the Tomcat startup script under <code>TOMCAT_HOME/bin</code>
                                    (<code>startup.sh</code> or <code>startup.bat</code> depending on your platform), or
                                    start Tomcat with the control application (Windows only).
                                </p>
                            </li>
                            <li>
                                <p>
                                    Open a web browser and access the following URL:
                                </p>
                                <xml-source>
                                    http://localhost:8080/
                                </xml-source>
                                <p>
                                    You should see the Tomcat welcome page. [TODO: screenshot]
                                </p>
                            </li>
                        </ul>
                    </li>
                </ol>
                <note>
                    We recommend using Tomcat for this tutorial, but Orbeon Forms can deploy into containers other
                    than Tomcat.
                </note>
            </section>
            <section>
                <title>Downloading and Installing Orbeon Forms</title>
                <p>
                    Follow these steps to download and install Orbeon Forms:
                </p>
                <ol>
                    <li>
                        <p>
                            Download Orbeon Forms 3.5 or later from <a
                            href="http://www.orbeon.com/forms/download">http://www.orbeon.com/forms/download</a>.
                        </p>
                    </li>
                    <li>
                        <p>
                            Uncompress the archive into a directory of your choice. We call that directory
                            <code>ORBEON_FORMS_HOME</code>.
                        </p>
                    </li>
                    <li>
                        <p>
                            Under <code>ORBEON_FORMS_HOME</code>, you will find a file called <code>ops.war</code>.
                            This is the file to deploy into Tomcat. To do so, just copy it under
                            <code>TOMCAT_HOME/webapps</code> (alternatively, if you know what you are doing, you can
                            uncompress it at a location of your choice and configure a context in
                            <code>TOMCAT_HOME/conf/server.xml</code>). The <code>webapps</code> directory is already
                            present after you have installed Tomcat.
                        </p>
                    </li>
                </ol>
            </section>
            <section>
                <title>Testing your setup</title>
                <p>
                    Make sure you restart Tomcat (run the shutdown script under <code>TOMCAT_HOME/bin</code>, and then
                    the startup script again). Then open up with a web browser the following URL:
                </p>
                <xml-source>
                    http://localhost:8080/ops/
                </xml-source>
                <p>
                    You should see the Orbeon Forms welcome page. [TODO: screenshot]
                </p>
                <p>
                    You can now navigate the list of sample applications listed on the left side. You can see the source
                    code of each application directly in your web browser by selecting the "View Source Code" tab at
                    the top of the page to open up the Orbeon Forms Source Viewer. [TODO: screenshot]
                </p>
            </section>
        </section>
        <section>
            <title>The Hello Application</title>
            <section>
                <title>Running the Hello Application</title>
                <p>
                    The Hello application is about the simplest XForms application you can think of. It asks for your
                    name and displays it back. You run the Hello application by selecting the link "XForms Hello" in
                    the list of applications. Simply enter your first name in the input field, for example "Joe". You
                    should promptly see a message underneath saying "Hello, Joe!". [TODO: screenshot]
                </p>
                <p>
                    You can directly view the source code from your web browser by selecting the "View Source Code"
                    tab. There you see: [TODO: screenshot]
                </p>
                <ul>
                    <li>
                        <p>
                            <code>view.xhtml</code>: this is the XHTML and XForms code for the Hello application.
                        </p>
                    </li>
                    <li>
                        <p>
                            <code>page-flow.xml</code>: this is the page flow for the Hello application. The main task
                            of a page flow is mapping external URLs (as typed in a web browser) with Orbeon Forms pages.
                        </p>
                    </li>
                </ul>
            </section>
            <section>
                <title>The Source Code</title>
                <p>
                    You are now ready to look at the source code of the Hello application. This will give you an idea of
                    what an Orbeon Forms application looks like. First, select <code>view.xhtml</code> to make the
                    source code for that file appear on the right:
                </p>
                <xml-source show-namespaces="true">
                    <html xmlns="http://www.w3.org/1999/xhtml"
                          xmlns:xforms="http://www.w3.org/2002/xforms">
                        <head>
                            <title>XForms Hello</title>
                            <xforms:model>
                                <xforms:instance>
                                    <first-name xmlns=""/>
                                </xforms:instance>
                            </xforms:model>
                        </head>
                        <body>
                            <p>
                                Please enter your first name:
                                <xforms:input ref="/first-name" incremental="true"/>
                            </p>
                            <p>
                                <xforms:output value="if (normalize-space(/first-name) = '') then '' else concat('Hello, ', /first-name, '!')"/>
                            </p>
                        </body>
                    </html>
                </xml-source>
                <p>
                    The first thing you notice is that this looks very much like HTML (notice the <code>&lt;html></code>
                    tag). Except that this is XHTML, the XML-compatible version of XHTML. There are only a few
                    differences that matter between HTML and XHTML, in particular you must close all your tags and use
                    quotes around attributes.
                </p>
                <p>
                    Another difference with plain HTML is that there are tags that start with the string
                    <code>xforms:</code>. Those are defined by the XForms specification from W3C. They are at the heart
                    of Orbeon Forms and enable all the cool forms features that you see in Orbeon Forms demos.
                </p>
                <p>
                    You notice an element called <code>&lt;xforms:model></code>. Because XForms follows a
                    Model-View-Controller (MVC) approach, most XForms pages contain one or more <i>models</i> that
                    usually encapluate other XForms markup. You place these models within the XHTML
                    <code>&lt;head></code> tag.
                </p>
                <p>
                    With XForms, you store the data captured by controls such as input fields, combo boxes, etc. as text
                    contained within XML elements or attributes. Consider the following XML document containing a
                    single element called <code>first-name</code>.
                </p>
                <xml-source>
                    <first-name/>
                </xml-source>
                <p>
                    This element is empty. Contrast with:
                </p>
                <xml-source>
                    <first-name>Joe</first-name>
                </xml-source>
                <p>
                    The element now contains the string "Joe". Notice how in <code>view.xhtml</code> the XML document is
                    encapsulatd within an <code>&lt;xforms:instance></code> tag:
                </p>
                <xml-source show-namespaces="true">
                    <xforms:instance xmlns:xforms="http://www.w3.org/2002/xforms">
                        <first-name xmlns=""/>
                    </xforms:instance>
                </xml-source>
                <p>
                    This tag defines an XForms <i>instance</i>, which is just XForms' way of calling an XML document
                    used to store data.
                </p>
                <p>
                    Now consider the remaining XForms tags in the source file: <code>&lt;xforms:input></code> and
                    <code>&lt;xforms:output></code>. These two tags are not located under the XHTML
                    <code>&lt;head></code>, but under <code>&lt;body></code>. They are part of the <i>view</i> of your
                    page, in other words these tags directly help define visible controls on the page. Consider
                    <code>&lt;xforms:input></code>:
                </p>
                <xml-source show-namespaces="false">
                    <xforms:input ref="/first-name" incremental="true" xmlns:xforms="http://www.w3.org/2002/xforms"/>
                </xml-source>
                <p>
                    You guessed that this tag allows the user to <i>input</i> information.
                    <code>&lt;xforms:input></code> is usually displayed to the user as an input field. The
                    <code>ref</code> attribute is the magic that connects the input field to the XForms instance. it
                    contains an <i>XPath expression</i>, which in this case just looks like a file path. In this case,
                    <code>/first-name</code> points to the element called <code>first-name</code>, which happens to be
                    the only element we have in the XForms instance. Using the <code>ref</code> attribute this way is
                    called a <i>binding</i> and means two things:
                </p>
                <ul>
                    <li>
                        <p>
                            When the user enters text in the input field, the text is saved into the element called
                            <code>first-name</code>.
                        </p>
                    </li>
                    <li>
                        <p>
                            It also goes the other way: if somehow the text content of <code>first-name</code> in the
                            XForms instance changes, this will be automatically reflected in the input field.
                        </p>
                    </li>
                </ul>
                <p>
                    Now consider <code>&lt;xforms:output></code>. As you guess from the name of the tag, this simply
                    displays a value on screen. If you have tried running the Hello application, you have probably
                    guessed the logic that is being implemented: if the first name entered by the user is not a blank
                    string, then we display the "Hello" message followed by the first name and then an exclamation mark.
                    Otherwise if the first name consists only of spaces, we just display a blank string. The idea is to
                    avoid displaying things like "Hello !" without an actual first name.
                </p>
                <p>
                    With many client-side libraries, you express this type of logic with JavaScript. With XForms, you
                    use XPath instead. This means that you need to learn at least a few bits of the XPath syntax. While
                    XPath may be different from what you already know (it is based on expressions and definitely
                    targetted at XML), it is in fact a smaller language than JavaScript.
                </p>
                <p>
                    So how do you hook-up the logic within <code>&lt;xforms:output></code>? Here, instead of a
                    <code>ref</code> attribute, we use a <code>value</code> attribute. Like <code>ref</code>,
                    <code>value</code> takes an XPath expression, but it doesn't actually create a binding to instance
                    data: it just returns a string. The XPath is as follows:
                </p>
                <xml-source>
                    if (normalize-space(/first-name) = '') then '' else concat('Hello, ', /first-name, '!')
                </xml-source>
                <p>
                    A few things to point out:
                </p>
                <ul>
                    <li>
                        <p>
                            The main expression has the form <code>if () then ... else ...</code>. (This is actually an
                            XPath 2.0 expression, which supports the <code>if</code> construct.)
                        </p>
                    </li>
                    <li>
                        <p>
                            The <code>normalize-space()</code> function removes all leading and trailing space (and
                            simplifies internal spaces as well). This is a little trick to not only test whether the
                            first name is empty, but also to test whether it is an all-blank string.
                        </p>
                    </li>
                    <li>
                        <p>
                            Contrary to JavaScript, the equality test is expressed with a single <code>=</code> instead
                            of <code>==</code>.
                        </p>
                    </li>
                    <li>
                        <p>
                           The <code>concat</code> function concatenates all its parameters into a resulting string. It
                           is like the JavaScript <code>+</code> operator on strings.
                        </p>
                    </li>
                    <li>
                        <p>
                            Note the use of the single quote <code>'</code> around strings. This is needed because the
                            XPath expression is put within double quotes <code>"</code> in the <code>value</code>
                            attribute.
                        </p>
                    </li>
                </ul>
            </section>
            <section>
                <title>Page Flow</title>
                <p>
                    If you look at your browser's URL bar when showing the example, you notice that it looks like this:
                </p>
                <xml-source>
                    http://localhost:8080/ops/xforms-hello/
                </xml-source>
                <ul>
                    <li>
                        <p>
                            The first part of the URL, <code>http://localhost:8080/</code>, is self-explanatory: it
                            depends on what host and port your server is running.
                        </p>
                    </li>
                    <li>
                        <p>
                            The next part, <code>ops</code>, depends on what context you install Orbeon Forms into. By
                            default, because the WAR file is called <code>ops.war</code>, the context is
                            <code>ops</code>. (You could as well configure your container to use a different context, or
                            an empty (default) context.)
                        </p>
                    </li>
                    <li>
                        <p>
                            The last part, <code>/xforms-hello/</code>, automatically matches the name of the directory
                            you store your application into (more on this later when you look at the source code). This
                            causes the application's page flow (<code>page-flow.xml</code>) to run.
                        </p>
                    </li>
                </ul>
                <p>
                    So now look at <code>page-flow.xml</code> for the Hello application. It is very simple:
                </p>
                <xml-source show-namespaces="true">
                    <config xmlns="http://www.orbeon.com/oxf/controller">
                        <page path-info="*" view="view.xhtml"/>
                        <epilogue url="oxf:/config/epilogue.xpl"/>
                    </config>
                </xml-source>
                <p>
                    The important line in this page flow is this one:
                </p>
                <xml-source show-namespaces="false">
                    <page path-info="*" view="view.xhtml"/>
                </xml-source>
                <p>
                    It tells Orbeon Forms that any path (notice the wildcard <code>*</code>) sent by the web browser to
                    this application will cause the page view stored in <code>view.xhtml</code> to be processed. You
                    can check this by entering the following path in your browser:
                </p>
                <xml-source>
                    http://localhost:8080/ops/xforms-hello/my-page
                </xml-source>
                <p>
                    The exact same result will show! Of course, page flows make the most sense when you have more than
                    one page in your application, which translates into more than one <code>&lt;page></code> element.
                </p>
            </section>
            <section>
                <title>Orbeon Forms Resources</title>
                <p>
                    Under <code>TOMCAT_HOME/webapps/ops</code>, you find a <code>WEB-INF</code> directory. That
                    directory, in turn, contains a <code>resources</code> directory. We refer to that
                    <code>resources</code> directory as <code>RESOURCES</code> below.
                </p>
                <p>
                    The <code>RESOURCES</code> directory is very important: this is where your applications lives.
                    This directory is called "resources" because it contains all the files (or resources) such as XHTML
                    documents, XML schemas, images, CSS, etc. needed by your Orbeon Forms application.
                </p>
                <note>
                    Orbeon Forms is able to store your resources pretty much anywhere you want. For convenience, by
                    default they are available under the WAR file's <code>WEB-INF/resources</code> so you can get up
                    and running without configuration.
                </note>
            </section>
            <section>
                <title>A Look Into the Resources Directory Structure</title>
                <p>
                    Under <code>RESOURCES</code>, you see the following files and directories:
                </p>
                <ul>
                    <li>
                        <p>
                            <code>apps</code> directory: contains one sub-directory for each application currently
                            running in Orbeon Forms. By default, it contains a series of sample applications - the ones
                            that you see on the left side of your screen when you start Orbeon Forms. Notice a directory
                            called <code>xforms-hello</code>: this is the directory that contains the Hello application.
                        </p>
                    </li>
                    <li>
                        <p>
                            <code>config</code> directory: contains several configuration files that you can modify if
                            needed. For now, you don't need to worry about this directory.
                        </p>
                    </li>
                    <li>
                        <p>
                            <code>page-flow.xml</code> file: the top-level page flow file. You should not worry about
                            this file just yet. Just know that by default, it is in charge of deciding which application
                            to run depending on the application name in the URL that you enter in your web browser.
                        </p>
                    </li>
                    <li>
                        <p>
                            <code>apps-list.xml</code> file: contains the list of sample applications to display on the
                            left side of the screen. This is not needed by your own application.
                        </p>
                    </li>
                </ul>
            </section>
            <section>
                <title>Playing with the Hello Application Source Code</title>
                <p>
                    You find the application under <code>RESOURCES/apps/xforms-hello</code>. That directory contains
                    the two files that you have seen earlier through the Source Code Viewer in your web browser. Again,
                    the name <code>xforms-hello</code> is important and matches the <code>xforms-hello</code> part of
                    the URL in your web browser: <code>http://localhost:8080/ops/xforms-hello/</code>. Now, modify
                    <code>view.xhtml</code>:
                </p>
                <ul>
                    <li>
                        <p>
                            Open <code>view.xhtml</code> in a text editor.
                        </p>
                    </li>
                    <li>
                        <p>
                            Modify the string "Please enter your first name:" with "Your name here:".
                        </p>
                    </li>
                    <li>
                        <p>
                            Save <code>view.xhtml</code>.
                        </p>
                    </li>
                    <li>
                        <p>
                             Go back to the Hello application in your web browser and reload the page. You should see
                             the new text appear: [TODO: screenshot]
                        </p>
                    </li>
                    <li>
                        <p>
                            Renew the experience but add some XForms. For example, add a second
                            <code>&lt;xforms:input></code> right after the first one:
                        </p>
                        <xml-source show-namespaces="true" xmlns:xforms="http://www.w3.org/2002/xforms">
                            <xforms:input ref="/first-name" incremental="true"/>
                            <xforms:input ref="/first-name" incremental="true"/>
                        </xml-source>
                        <p>
                           Reload the page, and notice, as you type in an input field, how the other one udates as you
                           type. This happens because the two fields are bound to the same instance data. The
                           <code>incremental="true"</code> attribute allows the changes to occur as you type, instead of
                           occurring when you focus in and out of fields.
                        </p>
                    </li>
                </ul>
                <p>
                    You notice that you get instant gratifiation with Orbeon forms: just change files on disk, reload
                    your page, and your changes are taken into account with no compilation or other complex deployment.
                </p>
            </section>
        </section>
        <section>
            <title>The Bookcast Application</title>
            <section>
                <title>What is it?</title>
                <p>
                    The Bookcast application allows you to keep track of information about books you have read. For each
                    book, you enter information such as title, author, language, and your own comments. The information
                    is persisted so you can access it again. Then you can do cool things with the available data such
                    create an Atom feed of your entries. [TODO: Screenshot]
                </p>
            </section>
            <section>
                <title>Getting Started</title>
                <p>
                    But first things first. Start by making a first functional page:
                </p>
                <ul>
                    <li>
                        <p>
                            The first thing to do is to create a new directory for your application. Orbeon Forms
                            already come with the complete <code>xforms-bookcast</code> application, so instead let's
                            decice on another name, for example <code>my-bookcast</code>. Create a directory with that
                            name as <code>RESOURCES/apps/my-bookcast</code>. For convenience, we refer to that new
                            directory as the <code>BOOKCAST</code> directory below.
                        </p>
                    </li>
                    <li>
                        <p>
                            Create a <code>page-flow.xml</code> file under <code>BOOKCAST</code>:
                        </p>
                        <xml-source>
                            <config xmlns="http://www.orbeon.com/oxf/controller">

                                <page path-info="/my-bookcast/" view="view.xhtml"/>

                                <epilogue url="oxf:/config/epilogue.xpl"/>

                            </config>
                        </xml-source>
                        <p>
                            This page flow is automatically called for any path that starts with
                            <code>/ops/my-bookcast/</code>. Here, it matches on the exact path
                            <code>/ops/my-bookcast/</code> and calls up the page view called <code>view.xhtml</code>.
                        </p>
                    </li>
                    <li>
                        <p>
                            Create a skeleton for your <code>view.xhtml</code> under <code>BOOKCAST</code>:
                        </p>
                        <xml-source>
                            <html xmlns="http://www.w3.org/1999/xhtml"
                                  xmlns:xhtml="http://www.w3.org/1999/xhtml"
                                  xmlns:xforms="http://www.w3.org/2002/xforms"
                                  xmlns:xs="http://www.w3.org/2001/XMLSchema"
                                  xmlns:ev="http://www.w3.org/2001/xml-events"
                                  xmlns:xxforms="http://orbeon.org/oxf/xml/xforms">
                                <head>
                                    <title>XForms Bookcast</title>
                                </head>
                                <body>
                                    <p>Hello!</p>
                                </body>
                            </html>
                        </xml-source>
                        <p>
                            This is a very basic XHTML document. It features a title in the <code>&lt;head></code> and a
                            "Hello!" message in the <code>&lt;body></code>/. It also declares a bunch of XML namespaces
                            that we will need later in the document.
                        </p>
                    </li>
                </ul>
                <p>
                    Now go to:
                </p>
                <xml-source>
                    http://localhost:8080/ops/my-bookcast/
                </xml-source>
                <p>
                    You should something like this: [TODO: screenshot]
                </p>
            </section>
            <section>
                <title>XForms Model and Instance</title>
                <p>
                    An XForms document that wants to do something useful needs at least one model and one instance. But
                    first it is wise to decide how you would like to represent the information captured by your form.
                    This is an example able to store the data of the Bookcast application:
                </p>
                <xml-source show-namespaces="false">
                    <books xmlns="">
                        <book>
                            <title>xxx</title>
                            <author></author>
                            <language></language>
                            <link></link>
                            <rating></rating>
                            <notes></notes>
                        </book>
                        <book>
                            <title>xxx</title>
                            <author></author>
                            <language></language>
                            <link></link>
                            <rating></rating>
                            <notes></notes>
                        </book>
                    </books>
                </xml-source>
                <p>
                    The idea is to store all the book information in a single XML document. So under a top-level
                    <code>&lt;books></code> element, we put as many <code>&lt;book></code> children elements as needed.
                    You will see later how it is possible with XForms to add and remove children elements. For now, your
                    initial instance declaration is empty and contains a single book:
                </p>
                <xml-source show-namespaces="false">
                    <xforms:instance id="books-instance" xmlns:xforms="http://www.w3.org/2002/xforms">
                        <books xmlns="">
                            <book>
                                <title/>
                                <author/>
                                <language/>
                                <link/>
                                <rating/>
                                <notes/>
                                <!--<start-date/>-->
                                <!--<end-date/>-->
                            </book>
                        </books>
                    </xforms:instance>
                </xml-source>
                <p>
                    Notice the <code>id</code> attribute which allows other XForms contructs to refer to that particular
                    instance.
                </p>
                <p>
                    Now do the following:
                </p>
                <ul>
                    <li>
                        <p>
                            Insert the instance under the <code>&lt;head></code> element.
                        </p>
                    </li>
                    <li>
                        <p>
                            Reload the page.
                        </p>
                    </li>
                </ul>
                <p>
                    You should still see a blank page, because so far you haven't added any visual elements!
                </p>
            </section>
            <section>
                <title>First Controls</title>
                <p>
                    Now it's time to add some visual controls to your page. Start with the following under the
                    <code>&lt;body></code> element:
                </p>
                <xml-source show-namespaces="false">
                    <xforms:group ref="book" xmlns:xforms="http://www.w3.org/2002/xforms">
                        <xforms:input ref="title">
                            <xforms:label>Title</xforms:label>
                        </xforms:input>
                        <br/>
                        <xforms:input ref="author">
                            <xforms:label>Author</xforms:label>
                        </xforms:input>
                    </xforms:group>
                </xml-source>
                <p>
                    Reload the page. You should seem something like this: [TODO: screenshot]
                </p>
                <p>
                    After having looked at the Hello example, this should be clear, with a little novelty:
                    <code>&lt;xforms:group></code>: this element allows grouping XForms controls together. The
                    <code>ref="book"</code> element changes the current <i>evaluation context</i> for the nested
                    controls, which means that they can use simpler XPath expressions: <code>ref="title"</code> instead
                    of <code>ref="book/title"</code> and <code>ref="author"</code> instead of
                    <code>ref="book/author"</code> (groups have other uses but you don't need to learn that now).
                </p>
                <p>
                    Another thing: all XForms controls require a nested <code>&lt;xforms:label></code> element, as an
                    effort to help accessibility. In some cases, you won't want an actual label to display next to the
                    control: to achieve this, you can either hide the label with CSS, or use an empty label element
                    (<code>&lt;xforms:label/></code>).
                </p>
            </section>
            <section>
                <title>Adding Constraints</title>
                <p>
                    Now say you want to make the title and author required data. You control this with the
                    <code>&lt;xforms:bind></code> element in the XForms model. Add the following under
                    <code>&lt;xforms:model></code> after your instance:
                </p>
                <xml-source show-namespaces="false">
                    <xforms:bind nodeset="book" xmlns:xforms="http://www.w3.org/2002/xforms">
                        <xforms:bind nodeset="title" required="true()"/>
                        <xforms:bind nodeset="author" required="true()"/>
                    </xforms:bind>
                </xml-source>
                <p>
                    Notice how, as you enter text in the title or author field, the field's background changes color to
                    indicate that the field must be filled out: [TODO: screenshot]
                </p>
                <p>
                    The above requires some explanations:
                </p>
                <ul>
                    <li>
                        <p>
                            The <code>&lt;xforms:bind></code> element is used to assign so-called <i>Model Item
                            Properties</i> (or <i>MIPs</i>) to XForms instance nodes (typically XML elements or
                            attributes). Such properties include whether a field is required, read-only, or visible;
                            whether the field has to satisfy a certain constraint or be of a particular type; and
                            whether the field is a calculated value.
                        </p>
                    </li>
                    <li>
                        <p>
                            Here we use the <code>required</code> attribute, which determines whether a field is, well,
                            required, that is, whether it has to be filled out by the user.
                        </p>
                    </li>
                    <li>
                        <p>
                            Much like <code>&lt;xforms:group></code> in the controls, <code>&lt;xforms:bind></code>
                            elements can be nested.
                        </p>
                    </li>
                    <li>
                        <p>
                            <code>&lt;xforms:bind></code> doesn't use a <code>ref</code> attribute to point to instance
                            nodes, but a <code>nodeset</code> attribute, which allows pointing at more than one node
                            using a single XPath expression.
                        </p>
                    </li>
                    <li>
                        <p>
                            The outer <code>&lt;xforms:bind></code> element points to the <code>&lt;book></code> element
                            under the top-level <code>&lt;books></code> element of your instance. This happens because
                            the evaluation context for a top-level XPath expression in an <code>&lt;xforms:bind></code>
                            element is the root element of the first XForms instance. You could be more explicit, for
                            example with:
                        </p>
                        <xml-source show-namespaces="false">
                            <xforms:bind nodeset="/books/book" xmlns:xforms="http://www.w3.org/2002/xforms">
                                ...
                            </xforms:bind>
                        </xml-source>
                        <p>
                            Or with:
                        </p>
                        <xml-source show-namespaces="false">
                            <xforms:bind nodeset="instance('books-instance')/book" xmlns:xforms="http://www.w3.org/2002/xforms">
                                ...
                            </xforms:bind>
                        </xml-source>
                        <p>
                            The latter makes it clear, with the XForms <code>instance()</code> function, that you are
                            addressing the <code>books-instance</code> instance and not another instance, so you will
                            probably tend to prefer that notation.
                        </p>
                    </li>
                    <li>
                        <p>
                            The inner <code>&lt;xforms:bind></code> elements apply the <i>required</i> MIP to the
                            <code>&lt;title></code> and <code>&lt;author></code> elements. The <code>required</code>
                            attribute must contain an XPath expression, which is why it contains <code>true()</code>
                            (the way to express a Boolean "true" value in XPath) and not simply <code>true</code>.
                            Using XPath expressions allows you to make MIPs dynamically change, so that, for example, a
                            form field can be required or not depending on other form fields.
                        </p>
                    </li>
                    <li>
                        <p>
                            Note that MIPs are assigned to XML nodes, not directly to controls. But they affect the
                            controls that are bound to those nodes. This is part of XForms's MVC philosophy.
                        </p>
                    </li>
                </ul>
            </section>
            <section>
                <title>Single Selection Controls</title>
                <p>
                    XForms is of course not limited to simple input controls. Add the following after the second
                    <code>&lt;xforms:input></code> control:
                </p>
                <xml-source show-namespaces="false">
                    <xforms:select1 ref="language" xmlns:xforms="http://www.w3.org/2002/xforms">
                        <xforms:label>Language</xforms:label>
                        <xforms:item>
                            <xforms:label>Choose one...</xforms:label>
                            <xforms:value></xforms:value>
                        </xforms:item>
                        <xforms:item>
                            <xforms:label>English</xforms:label>
                            <xforms:value>en</xforms:value>
                        </xforms:item>
                        <xforms:item>
                            <xforms:label>French</xforms:label>
                            <xforms:value>fr</xforms:value>
                        </xforms:item>
                        <xforms:item>
                            <xforms:label>Spanish</xforms:label>
                            <xforms:value>es</xforms:value>
                        </xforms:item>
                    </xforms:select1>
                </xml-source>
                <p>
                    Reload the page. You should see the following: [TODO: screenshot]
                </p>
                <p>
                    You have just added a single selection control with <code>&lt;xforms:select1></code>. The name means
                    that the user can "select one" item among several items. (XForms tends to call controls using more
                    abstract terms, rather than giving them names such as "combo box" or "menu".) The single selection
                    control usually appears like a drop-down menu or combo box with most XForms implementations (but you
                    can change it's appearance as shown later).
                </p>
                <p>
                    Nested within the control, you find several <code>&lt;xforms:item></code> elements. Each one
                    creates an item in the drop-down menu. An item has to sides: the <code>&lt;xforms:label></code>
                    element specifies the <i>label</i> that is presented to the user, and the
                    <code>&lt;xforms:value></code> element specifies the <i>value</i> that is stored into the XForms
                    instance when the user selects that particular item.
                </p>
                <p>
                    Now XForms encourages you to store data in the model. For a selection control, this means storing
                    the list of labels and values in an XForms instance instead of statically listing the items under
                    the <code>&lt;xforms:select1></code> element. So let's do this! Create a new instance in the model:
                </p>
                <xml-source show-namespaces="false">
                    <xforms:instance id="languages-instance" xmlns:xforms="http://www.w3.org/2002/xforms">
                        <languages xmlns="">
                            <language>
                                <name>Choose one...</name>
                                <value></value>
                            </language>
                            <language>
                                <name>English</name>
                                <value>en</value>
                            </language>
                            <language>
                                <name>French</name>
                                <value>fr</value>
                            </language>
                            <language>
                                <name>Spanish</name>
                                <value>es</value>
                            </language>
                        </languages>
                    </xforms:instance>
                </xml-source>
                <p>
                    Then modify the <code>&lt;xforms:select1></code> element as follows:
                </p>
                <xml-source show-namespaces="false">
                    <xforms:select1 ref="language" xmlns:xforms="http://www.w3.org/2002/xforms">
                        <xforms:label>Language</xforms:label>
                        <xforms:itemset nodeset="instance('languages-instance')/language">
                            <xforms:label ref="name"/>
                            <xforms:value ref="value"/>
                        </xforms:itemset>
                    </xforms:select1>
                </xml-source>
                <p>
                    Notice the new <code>&lt;xforms:itemset></code> element instead of the <code>&lt;xforms:item></code>
                    previously used. That element specifies an <i>item set</i>, which allows you to point to the list
                    of <code>&lt;language></code> nodes in the <code>languages-instance</code> instance, and for each of
                    those to tell the control where to find the label and the value.
                </p>
                <p>
                    You often don't have to use an item set, but using them gives you the flexibility of reusing
                    existing sets of data, dynamically changing the list of items, easing localization, etc.
                </p>
            </section>
            <section>
                <title>Adding a Text Area</title>
                <p>
                    Now add yet another control, a text area:
                </p>
                <xml-source show-namespaces="false">
                    <xforms:textarea ref="notes" appearance="xxforms:autosize" xmlns:xforms="http://www.w3.org/2002/xforms">
                        <xforms:label>Notes</xforms:label>
                    </xforms:textarea>
                </xml-source>
                <p>
                    The <code>&lt;xforms:textarea></code> element acts very much like the HTML <code>textarea</code>
                    element. It makes sense to use it to allow entering more than one line of text.
                </p>
                <p>
                    Here there is a little trick: you use the <code>appearance</code> attribute to tell Orbeon Forms to
                    use a particular appearance for the text area control. Instead of the standard text area,
                    <code>appearance="xxforms:autosize"</code> allows the text area to grow vertically as the user
                    enters more text. (This is an appearance which is specific to Orbeon Forms, and you can tell that
                    because of the <code>xxforms:</code> prefix in the appearance value.)
                </p>
                <p>
                    Note that the application will capture the same data without the <code>appearance</code> attribute,
                    it's just that the control will appear slightly differently and the user experience will be
                    changed.
                </p>
            </section>
            <section>
                <title>Finishing-Up the Controls</title>
                <p>
                    To create the ratings input, add this new instance:
                </p>
                <xml-source show-namespaces="false">
                    <xforms:instance id="ratings-instance" xmlns:xforms="http://www.w3.org/2002/xforms">
                        <ratings xmlns="">
                            <rating>
                                <name>None</name>
                                <value></value>
                            </rating>
                            <rating>
                                <name>1</name>
                                <value>1</value>
                            </rating>
                            <rating>
                                <name>2</name>
                                <value>2</value>
                            </rating>
                            <rating>
                                <name>3</name>
                                <value>3</value>
                            </rating>
                            <rating>
                                <name>4</name>
                                <value>4</value>
                            </rating>
                            <rating>
                                <name>5</name>
                                <value>5</value>
                            </rating>
                        </ratings>
                    </xforms:instance>
                </xml-source>
                <p>
                    And then add another <code>&lt;xforms:select1></code> control:
                </p>
                <xml-source show-namespaces="false">
                    <xforms:select1 ref="rating" appearance="full" xmlns:xforms="http://www.w3.org/2002/xforms">
                        <xforms:label class="fixed-width">Rating</xforms:label>
                        <xforms:itemset nodeset="instance('ratings-instance')/rating">
                            <xforms:label ref="name"/>
                            <xforms:value ref="value"/>
                        </xforms:itemset>
                    </xforms:select1>
                </xml-source>
                <p>
                    Here again, you store the list of items as a separate instance. There is something new: the use of
                    the <code>full</code> appearance, which displays the selection control as a list of radio buttons.
                    This is a standard XForms appearance value, which is likely to be supported by all XForms
                    implemementations. (You can tell that it is standard because there is no colon <code>:</code> in
                    the appearance value.)
                </p>
                <p>
                    The only missing control now is the input field bound to the <code>&lt;link></code> element. Add
                    this, and you should have something like this in your controls:
                </p>
                <xml-source show-namespaces="false">
                    <xforms:group ref="book" xmlns:xforms="http://www.w3.org/2002/xforms">
                        <xforms:input ref="title">
                            <xforms:label class="fixed-width">Title</xforms:label>
                        </xforms:input>
                        <br/>
                        <xforms:input ref="author">
                            <xforms:label class="fixed-width">Author</xforms:label>
                        </xforms:input>
                        <br/>
                        <xforms:select1 ref="language">
                            <xforms:label class="fixed-width">Language</xforms:label>
                            <xforms:itemset nodeset="instance('languages-instance')/language">
                                <xforms:label ref="name"/>
                                <xforms:value ref="value"/>
                            </xforms:itemset>
                        </xforms:select1>
                        <br/>
                        <xforms:input ref="link">
                            <xforms:label class="fixed-width">Link</xforms:label>
                        </xforms:input>
                        <br/>
                        <xforms:select1 ref="rating" appearance="full">
                            <xforms:label class="fixed-width">Rating</xforms:label>
                            <xforms:itemset nodeset="instance('ratings-instance')/rating">
                                <xforms:label ref="name"/>
                                <xforms:value ref="value"/>
                            </xforms:itemset>
                        </xforms:select1>
                        <br/>
                        <xforms:textarea ref="notes" appearance="xxforms:autosize">
                            <xforms:label class="fixed-width">Notes</xforms:label>
                        </xforms:textarea>
                    </xforms:group>
                </xml-source>
                <p>
                    By now you probably have the gist of it!
                </p>
            </section>
            <section>
                <title>Adding a Save Button</title>
                <p>
                    The Bookcast application now allows you to capture some data. But it is not a very useful
                    application yet, because it doesn't do anything with it! So let's see how you can add a "Save"
                    button that, once pressed, well, saves the data in your form.
                </p>
                <p>
                    Many applications use relational databases as a persistence layer. But because Orbeon Forms and
                    XForms use XML as their native data format, it is very appropriate to use a database that
                    understands XML instead. Orbeon Forms comes with the eXist database that does just that.
                </p>
                <p>
                    So how do you save data from XForms to a database? An important feature of XForms are submissions.
                </p>
                <p>
                    xxx
                </p>
            </section>
            <!--<section>-->
                <!--<title></title>-->
                <!--<p>-->
                    <!--xxx-->
                <!--</p>-->
            <!--</section>-->
            <!--<section>-->
                <!--<title></title>-->
                <!--<p>-->
                    <!--xxx-->
                <!--</p>-->
            <!--</section>-->
            <!--<section>-->
                <!--<title>xxx</title>-->
                <!--<p>-->
                    <!--xxx-->

                    <!--* a note about how OF works: look at source code in browser-->
                    <!--* show example of OF error-->
                    <!--* note about how this relates to HTML forms-->
                <!--</p>-->
                <!--<ul>-->
                    <!--<li>-->
                        <!--<p>-->

                        <!--</p>-->
                    <!--</li>-->
                    <!--<li>-->
                        <!--<p>-->

                        <!--</p>-->
                    <!--</li>-->
                    <!--<li>-->
                        <!--<p>-->

                        <!--</p>-->
                    <!--</li>-->
                    <!--<li>-->
                        <!--<p>-->

                        <!--</p>-->
                    <!--</li>-->
                <!--</ul>-->
            <!--</section>-->
        </section>
    </body>
</document>