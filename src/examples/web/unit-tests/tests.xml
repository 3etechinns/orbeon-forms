<!--
    Copyright (C) 2004 Orbeon, Inc.
  
    This program is free software; you can redistribute it and/or modify it under the terms of the
    GNU Lesser General Public License as published by the Free Software Foundation; either version
    2.1 of the License, or (at your option) any later version.
  
    This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
    without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU Lesser General Public License for more details.
  
    The full text of the license is available at http://www.gnu.org/copyleft/lesser.html
-->
<tests xmlns:p="http://www.orbeon.com/oxf/pipeline"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xforms="http://www.w3.org/2002/xforms"
    xmlns:xxforms="http://orbeon.org/oxf/xml/xforms"
    xmlns:xalan="http://xml.apache.org/xalan"
    xmlns:delegation="http://orbeon.org/oxf/xml/delegation"
    xmlns:d="http://orbeon.org/oxf/xml/document"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:xu="http://www.xmldb.org/xupdate"
    xmlns:oxf="http://www.orbeon.com/oxf/processors">

    <test description="saxon-parse" name="oxf:xslt">
        <input name="config">
            <xsl:stylesheet xmlns:saxon="http://saxon.sf.net/" version="2.0">
                <xsl:template match="/">
                    <xsl:copy-of select="saxon:parse(/document/xml-string)"/>
                </xsl:template>
            </xsl:stylesheet>
        </input>
        <input name="data">
            <document>
                <xml-string>
                    &lt;name&gt;
                        &lt;first&gt;John&lt;/first&gt;
                        &lt;last&gt;Smith&lt;/last&gt;
                    &lt;/name&gt;
                </xml-string>
            </document>
        </input>
        <output name="data">
            <name>
                <first>John</first>
                <last>Smith</last>
            </name>
        </output>
    </test>

    <!-- This test is a good start, but could probably be improved -->
    <!-- TODO: Portlet URL rewriting testing; need a way to specify to the test what pseudo-External Context to use -->
    <test description="oxf-rewrite" name="oxf:xslt">
        <input name="config" href="oxf:/oxf/pfc/oxf-rewrite.xsl"/>
        <input name="data" href="oxf:/unit-tests/oxf-rewrite/input-data.xml"/>
        <input name="container-type">
            <request>
                <container-type>servlet</container-type>
            </request>
        </input>
        <output name="data" href="oxf:/unit-tests/oxf-rewrite/output-data.xml"/>
    </test>

    <!-- This test should probably be hand-customized to be clearer -->
    <test description="xforms-portlet-forms" name="oxf:xslt">
        <input name="config" href="oxf:/config/xforms-portlet-forms.xsl"/>
        <input name="data" href="oxf:/unit-tests/xforms-portlet-forms/input-data.xml"/>
        <input name="annotated-data" href="oxf:/unit-tests/xforms-portlet-forms/input-annotated-data.xml"/>
        <output name="data" href="oxf:/unit-tests/xforms-portlet-forms/output-data.xml"/>
    </test>

    <!-- This test should probably be hand-customized to be clearer -->
    <test description="xforms-to-xhtml" name="oxf:xslt">
        <input name="config" href="oxf:/config/xforms-to-xhtml.xsl"/>
        <input name="data" href="oxf:/unit-tests/xforms-to-xhtml/input-data.xml"/>
        <input name="model" href="oxf:/unit-tests/xforms-to-xhtml/input-model.xml"/>
        <output name="data" href="oxf:/unit-tests/xforms-to-xhtml/output-data.xml"/>
    </test>

    <test description="Identity" name="oxf:identity">
        <input name="data">
            <root>
                <a/>
                <b/>
            </root>
        </input>
        <output name="data">
            <root>
                <a/>
                <b/>
            </root>
        </output>
    </test>

    <test description="Trivial aggregation" name="oxf:aggregator">
        <input name="config">
            <config>
                <root>gaga</root>
            </config>
        </input>
        <input name="data">
            <a>foo</a>
        </input>
        <input name="data">
            <b>bar</b>
        </input>
        <output name="data">
            <gaga>
                <a>foo</a>
                <b>bar</b>
            </gaga>
        </output>
    </test>

    <test description="Simple transformation" name="oxf:xslt">
        <input name="data">
            <root>
                <a>a</a>
                <b>b</b>
            </root>
        </input>
        <input name="config">
            <xsl:stylesheet version="1.0">
                <xsl:template match="/">
                    <new-root>
                        <xsl:value-of select="/root/a"/>
                        <xsl:value-of select="/root/b"/>
                    </new-root>
                </xsl:template>
            </xsl:stylesheet>
        </input>
        <output name="data">
            <new-root>ab</new-root>
        </output>
    </test>

    <test description="oxf: protocol in a pipeline input" name="oxf:pipeline">
        <input name="config">
            <p:config>
                <p:param type="output" name="data"/>
                <p:processor id="identity" name="oxf:identity">
                    <p:input name="data" href="oxf:/unit-tests/company.xml"/>
                    <p:output name="data" ref="data"/>
                </p:processor>
            </p:config>
        </input>
        <output name="data">
            <company>
                <name>Orbeon</name>
                <employee>
                    <firstname>Omar</firstname>
                    <lastname>Tazi</lastname>
                </employee>
            </company>
        </output>
    </test>

    <test description="Aggregator with no processor" name="oxf:pipeline">
        <input name="first">
            <dupont/>
        </input>
        <input name="second">
            <dupond/>
        </input>
        <input name="config">
            <p:config>
                <p:param type="input" name="first"/>
                <p:param type="input" name="second"/>
                <p:param type="output" name="data"/>
                <p:processor name="oxf:identity">
                    <p:input name="data" href="aggregate('root', #first, #second)"/>
                    <p:output name="data" ref="data"/>
                </p:processor>
            </p:config>
        </input>
        <output name="data">
            <root>
                <dupont/>
                <dupond/>
            </root>
        </output>
    </test>

    <test description="Empty output, loop simulation, multiple pipelines with same config but different data" name="oxf:pipeline">
        <input name="numbers">
            <numbers>
                <number>42</number>
                <number>83</number>
                <number>79</number>
                <number>15</number>
                <number>12</number>
            </numbers>
        </input>
        <input name="config">
            <p:config>
                <p:param type="input" name="numbers"/>
                <p:param type="output" name="data"/>

                <p:processor name="oxf:xslt" id="call-generation">
                    <p:input name="data" href="#numbers"/>
                    <p:input name="config">
                        <xsl:stylesheet version="1.0">
                            <xsl:template match="/">
                                <p:config>
                                    <p:param type="output" name="data"/>
                                    <xsl:for-each select="/numbers/number">
                                        <p:processor name="oxf:pipeline" id="one-call-{position()}">
                                            <p:input name="config" href="oxf:/unit-tests/odd-even.xpl"/>
                                            <p:input name="number">
                                                <xsl:copy-of select="."/>
                                            </p:input>
                                            <p:output name="data" id="one-call-{position()}"/>
                                        </p:processor>
                                    </xsl:for-each>
                                    <p:processor name="oxf:aggregator" id="final-aggregation">
                                        <xsl:for-each select="/numbers/number">
                                            <p:input name="data" href="#one-call-{position()}"/>
                                        </xsl:for-each>
                                        <p:input name="config">
                                            <config>
                                                <root>root</root>
                                            </config>
                                        </p:input>
                                        <p:output name="data" ref="data"/>
                                    </p:processor>
                                </p:config>
                            </xsl:template>
                        </xsl:stylesheet>
                    </p:input>
                    <p:output name="data" id="calls-to-odd-even"/>
                </p:processor>

                <p:processor name="oxf:pipeline" id="call-sequence">
                    <p:input name="config" href="#calls-to-odd-even"/>
                    <p:output name="data" ref="data"/>
                </p:processor>
            </p:config>
        </input>
        <output name="data">
            <root>
                <root>even</root>
                <root>odd</root>
                <root>odd</root>
                <root>odd</root>
                <root>even</root>
            </root>
        </output>
    </test>

    <test description="Namespace preservation" name="oxf:pipeline">
        <input name="config">
            <p:config>
                <p:param type="output" name="data"/>
                <p:processor name="oxf:xslt">
                    <p:input name="data">
                        <root/>
                    </p:input>
                    <p:input name="config">
                        <xsl:stylesheet version="1.0">
                            <xsl:template match="/">
                                <p:config>
                                    <p:param type="output" name="data"/>
                                    <p:processor name="oxf:identity">
                                        <p:input name="data">
                                            <root>Hello, world!</root>
                                        </p:input>
                                        <p:output name="data" ref="data"/>
                                    </p:processor>
                                </p:config>
                            </xsl:template>
                        </xsl:stylesheet>
                    </p:input>
                    <p:output name="data" id="hello-generator"/>
                </p:processor>
                <p:processor name="oxf:pipeline" id="hello-executor">
                    <p:input name="config" href="#hello-generator"/>
                    <p:output name="data" ref="data"/>
                </p:processor>
            </p:config>
        </input>
        <output name="data">
            <root>Hello, world!</root>
        </output>
    </test>

    <test description="Making sure the that .// works correctly" name="oxf:xslt">
        <input name="data">
            <root>
                <x>
                    <a>a</a>
                </x>
                <y>
                    <a>b</a>
                </y>
            </root>
        </input>
        <input name="config">
            <xsl:stylesheet version="1.0">
                <xsl:template match="/">
                    <new-root>
                        <xsl:for-each select="root/y">
                            <xsl:copy-of select=".//a"/>
                        </xsl:for-each>
                    </new-root>
                </xsl:template>
            </xsl:stylesheet>
        </input>
        <output name="data">
            <new-root>
                <a>b</a>
            </new-root>
        </output>
    </test>

    <test description="Choose: simple test with all possible cases" name="oxf:pipeline">
        <input name="data">
            <letters>
                <letter>a</letter>
                <letter>b</letter>
                <letter>c</letter>
            </letters>
        </input>
        <input name="config">
            <p:config>
                <p:param type="input" name="data"/>
                <p:param type="output" name="data"/>

                <p:processor name="oxf:xslt">
                    <p:input name="data" href="#data"/>
                    <p:input name="config">
                        <xsl:stylesheet version="1.0">
                            <xsl:template match="/">
                                <p:config>
                                    <p:param type="output" name="messages"/>
                                    <xsl:for-each select="letters/letter">
                                        <p:processor name="oxf:identity">
                                            <p:input name="data">
                                                <xsl:copy-of select="."/>
                                            </p:input>
                                            <p:output name="data" id="letter{position()}"/>
                                        </p:processor>
                                        <p:choose href="#letter{position()}">
                                            <p:when test="/letter = 'a'">
                                                <p:processor name="oxf:identity">
                                                    <p:input name="data">
                                                        <message>First letter</message>
                                                    </p:input>
                                                    <p:output name="data" id="message{position()}"/>
                                                </p:processor>
                                            </p:when>
                                            <p:when test="/letter = 'b'">
                                                <p:processor name="oxf:identity">
                                                    <p:input name="data">
                                                        <message>Second letter</message>
                                                    </p:input>
                                                    <p:output name="data" id="message{position()}"/>
                                                </p:processor>
                                            </p:when>
                                            <p:otherwise>
                                                <p:processor name="oxf:identity">
                                                    <p:input name="data">
                                                        <message>Unknown letter</message>
                                                    </p:input>
                                                    <p:output name="data" id="message{position()}"/>
                                                </p:processor>
                                            </p:otherwise>
                                        </p:choose>
                                    </xsl:for-each>
                                    <p:processor name="oxf:aggregator">
                                        <p:input name="config">
                                            <config>
                                                <root>messages</root>
                                            </config>
                                        </p:input>
                                        <xsl:for-each select="letters/letter">
                                            <p:input name="data" href="#message{position()}"/>
                                        </xsl:for-each>
                                        <p:output name="messages" ref="messages"/>
                                    </p:processor>
                                </p:config>
                            </xsl:template>
                        </xsl:stylesheet>
                    </p:input>
                    <p:output name="data" id="message-generator"/>
                </p:processor>
                <p:processor name="oxf:pipeline" id="pipelinegen">
                    <p:input name="config" href="#message-generator"/>
                    <p:output name="messages" ref="data"/>
                </p:processor>
            </p:config>
        </input>
        <output name="data">
            <messages>
                <message>First letter</message>
                <message>Second letter</message>
                <message>Unknown letter</message>
            </messages>
        </output>
    </test>

    <test description="Choose: direct reference to param in branch" name="oxf:pipeline">
        <input name="in">
            <letter>a</letter>
        </input>
        <input name="config">
            <p:config>
                <p:param type="input" name="in"/>
                <p:param type="output" name="out"/>
                <p:choose href="#in">
                    <p:when test="letter = 'a'">
                        <p:processor name="oxf:identity">
                            <p:input name="data">
                                <message>First letter</message>
                            </p:input>
                            <p:output name="data" ref="out"/>
                        </p:processor>
                    </p:when>
                </p:choose>
            </p:config>
        </input>
        <output name="out">
            <message>First letter</message>
        </output>
    </test>

    <test description="Choose: choose inside choose" name="oxf:pipeline">
        <input name="a">
            <letter>a</letter>
        </input>
        <input name="config">
            <p:config>
                <p:param type="input" name="a"/>
                <p:param type="output" name="data"/>
                <p:choose href="#a">
                    <p:when test="letter = 'a'">
                        <p:processor name="oxf:identity">
                            <p:input name="data">
                                <letter>b</letter>
                            </p:input>
                            <p:output name="data" id="b"/>
                        </p:processor>
                        <p:choose href="#b">
                            <p:when test="letter = 'b'">
                                <p:processor name="oxf:identity">
                                    <p:input name="data">
                                        <message>First letter</message>
                                    </p:input>
                                    <p:output name="data" ref="data"/>
                                </p:processor>
                            </p:when>
                        </p:choose>
                    </p:when>
                </p:choose>
            </p:config>
        </input>
        <output name="data">
            <message>First letter</message>
        </output>
    </test>

    <test description="Simple Validation, from RELAX NG tutorial" name="oxf:validation">
        <input name="schema">
            <element name="addressBook" xmlns="http://relaxng.org/ns/structure/1.0">
                <zeroOrMore>
                    <element name="card">
                        <element name="name">
                            <attribute name="q">
                                <text/>
                            </attribute>
                            <text/>
                        </element>
                        <element name="email">
                            <text/>
                        </element>
                    </element>
                </zeroOrMore>
            </element>
        </input>
        <input name="config">
            <config>
                <decorate>false</decorate>
            </config>
        </input>
        <input name="data">
            <addressBook>
                <card>
                    <name q="a">John Smith</name>
                    <email>js@example.com</email>
                </card>
                <card>
                    <name q="b">Fred Bloggs</name>
                    <email>fb@example.net</email>
                </card>
            </addressBook>
        </input>
        <output name="data">
            <addressBook>
                <card>
                    <name q="a">John Smith</name>
                    <email>js@example.com</email>
                </card>
                <card>
                    <name q="b">Fred Bloggs</name>
                    <email>fb@example.net</email>
                </card>
            </addressBook>
        </output>
    </test>

    <test description="Input and Output validation" name="oxf:pipeline">
        <input name="config">
            <p:config>
                <p:param type="output" name="data"/>
                <p:processor name="oxf:identity">
                    <p:input name="data" schema-href="oxf:/unit-tests/address-book-schema.xml">
                        <addressBook>
                            <card>
                                <name q="a">John Smith</name>
                                <email>js@example.com</email>
                            </card>
                            <card>
                                <name q="b">Fred Bloggs</name>
                                <email>fb@example.net</email>
                            </card>
                        </addressBook>
                    </p:input>
                    <p:output name="data" ref="data" schema-uri="urn://adress-book"/>
                </p:processor>
            </p:config>
        </input>
        <output name="data">
            <addressBook>
                <card>
                    <name q="a">John Smith</name>
                    <email>js@example.com</email>
                </card>
                <card>
                    <name q="b">Fred Bloggs</name>
                    <email>fb@example.net</email>
                </card>
            </addressBook>
        </output>
    </test>

    <test description="W3C validation" name="oxf:pipeline">
        <input name="config">
            <p:config>
                <p:param type="output" name="result"/>
                <p:processor name="oxf:validation">
                    <p:input name="config">
                        <config>
                            <decorate>false</decorate>
                        </config>
                    </p:input>
                    <p:input name="schema">
                        <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
                            <xs:element name="book">
                                <xs:complexType>
                                    <xs:sequence>
                                        <xs:element name="title" type="xs:string"/>
                                        <xs:element name="author" type="xs:string"/>
                                        <xs:element name="character" minOccurs="0" maxOccurs="unbounded">
                                            <xs:complexType>
                                                <xs:sequence>
                                                    <xs:element name="name" type="xs:string"/>
                                                    <xs:element name="friend-of" type="xs:string" minOccurs="0"
                                                        maxOccurs="unbounded"/>
                                                    <xs:element name="since" type="xs:date"/>
                                                    <xs:element name="qualification" type="xs:string"/>
                                                </xs:sequence>
                                            </xs:complexType>
                                        </xs:element>
                                    </xs:sequence>
                                    <xs:attribute name="isbn" type="xs:string"/>
                                </xs:complexType>
                            </xs:element>
                        </xs:schema>
                    </p:input>

                    <p:input name="data">
                        <book isbn="0836217462">
                            <title>
                                Being a Dog Is a Full-Time Job
                            </title>
                            <author>Charles M. Schulz</author>
                            <character>
                                <name>Snoopy</name>
                                <friend-of>Peppermint Patty</friend-of>
                                <since>1950-10-04</since>
                                <qualification>
                                    extroverted beagle
                                </qualification>
                            </character>
                            <!--              <character>-->
                            <!--                <name>Peppermint Patty</name>-->
                            <!--                <since>1966-08-22</since>-->
                            <!--                <qualification>bold, brash and tomboyish</qualification>-->
                            <!--              </character>-->
                        </book>
                    </p:input>

                    <p:output name="instance" ref="result"/>
                </p:processor>

            </p:config>
        </input>

        <output name="result" ref="result">
            <book isbn="0836217462">
                <title>
                    Being a Dog Is a Full-Time Job
                </title>
                <author>Charles M. Schulz</author>
                <character>
                    <name>Snoopy</name>
                    <friend-of>Peppermint Patty</friend-of>
                    <since>1950-10-04</since>
                    <qualification>
                        extroverted beagle
                    </qualification>
                </character>
                <!--        <character>-->
                <!--          <name>Peppermint Patty</name>-->
                <!--          <since>1966-08-22</since>-->
                <!--          <qualification>bold, brash and tomboyish</qualification>-->
                <!--        </character>-->
            </book>
        </output>
    </test>

    <test description="xalan:nodeset" name="oxf:xslt-1.0">
        <input name="data">
            <gaga/>
        </input>
        <input name="config">
            <xsl:stylesheet version="1.0" exclude-result-prefixes="xalan" xmlns:xalan="http://xml.apache.org/xalan">
                <xsl:template match="/">
                    <xsl:variable name="gaga">
                        <xsl:call-template name="gaga"/>
                    </xsl:variable>
                    <xsl:copy-of select="xalan:nodeset($gaga)/root/gaga"/>
                </xsl:template>
                <xsl:template name="gaga">
                    <root>
                        <gaga/>
                    </root>
                </xsl:template>
            </xsl:stylesheet>
        </input>
        <output name="data">
            <gaga/>
        </output>
    </test>

    <test description="URL Generator (oxf: protocol): XML document" name="oxf:url-generator">
        <input name="config">
            <config>
               <url>oxf:/unit-tests/company.xml</url>
            </config>
        </input>
        <output name="data">
            <company>
                <name>Orbeon</name>
                <employee>
                    <firstname>Omar</firstname>
                    <lastname>Tazi</lastname>
                </employee>
            </company>
        </output>
    </test>

    <test description="URL Generator (oxf: protocol): XML document converted to text" name="oxf:url-generator">
        <input name="config">
            <config>
                <url>oxf:/unit-tests/company.xml</url>
                <content-type>text/plain</content-type>
             </config>
        </input>
        <output name="data">
            <document xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string" content-type="text/plain">&lt;!-- Copyright (C) 2004 Orbeon, Inc. This program is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details. The full text of the license is available at http://www.gnu.org/copyleft/lesser.html --&gt; &lt;company&gt; &lt;name&gt;Orbeon&lt;/name&gt; &lt;employee&gt; &lt;firstname&gt;Omar&lt;/firstname&gt; &lt;lastname&gt;Tazi&lt;/lastname&gt; &lt;/employee&gt; &lt;/company&gt;</document>
        </output>
    </test>

    <test description="URL Generator (oxf: protocol): binary document" name="oxf:url-generator">
        <input name="config">
            <config>
                <url>oxf:/unit-tests/url-generator/ois-powered-80.png</url>
                <content-type>image/png</content-type>
             </config>
        </input>
        <output name="data">
            <document xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:base64Binary" content-type="image/png">
                iVBORw0KGgoAAAANSUhEUgAAAFAAAAAWCAIAAADYcoyLAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAA
                CXRFWHRDb21tZW50AACJKo0GAAAGw0lEQVR4nNWY2VOaVxTA/Q/aTpeHdpqHTp/61OWhD52+9Kkz
                bZZJddLaJrVJazKTqInGqDHGLTGaTdxQVEQExBUBEcEFEEVFXIiIgigIGEBZggb4+OD7aA8hQ0xM
                s5uYM5eZ+931/O45995zifn37ZRQKBQIBDc8PpvDbbQ4tCvW2UWzXLUsUSzwh2919CloPFl951B1
                m6iiuZ9A77vWyC9p6JFOaWPetOZhAe2DQcx917e65tIYrJNqA+jNG1K2COQUtrSC2X+Vws+tYmWU
                tiYX0xMLKEeya+PSKvcnl/18qvS5Ep03uuPAAIP4A2AHIJlQLfeNzsHyk1lDN5sEedVdadeZxwso
                v2VU70smPK/2L5BahfJXAAxIXp/fZHUqtSbRxDzwkDrEV8g8MMjxgsZD6cS9Sc8Esz+ZEJtW+Xtm
                zV859ScKqSkljHM3W3MqWZfruNepvZXMgbpOCYU9TOONgt5dg1M9UmXf2JxEoZEpdYo5/YzGqNKt
                zulWF402ndFmtDrMNpfNsRFJTrfnzqYXQQPPAQxgrg0PbJVBubpVIK9qGcyvYSddoYN99m7THiAB
                9ehFMjhhJqH9Ui23lCas7ZAwekZZg5NCmWp4WjulNizoLYbbdrD/pgeUCcIUL2+AJ8uTgGF6q909
                KJ+vbhVllLbFZ9ZEeQ6klCVcqEu9xiwkcYEcMLqHlMAAywFHCKxlEMN2WvUXk8cA4ziu0pnBfxLz
                KWFPSyk7ebkJjjhGz9jQpEZjsNjvbAaCu5TnqfIQMLhWE1eWkFN/8EwFbJ6OfoV6aRWOnDel3E7I
                fWCPzw9XFhgTXBeuBDiEXpsGsHEwHN+6e+EL0g5NFwZed22eKGyMz6iRzSxGJ15cscDWhdTIGdaZ
                1ndoehCPxwsO1S9fiJYUkdgXq9nP0hff0AdGs1BBfGCiKORzhEsQe2D4LLYU7o5ZR9GBY+hgImYS
                R7vEQLySdIX2RxYJDputYw1NqGEDnyyi/ZpOjE2rcm36XgnedgFgmEg4Nh8tKSCyzleyntoRd6gQ
                yh6E/Imf9QNS+wHC+BL32vFNPUJ6NzCcEUKcCPljf9t3KD8uMFEc7RXDEU/DfLe0pkeGiwCrli3C
                ESVkFPNG1aKxkMTJr+FMa0xmqwPuxuVVu8G8RmYPg190COXU7lGPF6ltF2WVtVO7ZXCwzWqN16kC
                8cR8CaU3EAwyeDKoIraJ7vr80IUjmjxf3t7SO74dOO1GK4EmyCV2qZctfOlMKb0PRoNMefMA+H+k
                mb83Dqn7CHdqII+t8MKcY/lRYNw5i5DeQQcScbc+hAcfAEPIBlfl9gswAnz6ajNEAvuSy2BFDp4u
                z6li5RFZB06XGyyOhGwSqVPa0CmGKxeijtjU8hah4iq5G3Sdnl85nFnNFEz0jdyCQZJLGAz+eBNH
                eiyPotQYT11qLGX0z+tMUFUI93NT73bguLNVtG5ZYl7DkQv102o9NJBMauPPEUsZA9FmCOMLpO37
                SD6EY0jdh2hP3AML4xgqSkRq30dI76HilChgzI3G3uzyju0OEwE+X9F5s0k4rtJHPk1rd9YdLsgI
                RtVM3khCDvlYTl3q1eZMQhusgnPDeziTCHEIhLuQCIz+CLDe4oQB068xACNSlV3J6pGEPcvu9uI4
                diD5UeArDXzIcAcV0Ma56UstoR0+T4L80qo92szP/REhf4r7woPj9hngRIfSosDhQq8t5LOjvYeA
                OYR67gPDkv+SWgGB+/+5dOTTbLHvSyIUN/CvN/aASZfMdofLDcHg0VzK+IwWWhZTeqFZdllrDpG9
                anN19itur7sjwEAFVRV0wckiutnm5Iqndaa1afUyVFW1imjc4e0Wjs8iCUZmz5TQD2XUBDB8ZGoB
                2qSXtm91RMw8EDYg8xtUcgqhfo407MFduigwZpEijZ8F5AX+tm+Rpi/A4PeB4VfPGiom8x65CWa1
                K+DthnvGicjIlCalmJ5UTBcrNJESKlvKkSj9fjS/umvBYIOSNYf7Eonzd15DLpFtdWxMzelhELcH
                gaq7Hh947z95DRmE9kXTGoQ35E4xxDZU7gi0mZw3RididMtIHZK8KhYcmWOzy1Ayc291pNO6R6yC
                rYr9vP1+5leo8DDuUN+zqhXlxwbnyCGvDRWf8DO/9nN+wqwT0S5hYEBt5o/Bo3F3xhiw/S6Ut/15
                oT6I4S8/2oNIS710Gw5e8PDXEME/l2xseiCwHdhyUb+MPBRaAio8vtmiKXhtBd/aaPnJ8vjXEjx3
                gHxmwag1WOFVuWufPi8gT38Pw8aGRyIkWAWIsf1oIHr1v42yK/7Tep3yH8VWMTNKGTo+AAAAAElF
                TkSuQmCC
            </document>
        </output>
    </test>

    <test description="URL Generator" name="oxf:url-generator">
        <input name="config">
            <config>
                <url>http://www.scdi.org/~avernet/try/orbeon.xml</url>
            </config>
        </input>
        <output name="data">
            <orbeon>
                <test1/>
                <test2>
                    <test3/>
                </test2>
            </orbeon>
        </output>
    </test>

    <test description="Delegation Processor" name="oxf:delegation">
        <input name="interface">
            <config>
                <service id="ca-traffic" type="webservice"
                    endpoint="http://services.xmethods.net:80/soap/servlet/rpcrouter">
                    <operation nsuri="urn:xmethods-CATraffic" name="getTraffic"/>
                </service>
                <service id="deep-thought-ws" type="webservice"
                    endpoint="http://www.scdi.org/~avernet/webservice/">
                    <operation nsuri="urn:avernet" name="answerUltimateQuestionOfLife"/>
                    <operation nsuri="urn:avernet" name="getRandomQuote"/>
                </service>
                <service id="gaga" type="stateless-ejb" uri="...">
                    <operation name="methodCall"/>
                </service>
                <service id="deep-thought-jb" type="javabean"
                    class="org.orbeon.oxf.test.DeepThought"/>
            </config>
        </input>
        <input name="data">
            <dummy/>
        </input>
        <input name="call">
            <answers>
                <ultimate-answer-1>
                    <delegation:execute service="deep-thought-ws" operation="answerUltimateQuestionOfLife"/>
                </ultimate-answer-1>
                <ultimate-answer-2>
                    <delegation:execute service="deep-thought-jb" operation="congratulate">
                        <name xsi:type="xs:string">John</name>
                    </delegation:execute>
                </ultimate-answer-2>
            </answers>
        </input>
        <output name="data">
            <answers xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                <ultimate-answer-1>
                    <text xsi:type="xsd:string">42</text>
                </ultimate-answer-1>
                <ultimate-answer-2>Congratulations John!</ultimate-answer-2>
            </answers>
        </output>
    </test>

    <test description="Serial pipelines with same config" name="oxf:pipeline">
        <input name="config">
            <p:config>
                <p:param type="output" name="data"/>
                <p:processor name="oxf:identity">
                    <p:input name="data">
                        <p:config>
                            <p:param type="input" name="data"/>
                            <p:param type="output" name="data"/>
                            <p:processor name="oxf:xslt">
                                <p:input name="data" href="#data"/>
                                <p:input name="config">
                                    <xsl:stylesheet version="1.0">
                                        <xsl:template match="/">
                                            <gaga>
                                                <xsl:copy-of select="/"/>
                                            </gaga>
                                        </xsl:template>
                                    </xsl:stylesheet>
                                </p:input>
                                <p:output name="data" ref="data"/>
                            </p:processor>
                        </p:config>
                    </p:input>
                    <p:output name="data" id="pipeline-config"/>
                </p:processor>
                <p:processor name="oxf:pipeline" id="first">
                    <p:input name="config" href="#pipeline-config"/>
                    <p:input name="data">
                        <x/>
                    </p:input>
                    <p:output name="data" id="first-output"/>
                </p:processor>
                <p:processor name="oxf:pipeline" id="second">
                    <p:input name="config" href="#pipeline-config"/>
                    <p:input name="data" href="#first-output"/>
                    <p:output name="data" ref="data"/>
                </p:processor>
            </p:config>
        </input>
        <output name="data">
            <gaga>
                <gaga>
                    <x/>
                </gaga>
            </gaga>
        </output>
    </test>

    <test description="Embedded pipelines with same config" name="oxf:pipeline">
        <input name="config">
            <p:config id="top">
                <p:param type="output" name="data"/>
                <p:processor name="oxf:pipeline" id="first-call">
                    <p:input name="config" href="oxf:/unit-tests/recurse.xml"/>
                    <p:input name="data">
                        <count>1</count>
                    </p:input>
                    <p:output name="data" ref="data"/>
                </p:processor>
            </p:config>
        </input>
        <output name="data">
            <count>0</count>
        </output>
    </test>

    <!--    <test description="Java Processor" name="oxf:java">-->
    <!--        <input name="config">-->
    <!--            <config processor="DeepThoughtProcessor.java"/>-->
    <!--        </input>-->
    <!--        <input name="number">-->
    <!--            <number>21</number>-->
    <!--        </input>-->
    <!--        <output name="double">-->
    <!--            <number>42</number>-->
    <!--        </output>-->
    <!--    </test>-->

    <test description="Use of namespace in p:when" name="oxf:pipeline">
        <input name="config">
            <p:config>
                <p:param type="output" name="data"/>
                <p:processor name="oxf:identity">
                    <p:input name="data">
                        <root>
                            <x>41</x>
                            <gaga:x xmlns:gaga="http://www.orbeon.com/gaga">42</gaga:x>
                        </root>
                    </p:input>
                    <p:output name="data" id="document"/>
                </p:processor>
                <p:choose href="#document" xmlns:toto="http://www.orbeon.com/gaga">
                    <p:when test="/root/toto:x = 42">
                        <p:processor name="oxf:identity">
                            <p:input name="data">
                                <success/>
                            </p:input>
                            <p:output name="data" ref="data"/>
                        </p:processor>
                    </p:when>
                </p:choose>
            </p:config>
        </input>
        <output name="data">
            <success/>
        </output>
    </test>

    <test description="Use of namespace in p:when with attribute" name="oxf:pipeline">
        <input name="config">
            <p:config>
                <p:param type="output" name="data"/>
                <p:processor name="oxf:identity">
                    <p:input name="data">
                        <root>
                            <x y="41"/>
                            <x xmlns:gaga="http://www.orbeon.com/gaga" gaga:y="42"/>
                        </root>
                    </p:input>
                    <p:output name="data" id="document"/>
                </p:processor>
                <p:choose href="#document" xmlns:toto="http://www.orbeon.com/gaga">
                    <p:when test="//@toto:y = 42">
                        <p:processor name="oxf:identity">
                            <p:input name="data">
                                <success/>
                            </p:input>
                            <p:output name="data" ref="data"/>
                        </p:processor>
                    </p:when>
                    <p:otherwise>
                        <p:processor name="oxf:identity">
                            <p:input name="data">
                                <failure/>
                            </p:input>
                            <p:output name="data" ref="data"/>
                        </p:processor>
                    </p:otherwise>
                </p:choose>
            </p:config>
        </input>
        <output name="data">
            <success/>
        </output>
    </test>

    <!--    <disable reason="STX doesn't support multi treading">-->
    <test description="STX Transformation on a request-like document" name="oxf:pipeline">
        <input name="config">
            <p:config xmlns:p="http://www.orbeon.com/oxf/pipeline"
                xmlns:d="http://orbeon.org/oxf/xml/document">
                <p:processor name="oxf:identity">
                    <p:input name="data">
                        <request>
                            <path-info>/this/is/a/path/info</path-info>
                        </request>
                    </p:input>
                    <p:output name="data" id="request"/>
                </p:processor>
                <p:processor name="oxf:stx">
                    <p:input name="data" href="#request"/>
                    <p:input name="config">
                        <stx:transform version="1.0" xmlns:stx="http://stx.sourceforge.net/2002/ns">
                            <stx:template match="/">
                                <d:document>
                                    <d:body>
                                        <stx:process-children/>
                                    </d:body>
                                </d:document>
                            </stx:template>
                            <stx:template match="request/path-info/text()">
                                <stx:copy/>
                            </stx:template>
                        </stx:transform>
                    </p:input>
                    <p:output name="data" id="result"/>
                </p:processor>
                <p:processor name="oxf:null-serializer">
                    <p:input name="data" href="#result"/>
                </p:processor>
            </p:config>
        </input>
    </test>
    <!--  </disable>-->

    <test description="XSLT Transformation on a request-like document" name="oxf:pipeline">
        <input name="config">
            <p:config xmlns:p="http://www.orbeon.com/oxf/pipeline"
                xmlns:d="http://orbeon.org/oxf/xml/document">
                <p:processor name="oxf:identity">
                    <p:input name="data">
                        <request>
                            <path-info>/this/is/a/path/info</path-info>
                        </request>
                    </p:input>
                    <p:output name="data" id="request"/>
                </p:processor>
                <p:processor name="oxf:xslt">
                    <p:input name="data" href="#request"/>
                    <p:input name="config">
                        <xsl:transform version="1.0">
                            <xsl:template match="/">
                                <d:document>
                                    <d:body>
                                        <xsl:value-of select="request/path-info"/>
                                    </d:body>
                                </d:document>
                            </xsl:template>
                        </xsl:transform>
                    </p:input>
                    <p:output name="data" id="result"/>
                </p:processor>
                <p:processor name="oxf:null-serializer">
                    <p:input name="data" href="#result"/>
                </p:processor>
            </p:config>
        </input>
    </test>

    <test description="Perl5 Matcher" name="oxf:perl5-matcher">
        <input name="data">
            <text>/a/bc/de.fgh</text>
        </input>
        <input name="config">
            <regexp>/./(.*)/([^\.]*)\.fgh</regexp>
        </input>
        <output name="data">
            <result>
                <matches>true</matches>
                <group>bc</group>
                <group>de</group>
            </result>
        </output>
    </test>

    <test description="Glob Matcher" name="oxf:glob-matcher">
        <input name="data">
            <text>/a/bc/de.fgh</text>
        </input>
        <input name="config">
            <regexp>/?/*/de.fgh</regexp>
        </input>
        <output name="data">
            <result>
                <matches>true</matches>
            </result>
        </output>
    </test>

    <test description="Implicit Tee" name="oxf:pipeline">
        <input name="data">
            <gaga/>
        </input>
        <input name="config">
            <p:config>
                <p:param type="input" name="data"/>
                <p:param type="output" name="data"/>
                <p:processor name="oxf:aggregator">
                    <p:input name="config">
                        <config>
                            <root>root</root>
                        </config>
                    </p:input>
                    <p:input name="data" href="#data"/>
                    <p:input name="data" href="#data"/>
                    <p:input name="data" href="#data"/>
                    <p:output name="data" ref="data"/>
                </p:processor>
            </p:config>
        </input>
        <output name="data">
            <root>
                <gaga/>
                <gaga/>
                <gaga/>
            </root>
        </output>
    </test>

    <test description="Embedded calls to aggregate()" name="oxf:pipeline">
        <input name="data-1">
            <dupont/>
        </input>
        <input name="data-2">
            <dupond/>
        </input>
        <input name="config">
            <p:config xmlns:p="http://www.orbeon.com/oxf/pipeline"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

                <p:param type="input" name="data-1"/>
                <p:param type="input" name="data-2"/>
                <p:param type="output" name="data"/>

                <p:processor name="oxf:identity">
                    <p:input name="data" href=
                        "aggregate('a', #data-1, aggregate('b', #data-2, #data-1), #data-2)"/>
                    <p:output name="data" ref="data"/>
                </p:processor>
            </p:config>
        </input>
        <output name="data">
            <a>
                <dupont/>
                <b>
                    <dupond/>
                    <dupont/>
                </b>
                <dupond/>
            </a>
        </output>
    </test>

    <test description="docBase in pipeline processor" name="oxf:pipeline">
        <input name="config">
            <p:config>
                <p:param type="output" name="data"/>

                <p:processor name="oxf:pipeline">
                    <p:input name="config" href="oxf:/unit-tests/docbase/pipeline.xml"/>
                    <p:output name="data" ref="data"/>
                </p:processor>

            </p:config>
        </input>
        <output name="data">
            <a>
                <b/>
            </a>
        </output>
    </test>

    <test description="docBase in XSLT processor" name="oxf:xslt">
        <input name="data">
            <a/>
        </input>
        <input name="config">
            <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
                <xsl:import href="oxf:/unit-tests/docbase/style.xsl"/>
            </xsl:stylesheet>
        </input>
        <output name="data">
            <a>
                <b/>
            </a>
        </output>
    </test>

    <test description="XPath Processor" name="oxf:xpath">
        <input name="config">
            <config>
                <xpath>/*[name() = 'a']/b[@c = 'a']/d</xpath>
            </config>
        </input>
        <input name="data">
            <a>
                <b c="a">
                    <d/>
                </b>
            </a>
        </input>
        <output name="data">
            <d/>
        </output>
    </test>

    <test description="XPointer" name="oxf:pipeline">
        <input name="data">
            <a>
                <b c="a">
                    <d/>
                </b>
            </a>
        </input>
        <input name="config">
            <p:config xmlns:p="http://www.orbeon.com/oxf/pipeline"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

                <p:param type="input" name="data"/>
                <p:param type="output" name="data"/>

                <p:processor name="oxf:identity">
                    <p:input name="data" href="#data#xpointer(/*[name() = 'a']/b[@c = 'a']/d)"/>
                    <p:output name="data" ref="data"/>
                </p:processor>
            </p:config>
        </input>
        <output name="data">
            <d/>
        </output>
    </test>

    <test description="Detection of id in p:choose with NullSerialisers (bug 861)" name="oxf:pipeline">
        <input name="config">
            <p:config>
                <p:processor name="oxf:identity">
                    <p:input name="data">
                        <gaga/>
                    </p:input>
                    <p:output name="data" id="data"/>
                </p:processor>
                <p:choose href="#data">
                    <p:when test="count(/gaga) = 1">
                        <p:processor name="oxf:null-serializer">
                            <p:input name="data" href="aggregate('gaga', aggregate('gaga', #data))"/>
                        </p:processor>
                    </p:when>
                </p:choose>
            </p:config>
        </input>
    </test>


    <test description="Namespace used in XPath-only (bug 874)" name="oxf:pipeline">
        <input name="data">
            <ns1:element xmlns:ns1="http://www.example.com/ns">gaga</ns1:element>
        </input>
        <input name="config">
            <p:config>
                <p:param type="input" name="data"/>
                <p:param type="output" name="data"/>
                <p:processor name="oxf:xslt">
                    <p:input name="data" href="#data"/>
                    <p:input name="config">
                        <xsl:stylesheet version="1.0">
                            <xsl:template match="/">
                                <result>
                                    <xsl:value-of select="/ns2:element" xmlns:ns2="http://www.example.com/ns"/>
                                </result>
                            </xsl:template>
                        </xsl:stylesheet>
                    </p:input>
                    <p:output name="data" ref="data"/>
                </p:processor>
            </p:config>
        </input>
        <output name="data">
            <result>gaga</result>
        </output>
    </test>

    <test description="Support for both red and id on outputs (bug 875)" name="oxf:pipeline">
        <input name="config">
            <p:config>
                <p:param type="output" name="first"/>
                <p:param type="output" name="second"/>
                <p:processor name="oxf:identity">
                    <p:input name="data">
                        <gaga/>
                    </p:input>
                    <p:output name="data" id="data" ref="first"/>
                </p:processor>
                <p:processor name="oxf:identity">
                    <p:input name="data" href="#data"/>
                    <p:output name="data" ref="second"/>
                </p:processor>
            </p:config>
        </input>
        <output name="first">
            <gaga/>
        </output>
        <output name="second">
            <gaga/>
        </output>
    </test>

    <test description="Namespace in p:choose (bug 890)" name="oxf:pipeline">
        <input name="data">
            <ns1:element xmlns:ns1="http://www.example.com/ns">
                <result/>
            </ns1:element>
        </input>
        <input name="config">
            <p:config>
                <p:param type="input" name="data"/>
                <p:param type="output" name="data"/>
                <p:choose href="#data" xmlns:ns2="http://www.example.com/ns">
                    <p:when test="count(/ns2:element) = 1">
                        <p:processor name="oxf:identity">
                            <p:input name="data" href="#data#xpointer(/*/*)"/>
                            <p:output name="data" ref="data"/>
                        </p:processor>
                    </p:when>
                </p:choose>
            </p:config>
        </input>
        <output name="data">
            <result/>
        </output>
    </test>

    <test description="Namespace in XPointer (bug 921)" name="oxf:pipeline">
        <input name="data">
            <ns1:element xmlns:ns1="http://www.example.com/ns">
                <result/>
            </ns1:element>
        </input>
        <input name="config">
            <p:config>
                <p:param type="input" name="data"/>
                <p:param type="output" name="data"/>
                <p:processor name="oxf:identity">
                    <p:input name="data" href="#data#xpointer(/ns2:element/result)"
                        xmlns:ns2="http://www.example.com/ns"/>
                    <p:output name="data" ref="data"/>
                </p:processor>
            </p:config>
        </input>
        <output name="data">
            <result/>
        </output>
    </test>


    <test description="Schema attributes on p:param" name="oxf:pipeline">
        <input name="data">
            <addressBook/>
        </input>
        <input name="config">
            <p:config>
                <p:param type="input" name="data" schema-href="oxf:/unit-tests/address-book-schema.xml"/>
                <p:param type="output" name="data" schema-uri="urn://adress-book"/>
                <p:processor name="oxf:identity">
                    <p:input name="data" href="#data"/>
                    <p:output name="data" ref="data"/>
                </p:processor>
            </p:config>
        </input>
        <output name="data">
            <addressBook/>
        </output>
    </test>


    <test description="Signature Test" name="oxf:pipeline">
        <input name="data">
            <a>
                <b/>
            </a>
        </input>
        <input name="config">
            <p:config>
                <p:param type="input" name="data"/>
                <p:param type="output" name="data"/>

                <p:processor name="oxf:key-pair">
                    <p:output name="data" id="keys"/>
                </p:processor>

                <p:processor name="oxf:xslt">
                    <p:input name="data" href="#keys"/>
                    <p:input name="config">
                        <xsl:stylesheet version="1.0">
                            <xsl:template match="/">
                                <private-key>
                                    <xsl:value-of select="/key-pair/private-key"/>
                                </private-key>
                            </xsl:template>
                        </xsl:stylesheet>
                    </p:input>
                    <p:output name="data" id="private-key"/>
                </p:processor>


                <p:processor name="oxf:xslt">
                    <p:input name="data" href="#keys"/>
                    <p:input name="config">
                        <xsl:stylesheet version="1.0">
                            <xsl:template match="/">
                                <public-key>
                                    <xsl:value-of select="/key-pair/public-key"/>
                                </public-key>
                            </xsl:template>
                        </xsl:stylesheet>
                    </p:input>
                    <p:output name="data" id="public-key"/>
                </p:processor>

                <p:processor name="oxf:signature">
                    <p:input name="data" href="#data"/>
                    <p:input name="private-key" href="#private-key"/>
                    <p:output name="data" id="signed"/>
                </p:processor>

                <p:processor name="oxf:signature-verifier">
                    <p:input name="data" href="#signed"/>
                    <p:input name="public-key" href="#public-key"/>
                    <p:output name="data" ref="data"/>
                </p:processor>

            </p:config>
        </input>
        <output name="data">
            <a>
                <b/>
            </a>
        </output>
    </test>


    <test description="W3C Schema import" name="oxf:pipeline">
        <input name="config">
            <p:config>
                <p:param type="output" name="data"/>
                <p:processor name="oxf:identity">
                    <p:input name="data" schema-href="oxf:/unit-tests/chapter03env.xsd">
                        <envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                            <order xmlns="http://example.org/ord"
                                xmlns:prod="http://example.org/prod">
                                <number>123ABBCC123</number>
                                <items>
                                    <product xmlns="http://example.org/prod">
                                        <number prod:id="prod557">557</number>
                                        <name xmlns="">Short-Sleeved Linen Blouse</name>
                                        <prod:size system="US-DRESS">10</prod:size>
                                        <prod:color xmlns:prod="http://example.org/prod2"
                                            prod:value="blue"/>
                                    </product>
                                </items>
                            </order>
                        </envelope>
                    </p:input>
                    <p:output name="data" ref="data"/>
                </p:processor>
            </p:config>
        </input>
        <output name="data">
            <envelope>
                <order xmlns="http://example.org/ord"
                    xmlns:prod="http://example.org/prod">
                    <number>123ABBCC123</number>
                    <items>
                        <product xmlns="http://example.org/prod">
                            <number prod:id="prod557">557</number>
                            <name xmlns="">Short-Sleeved Linen Blouse</name>
                            <prod:size system="US-DRESS">10</prod:size>
                            <prod:color xmlns:prod="http://example.org/prod2"
                                prod:value="blue"/>
                        </product>
                    </items>
                </order>
            </envelope>
        </output>
    </test>

    <test description="RNG Schema Import" name="oxf:pipeline">
        <input name="config">
            <p:config>
                <p:param type="output" name="data"/>
                <p:processor name="oxf:identity">
                    <p:input name="data" schema-href="oxf:/unit-tests/note.rng">
                        <note>
                            <from>Jani</from>
                            <to>Tove</to>
                            <body>Don't forget me this weekend</body>
                        </note>
                    </p:input>
                    <p:output name="data" ref="data"/>
                </p:processor>
            </p:config>
        </input>
        <output name="data">
            <note>
                <from>Jani</from>
                <to>Tove</to>
                <body>Don't forget me this weekend</body>
            </note>
        </output>
    </test>

    <test description="XUpdate: remove, insert-after, insert-before" name="oxf:xupdate">
        <input name="data">
            <root>
                <element>1</element>
                <element>x</element>
                <element>3</element>
                <element>5</element>
            </root>
        </input>
        <input name="config">
            <xu:modifications version="1.0">
                <xu:remove select="/root/element[2]"/>
                <xu:insert-after select="/root/element[1]">
                    <element>2</element>
                </xu:insert-after>
                <xu:insert-before select="/root/element[4]">
                    <element>4</element>
                </xu:insert-before>
            </xu:modifications>
        </input>
        <output name="data">
            <root>
                <element>1</element>
                <element>2</element>
                <element>3</element>
                <element>4</element>
                <element>5</element>
            </root>
        </output>
    </test>

    <test description="XUpdate: first order function" name="oxf:xupdate">
        <input name="data">
            <dummy/>
        </input>
        <input name="config">
            <xu:modifications>
                <xu:function name="double">
                    <xu:param name="f"/>
                    <xu:function name="result">
                        <xu:param name="x"/>
                        <xu:value-of select="f($x) * 2"/>
                    </xu:function>
                    <xu:copy-of select="$result"/>
                </xu:function>
                <xu:function name="increment">
                    <xu:param name="x"/>
                    <xu:value-of select="$x + 1"/>
                </xu:function>
                <xu:variable name="incrementAndDouble" select="double($increment)"/>
                <xu:update select="/">
                    <result>
                        <xu:value-of select="incrementAndDouble(2)"/>
                    </result>
                </xu:update>
            </xu:modifications>
        </input>
        <output name="data">
            <result>6</result>
        </output>
    </test>

    <test description="XUpdate: order of insertion for attribute" name="oxf:xupdate">
        <input name="data">
            <root/>
        </input>
        <input name="config">
            <xu:modifications>
                <xu:append select="/root">
                    <xu:attribute name="attribute">
                        <xu:value-of select="'a'"/>
                        <xu:value-of select="'b'"/>
                        <xu:value-of select="'c'"/>
                    </xu:attribute>
                </xu:append>
            </xu:modifications>
        </input>
        <output name="data">
            <root attribute="abc"/>
        </output>
    </test>

    <test description="XQuery: a little bit of everything" name="oxf:xquery">
        <input name="data">
            <company>
                <department id="1" name="HR">
                    <employee firstname="John" lastname="Smith">a</employee>
                    <employee firstname="Peter" lastname="Strain"/>
                    <employee firstname="Carl" lastname="Thompson"/>
                </department>
                <department id="2" name="Engineering">
                    <employee firstname="Letticia" lastname="Vallejo"/>
                    <employee firstname="Bruce" lastname="Wilson">b</employee>
                    <employee firstname="David" lastname="Williams"/>
                </department>
            </company>
        </input>
        <input name="config">
            <xquery>
                declare namespace String = "class:java.lang.String"

                (: Returns the employees of a given department :)
                define function employees($data, $name) {
                $data/company/department[@name = $name]/employee
                }

                (: Recursive function counting the number of
                <employee/> elements :)
                define function countEmployees($e) {
                typeswitch($e)
                case element(employee,*) return 1
                default return for $i in $e/* return sum(countEmployees($i))
                }

                (: Call Java code :)
                define function maxLastnameLength($employees) {
                let $lengths :=
                for $e in $employees
                return String:length(String:new(string($e/@lastname)))
                return max($lengths)
                }

                let $company := doc("#data")
                let $hrEmployees := employees($company, "HR")
                let $engineeringEmployees := employees($company, "Engineering")
                return
                <mixed-up-company employee-count="{countEmployees($company)}"
                    max-lastname-length="{maxLastnameLength($company/company/department/employee)}">
                    {
                    for $first in $hrEmployees
                    for $second in $engineeringEmployees
                    return
                    <employee firstname="{$first/@firstname}" lastname="{$second/@lastname}"/>
                    }
                </mixed-up-company>
            </xquery>
        </input>
        <output name="data">
            <mixed-up-company employee-count="6" max-lastname-length="8">
                <employee firstname="John" lastname="Vallejo"/>
                <employee firstname="John" lastname="Wilson"/>
                <employee firstname="John" lastname="Williams"/>
                <employee firstname="Peter" lastname="Vallejo"/>
                <employee firstname="Peter" lastname="Wilson"/>
                <employee firstname="Peter" lastname="Williams"/>
                <employee firstname="Carl" lastname="Vallejo"/>
                <employee firstname="Carl" lastname="Wilson"/>
                <employee firstname="Carl" lastname="Williams"/>
            </mixed-up-company>
        </output>
    </test>

    <test description="XPL: for-each" name="oxf:pipeline">
        <input name="data">
            <x:company xmlns:x="http://localhost/company">
                <x:department>
                    <x:employee firstname="John"/>
                    <x:employee firstname="Peter"/>
                </x:department>
                <x:department>
                    <x:employee firstname="Carl"/>
                </x:department>
            </x:company>
        </input>
        <input name="config">
            <p:config xmlns:y="http://localhost/company">
                <p:param type="input" name="data"/>
                <p:param type="output" name="data"/>
                <p:for-each href="#data" select="/y:company/y:department" root="emps" ref="data">
                    <p:for-each href="current()" select="/y:department/y:employee" root="emps" id="emps">
                        <p:processor name="oxf:identity">
                            <p:input name="data" href="current()"/>
                            <p:output name="data" ref="emps"/>
                        </p:processor>
                    </p:for-each>
                    <p:processor name="oxf:identity">
                        <p:input name="data" href="#emps#xpointer(/emps/*)"/>
                        <p:output name="data" ref="data"/>
                    </p:processor>
                </p:for-each>
            </p:config>
        </input>
        <output name="data">
            <emps>
                <x:employee xmlns:x="http://localhost/company" firstname="John"/>
                <x:employee xmlns:x="http://localhost/company" firstname="Peter"/>
                <x:employee xmlns:x="http://localhost/company" firstname="Carl"/>
            </emps>
        </output>
    </test>

    <test description="Encodings when parsing XML" name="oxf:pipeline">
        <input name="config">
            <p:config>
                <p:param name="data" type="output"/>
                <p:processor name="oxf:saxon7">
                    <p:input name="data" href="aggregate('root', encoding-iso.xml, encoding-utf8.xml)"/>
                    <p:input name="config">
                        <result xsl:version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
                            <xsl:for-each select="/root/root">
                                <length>
                                    <xsl:value-of select="string-length(.)"/>
                                </length>
                            </xsl:for-each>
                        </result>
                    </p:input>
                    <p:output name="data" ref="data"/>
                </p:processor>
            </p:config>
        </input>
        <output name="data">
            <result>
                <length>1</length>
                <length>1</length>
            </result>
        </output>
    </test>

<!--    <test description="URL Serializer" name="oxf:pipeline">-->
<!--        <input name="data">-->
<!--            <numbers>-->
<!--                <number>1</number>-->
<!--                <number>2</number>-->
<!--                <number>3</number>-->
<!--                <number>4</number>-->
<!--                <number>5</number>-->
<!--                <number>6</number>-->
<!--                <number>7</number>-->
<!--                <number>8</number>-->
<!--                <number>9</number>-->
<!--                <number>10</number>-->
<!--            </numbers>-->
<!--        </input>-->
<!--        <input name="config">-->
<!--            <p:config>-->
<!--                <p:param type="input" name="data"/>-->
<!--                <p:param type="output" name="data"/>-->
<!--                <p:processor name="oxf:url-serializer">-->
<!--                    <p:input name="config">-->
<!--                        <config>-->
<!--                            <url>oxf:/unit-tests/url-serializer.xml</url>-->
<!--                        </config>-->
<!--                    </p:input>-->
<!--                    <p:input name="data">-->
<!--                        <numbers/>-->
<!--                    </p:input>-->
<!--                </p:processor>-->
<!--                <p:for-each href="#data" select="/numbers/number">-->
<!--                    <p:processor name="oxf:url-serializer">-->
<!--                        <p:input name="config">-->
<!--                            <config>-->
<!--                                <url>oxf:/unit-tests/url-serializer.xml</url>-->
<!--                            </config>-->
<!--                        </p:input>-->
<!--                        <p:input name="data" href="aggregate('numbers', oxf:/unit-tests/url-serializer.xml#xpointer(/numbers/number), current())"/>-->
<!--                    </p:processor>-->
<!--                </p:for-each>-->
<!--                <p:processor name="oxf:identity">-->
<!--                    <p:input name="data" href="url-serializer.xml"/>-->
<!--                    <p:output name="data" ref="data"/>-->
<!--                </p:processor>-->
<!--            </p:config>-->
<!--        </input>-->
<!--        <output name="data">-->
<!--            <numbers>-->
<!--                <number>1</number>-->
<!--                <number>2</number>-->
<!--                <number>3</number>-->
<!--                <number>4</number>-->
<!--                <number>5</number>-->
<!--                <number>6</number>-->
<!--                <number>7</number>-->
<!--                <number>8</number>-->
<!--                <number>9</number>-->
<!--                <number>10</number>-->
<!--            </numbers>-->
<!--        </output>-->
<!--    </test>-->


<!--    <test description="send simple email" name="oxf:email">-->
<!--        <input name="data">-->
<!--            <message>-->
<!--                <smtp-host>athlon.orbeon.com</smtp-host>-->
<!--                <from>-->
<!--                    <email>john@orbeon.com</email>-->
<!--                    <name>John</name>-->
<!--                </from>-->
<!--                <to>-->
<!--                    <email>jmercay@orbeon.com</email>-->
<!--                    <name>Julien Mercay</name>-->
<!--                </to>-->
<!--                <subject>Simple Email Test</subject>-->
<!--                <text>This is a test</text>-->
<!--            </message>-->
<!--        </input>-->
<!--    </test>-->
<!---->
<!--    <test description="send MIME email" name="oxf:email">-->
<!--        <input name="data">-->
<!--            <message>-->
<!--                <smtp-host>athlon.orbeon.com</smtp-host>-->
<!--                <from>-->
<!--                    <email>john@orbeon.com</email>-->
<!--                    <name>John</name>-->
<!--                </from>-->
<!--                <to>-->
<!--                    <email>avernet@orbeon.com</email>-->
<!--                    <name>Alessandro Vernet</name>-->
<!--                </to>-->
<!--                <subject>MIME Email Test</subject>-->
<!--                <body mime-multipart="alternative">-->
<!--                    <part name="part1" content-type="text/plain">-->
<!--                        This is part 1-->
<!--                    </part>-->
<!--                    <part name="part2" content-type="text/html">-->
<!--                        <html>-->
<!--                            <body>-->
<!--                                This is part 2-->
<!--                            </body>-->
<!--                        </html>-->
<!--                    </part>-->
<!--                </body>-->
<!--            </message>-->
<!--        </input>-->
<!--    </test>-->

    <test description="XForms annotate" name="oxf:xforms-annotate">
        <input name="instance">
            <d:form>
                <d:id>42</d:id>
                <d:id>4x</d:id>
                <d:firstname>John</d:firstname>
                <d:firstname xxforms:valid="false">John</d:firstname>
                <d:lastname xxforms:valid="true">Smith</d:lastname>
                <d:zip xxforms:valid="true">4x</d:zip>
            </d:form>
        </input>
        <input name="model">
            <xforms:model>
                <xforms:bind nodeset="/d:form/d:id" type="xs:integer"/>
                <xforms:bind nodeset="/d:form/d:zip" type="xs:integer"/>
            </xforms:model>
        </input>
        <output name="instance">
            <d:form xmlns:xxforms="http://orbeon.org/oxf/xml/xforms">
                <d:id xxforms:valid="true">42</d:id>
                <d:id xxforms:valid="false">4x</d:id>
                <d:firstname>John</d:firstname>
                <d:firstname xxforms:valid="false">John</d:firstname>
                <d:lastname xxforms:valid="true">Smith</d:lastname>
                <d:zip xxforms:valid="false">4x</d:zip>
            </d:form>
        </output>
    </test>

    <test description="XForms Conditionals: if" name="oxf:pipeline">
        <input name="config">
            <p:config>
                <p:param type="output" name="data"/>

                <p:processor uri="oxf/processor/identity">
                    <p:input name="data">
                        <xforms:model id="form">
                            <xforms:submission method="post"/>
                            <xforms:instance>
                                <form>
                                    <a/>
                                    <b/>
                                    <c/>
                                </form>
                            </xforms:instance>
                        </xforms:model>
                    </p:input>
                    <p:output name="data" id="xforms-model"/>
                </p:processor>

                <p:processor name="oxf:xforms-output">
                    <p:input name="model" href="#xforms-model"/>
                    <p:input name="instance">
                        <form>
                            <a>1</a>
                            <b>2</b>
                            <c>3</c>
                        </form>
                    </p:input>
                    <p:input name="data">
                        <html>
                            <body>
                                <xforms:group ref="/form">
                                    <xxforms:if test="a = '1'">
                                        <xforms:input ref="b"/>
                                    </xxforms:if>
                                    <xforms:input ref="c"/>
                                </xforms:group>
                            </body>
                        </html>
                    </p:input>
                    <p:output name="data" id="annotated-data"/>
                </p:processor>
                <!-- Transform annotated XForms to XHTML -->
                <p:processor name="oxf:xslt"><!-- saxon1 -->
                    <p:input name="config" href="oxf:/config/xforms-to-xhtml.xsl"/>
                    <p:input name="model" href="#xforms-model"/>
                    <p:input name="data" href="#annotated-data"/>
                    <p:output name="data" ref="data"/>
                </p:processor>
            </p:config>
        </input>
        <output name="data">
            <html xmlns:xxforms="http://orbeon.org/oxf/xml/xforms">
                <body>
                    <xhtml:form xmlns:xhtml="http://www.w3.org/1999/xhtml" id="wsrp_rewrite_form_1" xxforms:contains-hidden="true" method="post">
                        <xhtml:input type="hidden" id="wsrp_rewrite_action_1" name="" value=""/>
                        <xhtml:input type="hidden" name="$submitted" value="true"/>
                        <xhtml:input type="text" name="b[2]" value="2"/>
                        <xhtml:input type="text" name="c[3]" value="3"/>
                        <xxforms:hidden xxforms:name="a[1]" xxforms:value="1"/>
                    </xhtml:form>
                </body>
            </html>
        </output>
    </test>

    <test description="XForms Conditionals: choose" name="oxf:pipeline">
        <input name="config">
            <p:config>
                <p:param type="output" name="data"/>

                <p:processor uri="oxf/processor/identity">
                    <p:input name="data">
                        <xforms:model id="form">
                            <xforms:submission method="post"/>
                            <xforms:instance>
                                <form>
                                    <a/>
                                    <b/>
                                    <c/>
                                    <d/>
                                </form>
                            </xforms:instance>
                        </xforms:model>
                    </p:input>
                    <p:output name="data" id="xforms-model"/>
                </p:processor>

                <p:processor name="oxf:xforms-output">
                    <p:input name="model" href="#xforms-model"/>
                    <p:input name="instance">
                        <form>
                            <a>1</a>
                            <b>2</b>
                            <c>3</c>
                            <d>4</d>
                        </form>
                    </p:input>
                    <p:input name="data">
                        <html>
                            <body>
                                <xforms:group ref="/form">
                                    <xxforms:choose>
                                        <xxforms:when test="a = '1'">
                                            <xforms:input ref="b"/>
                                        </xxforms:when>
                                        <xxforms:when test="b = '2'">
                                            <xforms:input ref="c"/>
                                        </xxforms:when>
                                        <xxforms:otherwise>
                                            <xforms:input ref="d"/>
                                        </xxforms:otherwise>
                                    </xxforms:choose>
                                </xforms:group>
                            </body>
                        </html>
                    </p:input>
                    <p:output name="data" id="annotated-data"/>
                </p:processor>
                <!-- Transform annotated XForms to XHTML -->
                <p:processor name="oxf:xslt"><!-- saxon1 -->
                    <p:input name="config" href="oxf:/config/xforms-to-xhtml.xsl"/>
                    <p:input name="model" href="#xforms-model"/>
                    <p:input name="data" href="#annotated-data"/>
                    <p:output name="data" ref="data"/>
                </p:processor>
            </p:config>
        </input>
        <output name="data">
            <html xmlns:xxforms="http://orbeon.org/oxf/xml/xforms">
                <body>
                    <xhtml:form xmlns:xhtml="http://www.w3.org/1999/xhtml" id="wsrp_rewrite_form_1" xxforms:contains-hidden="true" method="post">
                        <xhtml:input type="hidden" id="wsrp_rewrite_action_1" name="" value=""/>
                        <xhtml:input type="hidden" name="$submitted" value="true"/>
                        <xhtml:input type="text" name="b[2]" value="2"/>
                        <xhtml:input type="text" name="c[3]" value="3"/>
                        <xxforms:hidden xxforms:name="a[1]" xxforms:value="1"/>
                    </xhtml:form>
                </body>
            </html>
        </output>
    </test>

    <test description="XForms NS Prefixes" name="oxf:pipeline">
        <input name="config" xmlns:a="http://orbeon.com/a" xmlns:b="http://orbeon.com/b" xmlns:c="http://orbeon.com/c">
            <p:config>
                <p:param type="output" name="out"/>

                <p:processor uri="oxf/processor/identity">
                    <p:input name="data">
                        <xforms:model id="form">
                            <xforms:submission method="post"/>
                            <xforms:instance>
                                <form>
                                    <a:claim>
                                        <b:person>
                                            <c:name>
                                                <a:first/>
                                                <b:last/>
                                            </c:name>
                                        </b:person>
                                        <c:address>
                                            <a:street/>
                                            <b:city/>
                                            <c:state/>
                                            <zip/>
                                            <country/>
                                        </c:address>
                                    </a:claim>
                                </form>
                            </xforms:instance>
                        </xforms:model>
                    </p:input>
                    <p:output name="data" id="model"/>
                </p:processor>

                <p:processor uri="oxf/processor/identity">
                    <p:input name="data">
                        <form>
                            <a:claim>
                                <b:person>
                                    <c:name>
                                        <a:first>John</a:first>
                                        <b:last>Smith</b:last>
                                    </c:name>
                                </b:person>
                                <c:address>
                                    <a:street>850 N. Shoreline Blvd</a:street>
                                    <b:city>Mountain View</b:city>
                                    <c:state>CA</c:state>
                                    <zip>94043</zip>
                                    <country>USA</country>
                                </c:address>
                            </a:claim>
                        </form>
                    </p:input>
            <p:output name="data" id="instance"/>
                </p:processor>


                <p:processor name="oxf:xforms-output">
                    <p:input name="model" href="#model"/>
                    <p:input name="instance" href="#instance"/>
                    <p:input name="data">
                        <html>
                            <xforms:group ref="/form/a:claim">
                            </xforms:group>
                        </html>
                    </p:input>
                    <p:output name="data" id="xf-out"/>
                </p:processor>

                <p:processor uri="oxf/processor/xslt-2.0">
                    <p:input name="data" href="#xf-out"/>
                    <p:input name="config">
                        <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
                            <xsl:template match="/">
                                <request>
                                    <parameters>
                                        <parameter>
                                            <name>$submitted</name>
                                            <value>true</value>
                                        </parameter>
                                        <xsl:for-each select="//xxforms:hidden">
                                            <parameter>
                                                <name><xsl:value-of select="@xxforms:name"/></name>
                                                <value><xsl:value-of select="@xxforms:value"/></value>
                                            </parameter>
                                        </xsl:for-each>
                                    </parameters>
                                </request>
                            </xsl:template>
                        </xsl:stylesheet>
                    </p:input>
                    <p:output name="data" id="request"/>
                </p:processor>

                <p:processor name="oxf:xforms-input">
                     <p:input name="model" href="#model"/>
                     <p:input name="request" href="#request"/>
                     <p:input name="filter">
                          <null xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
                     </p:input>
                     <p:input name="instance" href="#model#xpointer(xforms:model/xforms:instance/form)"/>
                     <p:output name="data" ref="out"/>
                 </p:processor>

            </p:config>
        </input>
        <output name="out">
            <form>
                <a:claim xmlns:a="http://orbeon.com/a">
                    <b:person xmlns:b="http://orbeon.com/b">
                        <c:name xmlns:c="http://orbeon.com/c">
                            <a:first>John</a:first>
                            <b:last>Smith</b:last>
                        </c:name>
                    </b:person>
                    <c:address xmlns:c="http://orbeon.com/c">
                        <a:street>850 N. Shoreline Blvd</a:street>
                        <b:city xmlns:b="http://orbeon.com/b">Mountain View</b:city>
                        <c:state>CA</c:state>
                        <zip>94043</zip>
                        <country>USA</country>
                    </c:address>
                </a:claim>
            </form>
        </output>
    </test>


    <!-- these tests need Tamino to run
    <test description="Tamino Simple Query" name="oxf:tamino-query">
    <input name="config">
    <config>
    <url>http://localhost/tamino/welcome_4_1_4</url>
    <username>tamino</username>
    <password>password</password>
    <collection>encyclopedia</collection>
    </config>
    </input>
        <input name="data">
            <query>
                /jazzMusician[@ino:id="1"]/name
            </query>
        </input>
        <output name="data">
            <name xmlns:ino="http://namespaces.softwareag.com/tamino/response2" ino:id="1">
                <first>Charlie</first>
                <last>Parker</last>
            </name>
        </output>
    </test>

    <test description="Tamino Simple XQuery" name="oxf:tamino-query">
        <input name="config">
            <config>
                <url>http://localhost/tamino/welcome_4_1_4</url>
                <username>tamino</username>
                <password>password</password>
                <collection>encyclopedia</collection>
            </config>
        </input>
        <input name="data">
            <xquery>
                let $musicians := input()/jazzMusician
                return
                <musicians>
                    {
                    for $m in $musicians
                    return $m
                    }
                </musicians>
            </xquery>
        </input>
        <output name="data">
            <musicians>
                <jazzMusician ID="ParkerCharlie" type="instrumentalist">
                    <name>
                        <first>Charlie</first>
                        <last>Parker</last>
                    </name>
                    <birthDate>1920-08-19</birthDate>
                    <instrument>saxophone</instrument>
                </jazzMusician>
                <jazzMusician ID="GillespieDizzy" type="instrumentalist">
                    <name>
                        <first>Dizzy</first>
                        <last>Gillespie</last>
                    </name>
                    <birthDate>1917-10-21</birthDate>
                    <instrument>trumpet</instrument>
                </jazzMusician>
            </musicians>
        </output>
    </test>


    <test description="Tamino Insert" name="oxf:tamino-insert">
        <input name="config">
            <config>
                <url>http://localhost/tamino/welcome_4_1_4</url>
                <username>tamino</username>
                <password>password</password>
                <collection>encyclopedia</collection>
            </config>
        </input>
        <input name="data">

                <jazzMusician type="instrumentalist" ID="ParkerCharlie">
                    <name>
                        <first>Charlie</first>
                        <last>Parker</last>
                    </name>
                    <birthDate>1920-08-19</birthDate>
                    <instrument>saxophone</instrument>
                </jazzMusician>


        </input>
    </test>

       <test description="Tamino Update" name="oxf:tamino-update">
        <input name="config">
            <config>
                <url>http://localhost/tamino/welcome_4_1_4</url>
                <username>tamino</username>
                <password>password</password>
                <collection>encyclopedia</collection>
            </config>
        </input>
        <input name="data">
            <xquery>
            update replace input()/jazzMusician[@ID=ParkerCharlie]/name/first
            with <first>CCC</first>
            </xquery>
        </input>
    </test>
    -->

    <!-- Will work when bug 1155 is fixed

    <test description="New RNG Schema" name="oxf:pipeline">
        <input name="config">
            <p:config>
                <p:param type="output" name="data"/>
                <p:processor name="oxf:new-validation">
                    <p:input name="config" href="oxf:/unit-tests/note.rng"/>
                    <p:input name="data">
                        <note>
                            <from>Jani</from>
                            <to>Tove</to>
                            <body>Don't forget me this weekend</body>
                        </note>
                    </p:input>
                    <p:output name="data" ref="data"/>
                </p:processor>
            </p:config>
        </input>
        <output name="data">
            <note>
                <from>Jani</from>
                <to>Tove</to>
                <body>Don't forget me this weekend</body>
            </note>
        </output>
    </test>


    <test description="New W3C Schema import" name="oxf:pipeline">
         <input name="config">
             <p:config>
                 <p:param type="output" name="data"/>
                 <p:processor name="oxf:new-validation">
                     <p:input name="config" href="oxf:/unit-tests/chapter03env.xsd"/>
                     <p:input name="data">
                         <envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                             <order xmlns="http://example.org/ord"
                                 xmlns:prod="http://example.org/prod">
                                 <number>123ABBCC123</number>
                                 <items>
                                     <product xmlns="http://example.org/prod">
                                         <number prod:id="prod557">557</number>
                                         <name xmlns="">Short-Sleeved Linen Blouse</name>
                                         <prod:size system="US-DRESS">10</prod:size>
                                         <prod:color xmlns:prod="http://example.org/prod2"
                                             prod:value="blue"/>
                                     </product>
                                 </items>
                             </order>
                         </envelope>
                     </p:input>
                     <p:output name="data" ref="data"/>
                 </p:processor>
             </p:config>
         </input>
         <output name="data">
             <envelope>
                 <order xmlns="http://example.org/ord"
                     xmlns:prod="http://example.org/prod">
                     <number>123ABBCC123</number>
                     <items>
                         <product xmlns="http://example.org/prod">
                             <number prod:id="prod557">557</number>
                             <name xmlns="">Short-Sleeved Linen Blouse</name>
                             <prod:size system="US-DRESS">10</prod:size>
                             <prod:color xmlns:prod="http://example.org/prod2"
                                 prod:value="blue"/>
                         </product>
                     </items>
                 </order>
             </envelope>
         </output>
     </test>
     -->

<!--    <test description="LDAP Processor Search" name="oxf:ldap">-->
<!--        <input name="config">-->
<!--            <config>-->
<!--                <host>msr</host>-->
<!--                <port>7001</port>-->
<!--                <bind-dn>cn=Admin</bind-dn>-->
<!--                <password>password</password>-->
<!--                <root-dn>ou=people, ou=myrealm,dc=mydomain</root-dn>-->
<!--                <attribute>cn</attribute>-->
<!--                <attribute>wlsMemberOf</attribute>-->
<!--                <attribute>description</attribute>-->
<!--            </config>-->
<!--        </input>-->
<!--        <input name="filter">-->
<!--            <filter>(uid=jaw)</filter>-->
<!--        </input>-->
<!--        <output name="data">-->
<!--            <results>-->
<!--                <result>-->
<!--                    <name>uid=jaw</name>-->
<!--                    <attribute>-->
<!--                        <name>description</name>-->
<!--                        <value>John Wickey</value>-->
<!--                    </attribute>-->
<!--                    <attribute>-->
<!--                        <name>wlsMemberOf</name>-->
<!--                        <value>cn=msr-users,ou=groups,ou=myrealm,dc=mydomain</value>-->
<!--                        <value>cn=msr-bpi-delete-all-person,ou=groups,ou=myrealm,dc=mydomain</value>-->
<!---->
<!--                        <value>cn=msr-bpi-edit-all-person,ou=groups,ou=myrealm,dc=mydomain</value>-->
<!--                        <value>cn=msr-bpi-delete-orgs,ou=groups,ou=myrealm,dc=mydomain</value>-->
<!--                        <value>cn=msr-bpi-edit-orgs,ou=groups,ou=myrealm,dc=mydomain</value>-->
<!--                        <value>cn=msr-lih-edit-lodge,ou=groups,ou=myrealm,dc=mydomain</value>-->
<!--                        <value>cn=msr-lih-view-lodge,ou=groups,ou=myrealm,dc=mydomain</value>-->
<!--                        <value>cn=msr-lih-delete-lodge,ou=groups,ou=myrealm,dc=mydomain</value>-->
<!--                    </attribute>-->
<!--                    <attribute>-->
<!--                        <name>cn</name>-->
<!--                        <value>jaw</value>-->
<!--                    </attribute>-->
<!--                </result>-->
<!--            </results>-->
<!--        </output>-->
<!--    </test>-->

  <!--
    <test description="LDAP Processor Update" name="oxf:ldap">
        <input name="config">
            <config>
                <host>localhost</host>
                <port>7001</port>
                <bind-dn>cn=Admin</bind-dn>
                <password>password</password>
                <root-dn>ou=people, ou=myrealm,dc=mydomain</root-dn>
                <attribute>cn</attribute>
                <attribute>wlsMemberOf</attribute>
                <attribute>description</attribute>
            </config>
        </input>
        <input name="filter">
            <update>
                <name>uid=jmercay, ou=people, ou=myrealm, dc=mydomain</name>
                <attribute>
                    <name>wlsMemberOf</name>
                    <value>cn=msr-users,ou=groups,ou=myrealm,dc=mydomain</value>
                    <value>cn=msr-bpi-edit-person,ou=groups,ou=myrealm,dc=mydomain</value>
                </attribute>
            </update>
        </input>
        <output name="data">
            <update>success</update>
        </output>
    </test>

    <test description="LDAP Processor Add" name="oxf:ldap">
        <input name="config">
            <config>
                <host>localhost</host>
                <port>7001</port>
                <bind-dn>cn=Admin</bind-dn>
                <password>password</password>
                <root-dn>ou=people, ou=myrealm,dc=mydomain</root-dn>
                <attribute>cn</attribute>
                <attribute>wlsMemberOf</attribute>
                <attribute>description</attribute>
            </config>
        </input>
        <input name="filter">
            <add>
                <name>uid=test1, ou=people, ou=myrealm, dc=mydomain</name>
                <attribute>
                    <name>objectclass</name>
                    <value>person</value>
                    <value>organizationalPerson</value>
                    <value>inetOrgPerson</value>
                    <value>wlsUser</value>
                </attribute>
                <attribute>
                    <name>uid</name>
                    <value>test1</value>
                </attribute>
                <attribute>
                    <name>userpassword</name>
                    <value>test</value>
                </attribute>
                <attribute>
                    <name>description</name>
                    <value>test test</value>
                </attribute>
                <attribute>
                    <name>wlsMemberOf</name>
                    <value>cn=msr-users,ou=groups,ou=myrealm,dc=mydomain</value>
                    <value>cn=msr-bpi-edit-person,ou=groups,ou=myrealm,dc=mydomain</value>
                </attribute>
                <attribute>
                    <name>sn</name>
                    <value>test1</value>
                </attribute>
                <attribute>
                    <name>cn</name>
                    <value>test1</value>
                </attribute>
            </add>
        </input>
        <output name="data">
            <add>success</add>
        </output>
    </test>

    <test description="LDAP Processor Delete" name="oxf:ldap">
        <input name="config">
            <config>
                <host>localhost</host>
                <port>7001</port>
                <bind-dn>cn=Admin</bind-dn>
                <password>password</password>
                <root-dn>ou=people, ou=myrealm,dc=mydomain</root-dn>
                <attribute>cn</attribute>
                <attribute>wlsMemberOf</attribute>
                <attribute>description</attribute>
            </config>
        </input>
        <input name="filter">
            <delete>
                <name>uid=test1, ou=people, ou=myrealm, dc=mydomain</name>
            </delete>
        </input>
        <output name="data">
            <delete>success</delete>
        </output>
    </test>
    -->

</tests>
