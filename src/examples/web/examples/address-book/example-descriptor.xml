<!--
    Copyright (C) 2004 Orbeon, Inc.
  
    This program is free software; you can redistribute it and/or modify it under the terms of the
    GNU Lesser General Public License as published by the Free Software Foundation; either version
    2.1 of the License, or (at your option) any later version.
  
    This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
    without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU Lesser General Public License for more details.
  
    The full text of the license is available at http://www.gnu.org/copyleft/lesser.html
-->
<example-descriptor xmlns:f="http://orbeon.org/oxf/xml/formatting" xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title>Address Book</title>
    <xi:include href="example-descriptor-files.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
    <description>
        <div xmlns="http://www.w3.org/1999/xhtml">
            <p>
                This example demonstrates a basic use of the <a href="/doc/processors-sql"
                f:url-type="resource">SQL processor</a>. It implements a simple address book,
                allowing the user to add and remove entries to a SQL database.
            </p>
            <p>
                See also the <a href="/goto-example/address-book2" f:url-type="resource">Address
                Book NG</a> example.
            </p>
            <h4>Database Initialization</h4>
            <p>
                This example necessitates a working database. By default, the test database
                embedded with OPS is used. A special pipeline, <code>init-database.xpl</code>,
                creates tables and inserts sample data if the tables don't exist in the database
                yet. Here is the database schema, containing only one table: <code>create cached
                table oxf_address_book (id identity, first varchar, last varchar, phone
                varchar)</code>
            </p>
            <h4>Displaying All Records</h4>
            <p>
                This example displays the content of the table in the database. The <a
                href="/goto-source/address-book/model.xpl" f:url-type="resource">page model XPL
                pipeline</a> generates data in the XML syntax shown below:
            </p>
            <f:xml-source>
                <friends>
                    <friend>
                        <id>0</id>
                        <first>John</first>
                        <last>Smith</last>
                        <phone>555-1234</phone>
                    </friend>
                    <friend>
                        <id>1</id>
                        <first>Terry</first>
                        <last>Moore</last>
                        <phone>555-5678</phone>
                    </friend>
                </friends>
            </f:xml-source>
            <p>
                The XPL pipeline uses the SQL processor to query data from the relational database.
                It is provided a configuration with the following elements:
            </p>
            <ul>
                <li>
                    <p>
                        <b><code>sql:query</code>:</b> contains the SQL statement, selecting all
                        rows from the <code>friends</code> table.
                    </p>
                </li>
                <li>
                    <p>
                        <b><code>sql:result-set</code> and <code>sql:row-iterator</code>:</b>
                        iterate over the SQL result-set.
                    </p>
                </li>
                <li>
                    <p>
                        <b><code>sql:get-column-value</code>:</b> get column values for the current
                        result-set row.
                    </p>
                </li>
            </ul>
            <f:xml-source>
                <sql:config xmlns:sql="http://orbeon.org/oxf/xml/sql">
                    <sql:connection>
                        <sql:execute>
                            <sql:query>select * from friends</sql:query>
                            <sql:result-set>
                                <friends>
                                    <sql:row-iterator>
                                        <friend>
                                            <id>
                                                <sql:get-column-value type="xs:string" column="id"/>
                                            </id>
                                            <first>
                                                <sql:get-column-value type="xs:string" column="first"/>
                                            </first>
                                            <last>
                                                <sql:get-column-value type="xs:string" column="last"/>
                                            </last>
                                            <phone>
                                                <sql:get-column-value type="xs:string" column="phone"/>
                                            </phone>
                                        </friend>
                                    </sql:row-iterator>
                                </friends>
                            </sql:result-set>
                        </sql:execute>
                    </sql:connection>
                </sql:config>
            </f:xml-source>
            <p>
                The <a href="/goto-source/address-book/view.xsl" f:url-type="resource">page view
                (<code>view.xsl</code>)</a> is an XSLT stylesheet which transforms the document
                produced by the page model into HTML. The page view also contains XForms controls,
                including the text fields and buttons.
            </p>
            <h4>Inserting and Deleting Records</h4>
            <p>
                To insert or delete a record, you need to provide an <a
                href="/goto-source/address-book/xforms-model.xml" f:url-type="resource">XForms
                model</a> which is submitted when the user presses the "Add" or "Delete" buttons.
                The model contains four database fields <code>id</code>, <code>first</code>,
                <code>last</code>, and <code>phone</code>. Additionally, it contains an action field
                indicating which action must take place.
            </p>
            <p>
                Depending on whether the action is <code>add</code> or <code>delete</code>, the <a
                href="/goto-source/address-book/add-action.xml" f:url-type="resource">"add" action
                pipeline</a> or the <a href="/goto-source/address-book/delete-action.xml"
                f:url-type="resource">"delete" action pipeline</a> is executed by the PFC upon
                XForms submission.
            </p>
        </div>
    </description>
</example-descriptor>
