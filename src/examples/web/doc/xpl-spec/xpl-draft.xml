<?xml version="1.0" encoding="iso-8859-1"?>
<!--<!DOCTYPE spec PUBLIC "-//W3C//DTD Specification V2.1//EN"-->
<!-- "http://www.w3.org/XML/1998/06/xmlspec-v21.dtd" [-->
<!--<!DOCTYPE spec [-->
<!--<!ENTITY doctype "NOTE">-->
<!--<!ENTITY nickname "xpl">-->
<!--<!ENTITY http-ident "http://www.orbeon.com/oxf/">-->
<!--<!ENTITY draft.month "01">-->
<!--<!ENTITY draft.monthname "January">-->
<!--<!ENTITY draft.day "24">-->
<!--<!ENTITY draft.year "2005">-->
<!--<!ENTITY iso6.doc.date "&draft.year;&draft.month;&draft.day;">-->
<!--<!ENTITY draft-name "NOTE-xpl">-->
<!--<!ENTITY namespaceName "http://www.orbeon.com/oxf/xpl">-->
<!--]>-->
<spec w3c-doctype="note" xmlns:xi="http://www.w3.org/2003/XInclude">
    <header>
        <title>XML Pipeline Language (XPL)</title>
        <version>Version 1.0</version>
        <w3c-designation>NOTE-pipeline-20050124</w3c-designation>
<!--        <w3c-doctype>W3C Note</w3c-doctype>-->
        <w3c-doctype>Orbeon Draft Note</w3c-doctype>
        <pubdate>
            <day>24</day>
            <month>January</month>
            <year>2005</year>
        </pubdate>
        <publoc>
            <loc href="http://www.orbeon.com/oxf/2005/NOTE-xpl-20050124/">http://www.orbeon.com/oxf/2005/NOTE-xpl-20050124/</loc>
<!--            (in-->
<!--            <loc href="&http-ident;&draft.year;/&doctype;-&nickname;-&iso6.doc.date;/Overview.html">HTML</loc>-->
<!--            and-->
<!--            <loc href="&http-ident;&draft.year;/&doctype;-&nickname;-&iso6.doc.date;/Overview.xml">XML</loc>-->
<!--            with separate provision of the-->
<!--            <loc href="http://www.w3.org/2002/02/xml-pipeline.xsd">Pipeline schema</loc>)-->
        </publoc>
        <latestloc>
            <loc href="http://www.orbeon.com/oxf/xpl/">http://www.orbeon.com/oxf/xpl/</loc>
        </latestloc>
        <authlist>
            <author>
                <name>Erik Bruchez</name>
                <affiliation>Orbeon, Inc.</affiliation>
                <email href="mailto:ebruchez@orbeon.com">ebruchez@orbeon.com</email>
            </author>
            <author>
                <name>Alessandro Vernet</name>
                <affiliation>Orbeon, Inc.</affiliation>
                <email href="mailto:avernet@orbeon.com">avernet@orbeon.com</email>
            </author>
        </authlist>
        <copyright>
            <p>
                Copyright © 2005 <loc href="http://www.orbeon.com/">Orbeon, Inc.</loc>
            </p>
        </copyright>
        <abstract>
            <p>
                This Note describes the features and syntax for the XPL XML Pipeline Language, an
                XML vocabulary for describing a processing model for XML components.
            </p>
        </abstract>
        <status>
            <p>
                This document is currently an internal draft note by Orbeon, Inc. It has not been
                submitted to the W3C or any other standard body, even though it follows closely the
                format of a W3C Note or Recommendation. Because it is a draft, it does not
                necessarily describe the final 1.0 version of the XPL language.
            </p>
        </status>
        <sourcedesc>
            <p>Created in electronic form.</p>
        </sourcedesc>
        <langusage>
            <language id="EN">English</language>
        </langusage>
        <revisiondesc>
            <slist>
                <sitem>January 2005: Submission made.</sitem>
            </slist>
        </revisiondesc>
    </header>
    <body>
        <div1 id="intro">
            <head>Introduction</head>
            <div2 id="terminology">
                <head>What is XPL?</head>
                <p>
                    This specification defines the syntax and semantics of the XPL 1.0 language.
                </p>
                <termdef id="xpl-program" term="XPL program">
                    An <term>XPL program</term> or <term>program in the XPL language</term> is a
                    well-formed XML document whose syntax is well-formed XML <bibref ref="xml-10"/>
                    conforming to the Namespaces in XML Recommendation <bibref
                    ref="xml-namespaces-10"/>. Furthermore, the XML document must conform to the
                    syntax of the XPL language described in this specification.
                </termdef>
                <p>
                    An XPL program defines orchestrated sequences of operations on XML Information
                    Sets (Infosets). Individual operations are encapsulated within components called
                    XML processors. Operations include production, consumption, and transformation
                    of XML Infosets. An XPL program supports unconditional operations, and may
                    support as well conditions, loops, and change of control following runtime
                    errors.
                </p>
            </div2>
            <div2 id="motivation">
                <head>Motivation</head>
                <p>
                    A growing number of specifications describe operations on XML documents. The
                    best-known specification is <bibref ref="xslt-10"/>, a language designed to
                    transform XML documents into other XML documents. There are other such
                    specifications, including <bibref ref="xquery-10"/>, validation languages like
                    <bibref ref="relax-ng"/> and <bibref ref="xml-schema"/>. No current
                    specification adequately addresses the interoperability of those specifications
                    from the point of view of the XML Infosets they produce or consume. XPL
                    addresses this problem.
                </p>
            </div2>
        </div1>
        <div1 id="concepts">
            <head>Concepts</head>
            <div2 id="terminology">
                <head>Terminology</head>
                <p>
                    <termdef id="dt-must" term="Must, May, etc.">The key words
                        <term>must</term>,
                        <term>must not</term>,
                        <term>required</term>,
                        <term>shall</term>,
                        <term>shall not</term>,
                        <term>should</term>,
                        <term>should not</term>,
                        <term>recommended</term>,
                        <term>may</term>, and
                        <term>optional</term>
                        in this specification are to be interpreted as described in
                        <bibref ref="rfc2119"/>.
                    </termdef>
                </p>
                <p>
                    <termdef id="Infoset" term="information set">
                        The term <term>information set</term> refers to the output of an <bibref
                        ref="xml-10"/> or <bibref ref="xml-11"/> processor, expressed as a
                        collection of information items and properties as defined by the <bibref
                        ref="xml-infoset"/> specification.] In this document the term Infoset is
                        used as a synonym for information set.
                    </termdef>
                </p>
            </div2>
            <div2 id="notation">
                <head>Notation</head>
                <p>
                    In this document the specification of each XPL-defined element type is preceded
                    by a summary of its syntax in the form of a model for elements of that element
                    type. The meaning of syntax summary notation is as defined in <bibref
                    ref="xslt-20"/>, section 2.2.
                </p>
            </div2>
            <div2>
                <head>XPL Implementation</head>
                <termdef id="xplimplementation" term="XPL implementation">
                    A specific software product able execute an XPL program according to the XPL
                    specification is referred to as an <term>XPL implementation</term>.
                </termdef>
                <p>
                    The XPL specification does not put any requirement on the underlying software
                    platform other than being able to execute an XPL program. In fact it is hoped
                    that XPL will be implemented in various programming languages on various
                    platforms.
                </p>
            </div2>
            <div2>
                <head>Error Handling</head>
                <p>
                    The following definitions are borrowed from <bibref ref="xslt-20"/> with minor
                    adjustments.
                </p>
                <p>
                    <termdef id="static-error" term="static error">
                        An error that is detected by examining an XPL program before execution
                        starts is referred to as a <term>static error</term>.
                    </termdef>
                </p>
                <p>
                    <termdef id="dynamic-error" term="dynamic error">
                        An error that is not detected until an XPL program is executed is referred
                        to as a <term>dynamic error</term>.
                    </termdef>
                </p>
                <p>
                    <termdef id="recoverable-errors" term="recoverable errors">
                        Some dynamic errors are classed as <term>recoverable errors</term>. When a
                        recoverable error occurs, this specification allows the XPL implementation
                        either to signal the error (by reporting the error condition and terminating
                        execution) in the basic profile or to take a defined recovery action and
                        continue processing when the exception module is available.
                    </termdef>
                </p>
<!--                <p>-->
<!--                    [Definition: If an implementation recovers from a recoverable dynamic error, it-->
<!--                    must take the recovery action defined for that error condition in this-->
<!--                    specification.]-->
<!--                </p>-->
                <p>
                    <termdef id="non-recoverable-dynamic-error" term="non-recoverable dynamic error">
                        A dynamic error that is not recoverable is referred to as a
                        <term>non-recoverable dynamic error</term>. When a non-recoverable dynamic
                        error occurs, the XPL implementation must signal the error, and the
                        execution of the XPL program fails.
                    </termdef>
                </p>
            </div2>
            <div2>
                <head>Qualified Names</head>
                <p>
                    The following definitions are borrowed from <bibref ref="xslt-20"/> with minor
                    adjustments.
                </p>
                <p>
                    XML processors referred to by XPL are specified as a <termref
                    def="qname">QName</termref> using the syntax for <a
                    href="http://www.w3.org/TR/REC-xml-names/#NT-QName">QName</a> as defined in
                    <bibref ref="xml-namespaces-10"/>.
                </p>
                <p>
                    <termdef id="qname" term="QName">
                        A <term>QName</term> is always written in the form <code>(NCName ":")?
                        NCName</code>, that is, a local name optionally preceded by a namespace prefix.
                        When two QNames are compared, however, they are considered equal if the
                        corresponding <termref def="expanded-qname">expanded-QNames</termref> are the
                        same, as described below.
                    </termdef>
                </p>
                <p>
                    Because an atomic value of type <code>xs:QName</code> is sometimes referred to
                    loosely as a QName, this specification also uses the term <termref
                    def="lexical-qname">lexical QName</termref> to emphasize that it is referring to
                    a <a href="http://www.w3.org/TR/REC-xml-names/#NT-QName">QName</a> in its
                    lexical form rather than its expanded form. This term is used especially when
                    strings containing lexical QNames are manipulated as run-time values.
                </p>
                <p>
                    <termdef id="lexical-qname" term="lexical QName">
                        A <term>lexical QName</term> is a string representing a <termref
                        def="qname">QName</termref> in the form <code>(NCName ":")? NCName</code>,
                        that is, a local name optionally preceded by a namespace prefix.
                    </termdef>
                </p>
                <p>
                    <termdef id="defining-element" term="defining element">
                        A string in the form of a lexical QName may occur as the value of an attribute
                        node in a stylesheet module, or within an XPath expression contained in such an
                        attribute node, or as the result of evaluating an XPath expression contained in
                        such an attribute node. The element containing this attribute node is referred
                        to as the <term>defining element</term> of the QName.
                    </termdef>
                </p>
                <p>
                    <termdef id="expanded-qname" term="expanded-QName">
                        An <term>expanded-QName</term> contains a pair of values, namely a local name
                        and an optional namespace URI. It may also contain a namespace prefix. Two
                        expanded-QNames are equal if the namespace URIs are the same (or both absent)
                        and the local names are the same. The prefix plays no part in the comparison,
                        but is used only if the expanded-QName needs to be converted back to a string.
                    </termdef>
                </p>
                <p>
                    If the QName has a prefix, then the prefix is expanded into a URI reference
                    using the namespace declarations in effect on its <termref
                    def="defining-element">defining element</termref>. The <termref
                    def="expanded-qname">expanded-QName</termref> consisting of the local part of
                    the name and the possibly null URI reference is used as the name of the object.
                </p>
                <p>
                    In the case of a prefixed QName used as the value of an attribute in the XPL
                    program, or appearing within an XPath expression in the stylesheet, it is a
                    static error if the defining element has no namespace node whose name matches
                    the prefix of the QName.
                </p>
            </div2>
        </div1>
        <div1 id="processors">
            <head>XML Processors</head>
            <div2>
                <head>Definition</head>
                <p>
                    <termdef id="xml-processor" term="XPL processor">
                        An <term>XML processor</term> is a component used in an <termref
                        def="xpl-program">XPL program</termref> and identified by a <termref
                        def="qname">QName</termref>.
                    </termdef>
                </p>
                <p>
                    An XML processor is composed of:
                </p>
                <ulist>
                    <item>
                        <p><emph>A set of inputs and outputs</emph>, defining how the XML processor
                        interfaces with an XPL program. See <specref
                        ref="processor-interface"/>.</p>
                    </item>
                    <item>
                        <p><emph>A behavior</emph>, defining tasks performed by the XML processor
                        during the execution of an XPL program. See <specref
                        ref="processor-behavior"/>.</p>
                    </item>
                </ulist>
                <p>
                    A small set of XML processors must be provided by the XPL implementations. See
                    <specref ref="standardprocessors"/>. However most of the XML processors provided
                    by XPL implementations are implementation-defined. XPL implementations may also
                    choose to be extensible and allow users of the implementation to provide their
                    own XML processors.
                </p>
                <p>
                    The use of a <termref def="qname">QName</termref> to identify an XML processor
                    has the following benefits:
                </p>
                <ulist>
                    <item>
                        <p>
                            <emph>Shorter to write by hand than full URIs.</emph> Once an XML
                            namespace prefix mapping is done, a qualified name only requires typing
                            a prefix, which can be as short as one character, and a local name.
                        </p>
                    </item>
                    <item>
                        <p>
                            <emph>Allows for logical grouping of processors.</emph> A single URI
                            regroups the XML processors in a certain category, for example the XML
                            processors implemented by a certain company.
                        </p>
                    </item>
                    <item>
                        <p>
                            <emph>Consistency with other specifications.</emph> <bibref
                            ref="xslt-20"/> for example, uses qualified names to identify
                            stylesheet-defined objects such as functions.
                        </p>
                    </item>
                </ulist>
                <p>
                    The definition of the mapping between a particular QName and an XML processor
                    implementation is outside the scope of XPL.
                </p>
            </div2>
            <div2 id="processor-instance">
                <head>Instances</head>
                <p>
                    <termdef id="xml-processor-instance" term="XML processor instance">
                        An <term>XML processor instance</term> designate a specific use of a
                        processor in a pipeline.
                    </termdef>
                </p>
                <p>
                    An XML processor used in an XPL program is always <emph>instantiated</emph>.
                    Multiple instances of the same XML processor may occur in an XPL program.
                </p>
                <p>
                    XPL does not specify if or how an XML processor is instantiated or keeps state
                    information during an XPL program execution.
                </p>
            </div2>
            <div2 id="processor-interface">
                <head>Inputs and Outputs</head>
                <p>
                    Inputs and outputs connect an XML processor instance to the rest of the
                    pipeline. Each input may provide an XML Infoset to the XML processor instance.
                    Each output may provide an XML Infoset produced by the processor instance.
                </p>
                <p>
                    <termdef id="static-input-output" term="static input or output">
                        A <term>static input or output</term> designate an input or output defined by an
                        <termref def="xml-processor">XML processor</termref> before the execution of
                        the <termref def="xpl-program">XPL program</termref>.
                    </termdef>
                </p>
                <p>
                    <termdef id="connected-input-output" term="connected input of output">
                        A <term>connected input or output</term> designate an input or output of an XML
                        processor instance declared in an <termref def="xpl-program">XPL
                        program</termref>.
                    </termdef>
                </p>
                <p>
                    <termdef id="dynamic-input-output" term="dynamic input of output">
                        A <term>dynamic input or output</term> designate a connected input or output of
                        an XML processor instance which is not defined by the XML processor before the
                        execution of the <termref def="xpl-program">XPL program</termref>
                    </termdef>
                </p>
                <p>
                    Each XML processor instance has:
                </p>
                <ulist>
                    <item>
                        <p>
                            <emph>A set of inputs each identified by a name.</emph> No two inputs
                            input may have the same name. The set of inputs may be empty.
                        </p>
                    </item>
                    <item>
                        <p>
                            <emph>A set of outputs each identified by a name.</emph> No two outputs
                            output may have the same name. The set of outputs may be empty.
                        </p>
                    </item>
                </ulist>
                <p>
                    For each static input or output, the XML processor defines if the input or
                    output is:
                </p>
                <ulist>
                    <item>
                        <p>
                            <emph>Mandatory.</emph> Such input or output must be connected in an XPL
                            program. The XPL implementation should raise a static error if a
                            statically defined mandatory input or output is not connected for a
                            given XML processor instance.
                        </p>
                    </item>
                    <item>
                        <p>
                            <emph>Optional.</emph> Such input or output may or may not be connected
                            in an XPL program.
                        </p>
                    </item>
                </ulist>
                <p>
                    <table border="1" align="center">
                        <tr>
                            <td rowspan="2"/>
                            <th colspan="2">Static</th>
                            <th rowspan="2">Dynamic</th>
                        </tr>
                        <tr>
                            <th>Mandatory</th>
                            <th>Optional</th>
                        </tr>
                        <tr>
                            <th>Connected</th>
                            <td>OK</td>
                            <td>OK</td>
                            <td>OK</td>
                        </tr>
                        <tr>
                            <th>Not connected</th>
                            <td>Invalid</td>
                            <td>OK</td>
                            <td>Inexistent by definition</td>
                        </tr>
                    </table>
                </p>
                <note>
                    The mechanism by which an XPL processor exposes inputs and outputs, and whether
                    they are mandatory or optional to the XPL implementation is outside the scope
                    of this specification.
                </note>
            </div2>
            <div2 id="processor-behavior">
                <head>Behavior</head>
                <p>
                    The behavior of an XML processor is for the most part outside the scope of this
                    specification, with the exception of the following aspects:
                </p>
                <ulist>
                    <item>
                        <p>
                            <emph>Change of control.</emph> The XPL implementation may give control
                            to an XML processor instance, in association with exactly zero or one
                            connected output. If the XML processor instance has at least one
                            connected output, the XPL implementation will always give control to the
                            XML processor in association with an output. If the XPL implementation
                            gives control the XML processor instance in association with an output,
                            while in control the XML processor instance must "produce" an XML
                            Infoset associated with that output. If the XPL implementation did not
                            associate an output, the XML processor does not generate an XML Infoset.
                        </p>
                    </item>
                    <item>
                        <p>
                            <emph>Generating an error.</emph> The XML processor instance, when
                            having control, may generate an error that is propagated to the XPL
                            implementation. The XPL implementation then raises a dynamic error.
                            Even if the XPL implementation is expecting a resulting XML Infoset, no
                            such XML Infoset is provided by the XML processor. With the exception
                            module, the error is considered an exception and may be a recoverable
                            dynamic error. This means that if an exception handler is available for
                            that exception, it can be caught and processing may resume. Otherwise,
                            the error is a non-recoverable dynamic error. With the basic profile,
                            all errors raised by an XML processor are non-recoverable dynamic
                            errors.
                        </p>
                        <p>
                            Example 1: An XML processor may generate an error if an XML Infosets
                            read on any of its inputs does not conform to a format expected by the
                            XML processor. Similarly, the interaction with other software may cause
                            the XML processor to report errors.
                        </p>
                        <p>
                            Example 2: An XML processor may generate an error if the interaction
                            with other software reports an error.
                        </p>
                    </item>
                    <item>
                        <p>
                            <emph>Reading inputs.</emph> The XML processor instance, when having
                            control, may read one or more of its connected inputs. "Reading an
                            input" means that the XML processor instance asks the XPL implementation
                            to produce the XML Infoset associated with that particular connected
                            input.
                        </p>
                    </item>
                    <item>
                        <p>
                            <emph>Reading outputs.</emph> "Reading an output" means that the XML
                            implementation gives control to an XML processor instance in association
                            with an output. When in control, the XML processor instance must produce
                            the XML Infoset associated with that particular output. If the XML
                            implementation reads a dynamic output, the XML processor instance may
                            generate an error if it does not support that output.
                        </p>
                    </item>
                </ulist>
                <p>
                    While in control, an XML processor instance may perform other tasks, like
                    interacting with other software. Such tasks are outside the scope of the present
                    specification.
                </p>
                <p>
                    XPL does not specify the format or API used by the XPL implementation to
                    provide XML Infosets to an XML processor, or how an XML processor returns XML
                    Infosets to the XPL implementation.
                </p>
            </div2>
        </div1>
        <div1 id="xpl-program">
            <head>XPL Program</head>
            <div2>
                <head>Structure</head>
                <p>
                    An <termref def="xpl-program">XPL program</termref> consists of:
                </p>
                <ulist>
                    <item>
                        <p>
                            <emph>Input and output parameters.</emph> Each input or output has a
                            name, and may either provide the XPL program with an XML Infoset (case
                            of an input), or produces an XML Infoset (case of an output). The XPL
                            program may have no input or outputs.
                        </p>
                    </item>
                    <item>
                        <p>
                            <emph>A sequence of statements.</emph> Statements are discussed in
                            <specref ref="statements"/> and sequences of statements in <specref
                            ref="statements-sequence"/>.
                        </p>
                    </item>
                </ulist>
                <note>
                    Some use cases do not require that an XPL program have any inputs or outputs. It
                    is important to note that information, whether in the form or XML Infosets or
                    other forms, is not necessarily exchanged with XPL programs through pipeline
                    inputs and outputs, but possibly with other means. For example, an XML processor
                    can access information by connecting to a relational database and return an XML
                    Infoset to the XPL program.
                </note>
            </div2>
            <div2>
                <head>XML Infoset Identifiers</head>
                <termdef id="Infosetid" term="XML Infoset identifier">
                    An <term>XML Infoset identifier</term> is an identifier that refers to a
                    particular XML Infoset. Within the execution of a <specref
                    ref="statements-sequence"/>, an XML Infoset identifier may be used multiple times.
                    In that case it must always refer to the exact same XML Infoset. See <specref
                    ref="output-invariance"/>.
                </termdef>
                <p>
                    In XPL, XML Infoset identifiers are exposed by statements using the <el>id</el>
                    attribute.
                </p>
            </div2>
            <div2 id="statements">
                <head>Statements</head>
                <p>
                    An XPL program statement is an element with the following characteristics:
                </p>
                <ulist>
                    <item>
                        <p>
                            <emph>Scoped XML Infoset Identifiers.</emph> A set of XML Infoset
                            identifiers in scope at the point where the statement occurs in the XPL
                            program. The set may be empty.
                        </p>
                    </item>
                    <item>
                        <p>
                            <emph>Exposed XML Infoset Identifiers.</emph> A set of XML Infoset
                            identifiers exposed by the statement. There cannot be an intersection
                            between the scoped XML Infoset identifiers and the exposed XML Infoset
                            identifiers. For example, a statement can attempt to expose, with an
                            <el>id</el> attribute on a <el>p:output</el> element, an XML Infoset
                            identifier already present in the set of scoped XML Infoset identifiers.
                            Such a condition must raise a static error. This is referred to as the
                            <emph>no-collision rule</emph>.
                        </p>
                    </item>
<!--                    <item>-->
<!--                        <p>-->
<!--                            <emph>Post-Statement Scope.</emph> A set of XML Infoset identifiers-->
<!--                            consisting of the logical union of the scoped XML Infoset identifiers-->
<!--                            with a set of new XML Infoset identifiers defined by the statement. The-->
<!--                            post-statement scope may be identical to the scoped XML Infoset-->
<!--                            identifiers, or larger than the scoped XML Infoset identifiers. It may-->
<!--                            never be smaller.-->
<!--                        </p>-->
<!--                    </item>-->
                </ulist>
                <p>
                    The set of XML Infoset identifiers in scope for a statement of an XPL program,
                    unless specified otherwise, consists of the union of the identifiers in scope
                    for the previous statement and the identifiers exposed by the previous statement
                    in document order.
                </p>
                <p>
                    If there is no previous statement, the set of XML Infoset identifiers in scope
                    for a statement of an XPL program , unless specified otherwise, consists of the
                    set of <el>id</el> attributes of the XPL program inputs.
                </p>
                <p>
                    In this specification, a statement consists of either a <el>p:processor</el>,
                    <el>p:choose</el> or <el>p:for-each</el> element. A statement may contain
                    nested statements. For example, <el>p:choose</el> may contain one or more
                    <el>p:processor</el> elements.
                </p>
            </div2>
            <div2 id="statements-sequence">
                <head>Sequence of Statements</head>
                <termdef id="sequenceofstatements" term="sequence of statements">
                    A <term>Sequence of Statements</term> is an ordered collection of zero or more
                    statements directly contained under a parent element such as <el>p:pipeline</el>
                    or <el>p:for-each</el>. All the statements are elements sharing the same
                    parent element.
                </termdef>
                <note>
                    The term <term>sequence</term> is here used with the meaning defined in <bibref
                    ref="xpath-20"/>, as an ordered collection of zero or more items (here, of
                    elements). It does not imply that statements will be executed in the order they
                    appear.
                </note>
            </div2>
        </div1>
        <xi:include href="xpl-syntax.xml"/>
        <xi:include href="xpl-processing-model.xml"/>
        <div1 id="infoset-extraction">
            <head>Infoset Extraction</head>
            <p>
                XPL defines how an XML element <emph>el</emph> appearing anywhere in an XML Infoset
                (not necessarily as a document element) can be extracted to create a new XML Infoset
                with that element as document element.
            </p>
            <p>
                A new empty XML Infoset is created. The document information item created contains:
            </p>
            <ulist>
                <item>
                    <p>
                        A document element which contains the same information as <emph>el</emph>
                        except that: it does not have any parent element; it must contain new
                        namespace attributes information items for all the namespaces originally in
                        scope on the element but not declared on the element.
                    </p>
                </item>
                <item>
                    <p>
                        No processing instructions, comments, and document type declaration information.
                    </p>
                </item>
            </ulist>
        </div1>
        <div1 id="infoset-reference">
            <head>Infoset Reference</head>
            <p>
                Some attributes in XPL contain expressions called <emph>infoset references</emph>.
                Such expressions refer to or construct an XML Infoset and provide a way to:
            </p>
            <ulist>
                <item>
                    <p>
                        Reference external XML documents
                    </p>
                </item>
                <item>
                    <p>
                        Reference XML Infosets provided by processor outputs and pipeline inputs
                    </p>
                </item>
                <item>
                    <p>
                        Aggregate documents using the aggregate() function
                    </p>
                </item>
                <item>
                    <p>
                        Select part of a document using XPointer
                    </p>
                </item>
            </ulist>
            <p>
                The complete syntax of those expressions is described below in a Backus Nauer Form
                (BNF)-like syntax:
            </p>
            <pre>
href              ::= ( local_reference | uri_reference | aggregation | current ) [ xpointer ]
local_reference   ::= "#" id
aggregation       ::= "aggregate(" root_element_qname "," agg_parameter ")"
current           ::= "current()"
root_element_name ::= "'"  name "'"
agg_parameter     ::= href [ "," agg_parameter ]
xpointer          ::= "#xpointer(" xpath_expression ")"
            </pre>
            <div2>
                <head>Local Reference</head>
                <p>
                    A local reference starts with the <code>#</code>sign and is followed by an XML
                    Infoset identifier. It refers to either a single XML Infoset, or a sequence of
                    XML Infosets. Whenever a local reference is used, it must refer to a scoped XML
                    Infoset identifier.
                </p>
                <p>
                    A local reference evaluates to the XML Infoset or XML Infoset sequence
                    identified by the XML Infoset identifier.
                </p>
                <note>
                    The only instance where a local reference evaluates to an XML Infoset sequence
                    instead of just one XML Infoset is within the <el>p:output</el> element
                    contained in a <el>p:for-each</el> statement.
                </note>
            </div2>
            <div2>
                <head>URI Reference</head>
                <p>
                    This definition is borrowed from <bibref ref="xslt-20"/>:
                </p>
                <termdef id="uri" term="URI Reference">
                    Within this specification, the term <term>URI Reference</term>, unless otherwise
                    stated, refers to a string in the lexical space of the <code>xs:anyURI</code>
                    data type as defined in <bibref ref="xml-schema"/>.
                </termdef>
                <p>
                    Note that this is a wider definition than the definition in <bibref
                    ref="rfc2396"/>, for example it does not require non-ASCII characters to be
                    escaped.
                </p>
<!--                <p>-->
<!--                    The rules for namespace URIs are given in <bibref ref="xml-namespaces-10"/> and-->
<!--                    <bibref ref="xml-namespaces-11"/>. Those specifications deprecate the use of-->
<!--                    relative URIs as namespace URIs.-->
<!--                </p>-->
                <p>
                    URI references used to identify external resources must conform to the same
                    rules as the locator attribute (<code>href</code>) defined in section 5.4 of
                    <bibref ref="xlink"/>. If the URI reference is relative, then it is resolved
                    (unless otherwise specified) against the base URI of the containing element
                    node, according to the rules of <bibref ref="rfc2396"/>, after first escaping
                    all characters that need to be escaped to make it a valid RFC2396 URI
                    reference.
                </p>
            </div2>
            <div2>
                <head>Aggregation</head>
                <p>
                    The <code>aggregate()</code> function returns a new XML Infoset. In terms of
                    <bibref ref="data-model"/>, it can be defined as follows:
                </p>
                <pre>
fn:aggregate($root as <emph>xs:QName</emph>, $arg1 as <emph>node()*</emph>, ...) as <emph>document-node()</emph>
                </pre>
                <p>
                    The resulting XML Infoset's document information item contains:
                </p>
                <ulist>
                    <item>
                        <p>
                            A document element with the QName specified as the first argument of the
                            <code>aggregate()</code> function.
                        </p>
                    </item>
                    <item>
                        <p>
                            No processing instructions, comments, and document type declaration information.
                        </p>
                    </item>
                </ulist>
                <p>
                    The following arguments of <code>aggregate()</code> are of type
                    <code>node()*</code>, in other words a sequence of nodes as defined by <bibref
                    ref="xpath-20"/>, with the exception that attribute nodes and namespace nodes
                    are not allowed. This is consistent with the acquired Infoset defined in <bibref
                    ref="xinclude"/>. The Infoset associated with each node in the sequence is added
                    as child information items to the document element information item.
                </p>
            </div2>
            <div2>
                <head>Current XML Infoset</head>
                <p>
                    This section is relevant only if the Repeat Module is implemented.
                </p>
                <p>
                    The <code>current()</code> function evaluates to the current element of the
                    iteration sequence within a <el>p:for-each</el> statement. In terms of <bibref
                    ref="data-model"/>, it can be defined as follows:
                </p>
                <pre>
fn:current() as <emph>document-node()</emph>
                </pre>
            </div2>
            <div2>
                <head>XPointer</head>
                <p>
                    XPointer expressions must support <bibref ref="xpointer-framework"/> and
                    <bibref ref="xpointer-xmlns-scheme"/>.
                </p>
                <p>
                    They must also support a subset of <bibref ref="xpointer-xpointer-scheme"/>
                    working with standard XPath 1.0, or an extension of that subset working with
                    XPath 2.0. This means that there is no requirement for XPL to support the XPath
                    extensions proposed by <bibref ref="xpointer-xpointer-scheme"/>.
                </p>
            </div2>
        </div1>
        <div1 id="standardprocessors">
            <head>Standard XML Processor Library</head>
            <div2>
                <head>Introduction</head>
                <p>
                    XPL defines a set of standard XML processors, called the XPL standard XML
                    processor library, that must be implemented by any conformant implementation.
                    All the XML processors are identified with a <termref
                    def="qname">QName</termref> with URI
                    <code>http://www.orbeon.com/oxf/pipeline</code>. The recommended namespace
                    prefix for that QName is <code>xpl</code>.
                </p>
            </div2>
            <div2>
                <head>Identity Processor</head>
                <div3>
                    <head>Interface</head>
                    <pre>
&lt;p:processor name="xpl:identity">
    &lt;p:input name="data">...&lt;/p:input>
    &lt;p:output name="data">...&lt;/p:output>
&lt;/p:processor&gt;
                    </pre>
                    <p>
                        The Identity processor is identified by a <termref
                        def="qname">QName</termref> with URI
                        <code>http://www.orbeon.com/oxf/pipeline</code> and local name
                        <code>identity</code>. It statically exposes an input called <el>data</el>
                        and an output called <el>data</el> as well.
                    </p>
                </div3>
                <div3>
                    <head>Behavior</head>
                    <p>
                        When a read phase is performed on the <el>data</el> output, the Identity
                        processor must return the XML Infoset available on the <el>data</el> input.
                        The Identity processor should obtain the XML Infoset during the read phase
                        rather than during the initialization phase.
                    </p>
                </div3>
            </div2>
            <div2>
                <head>Pipeline Processor</head>
                <div3>
                    <head>Interface</head>
                    <pre>
&lt;p:processor name="xpl:pipeline">
    &lt;p:input name="pipeline">...&lt;/p:input>
&lt;/p:processor&gt;
                    </pre>
                    <p>
                        The Pipeline processor is identified by a <termref
                        def="qname">QName</termref> with URI
                        <code>http://www.orbeon.com/oxf/pipeline</code> and local name
                        <code>pipeline</code>. It statically exposes an input called
                        <el>pipeline</el>. It may also dynamically expose other inputs and outputs
                        as defined below.
                    </p>
                </div3>
                <div3>
                    <head>Behavior</head>
                    <p>
                        When initialized, the Pipeline processor instance must read its
                        <code>pipeline</code> input. The <code>pipeline</code> input must contain an
                        XPL program <emph>p</emph> conforming to this specification. If
                        <emph>p</emph> doesn't conform to this specification, the Pipeline processor
                        must raise a dynamic error.
                    </p>
                    <p>
                        <emph>p</emph> must not have an input called <code>pipeline</code>. If it
                        does, the Pipeline processor must raise a dynamic error.
                    </p>
                    <p>
                        The Pipeline processor must connect the inputs of <emph>p</emph> to it's
                        own inputs with the same names, as follows. For each input <emph>i</emph>
                        of <emph>p</emph> with name <code>n</code>:
                    </p>
                    <ulist>
                        <item>
                            <p>If the Pipeline processor instance has a connected input
                            <emph>j</emph> with name <code>n</code>, connect input <emph>i</emph> to
                            <emph>j</emph>.</p>
                        </item>
                        <item>
                            <p>If the Pipeline processor instance does not have such a connected
                            input, do nothing.</p>
                        </item>
                    </ulist>
                    <p>
                        Connecting two inputs here means that when the Pipeline processor instance
                        executes <emph>p</emph>, and <emph>p</emph> requests the XML Infoset
                        associated with its input <emph>i</emph>, the Pipeline processor instance
                        must obtain the XML Infoset provided to it on its input <emph>j</emph> and
                        forward it to <emph>p</emph> unmodified.
                    </p>
                    <p>
                        If the Pipeline processor instance executes <emph>p</emph> and
                        <emph>p</emph> requests an XML Infoset associated with an input
                        <emph>i</emph> with name <code>n</code> and the Pipeline processor instance
                        does not have an input <emph>j</emph> with name <code>n</code>, the Pipeline
                        processor must throw a dynamic error.
                    </p>
                     <p>
                        The Pipeline processor must connect its own outputs to <emph>p</emph>'s
                        outputs with the same name, as follows. For each of its connected output
                        <emph>o</emph> with name <code>m</code>:
                    </p>
                    <ulist>
                        <item>
                            <p>If <emph>p</emph> has an output <emph>q</emph> with name
                            <code>m</code>, connect output <emph>o</emph> to <emph>q</emph>.</p>
                        </item>
                        <item>
                            <p>If <emph>p</emph> does not have such an output, raise a dynamic
                            error.</p>
                        </item>
                    </ulist>
                    <p>
                        Connecting two outputs here means that when the Pipeline processor instance
                        is requesting the XML Infoset associated with its output <emph>o</emph> with
                        name <code>m</code>, the Pipeline processor instance must obtain the XML
                        Infoset provided by <emph>p</emph> on its output <emph>q</emph> with name
                        <code>m</code>.
                    </p>
                    <p>
                        When a read phase is started by the XPL implementation on one of the
                        Pipeline processor output <emph>o</emph> with name <code>m</code>, if it has
                        any, the Pipeline processor must execute a read phase on the XPL program's
                        output <emph>q</emph> with name <code>m</code>.
                    </p>
                </div3>
            </div2>
            <div2>
                <head>Null Serializer</head>
                <div3>
                    <head>Interface</head>
                    <pre>
&lt;p:processor name="xpl:null-serializer">
    &lt;p:input name="data">...&lt;/p:input>
&lt;/p:processor&gt;
                    </pre>
                    <p>
                        The Null Serializer processor is identified by a <termref
                        def="qname">QName</termref> with URI
                        <code>http://www.orbeon.com/oxf/pipeline</code> and local name
                        <code>null-serializer</code>. It statically exposes an input called
                        <el>data</el>.
                    </p>
                </div3>
                <div3>
                    <head>Behavior</head>
                    <p>
                        When initialized, the Null Serializer processor reads the XML Infoset
                        associated with its <code>data</code> input. It then discards it without
                        further processing.
                    </p>
                    <note>
                        Here "discarding" means that the XML Infoset is no longer required by the
                        XPL implementation. XPL implementations may however use the XML Infoset
                        read for debugging or logging purposes, for example.
                    </note>
                </div3>
            </div2>
        </div1>
        <div1 id="inclusions">
            <head>Inclusions</head>
            <p>
                XPL does not have any particular construct for inclusions or imports. However, a
                compliant XPL implementation may support a subset of <bibref ref="xinclude"/>. If it
                does, it should support at a minimum the <el>xi:include</el> element with the
                <el>parse</el> attribute either missing or set to <code>xml</code>, and without any
                other attributes. It may support more of <bibref ref="xinclude"/>. XPL does not
                specify what schemes are supported by the <el>href</el> attribute.
            </p>
            <p>
                If such support is present, <el>xi:include</el> elements may appear at any point in
                an XPL program allowed by the XInclude 1.0 specification. The resulting XML Infoset
                may have <el>xml:base</el> attributes resulting from the inclusion.
            </p>
            <p>
                Whether the XPL implementation itself supports <bibref ref="xinclude"/> or not, it
                must allow <el>xml:base</el> attributes on any of its elements, and resolve relative
                URLs according to <bibref ref="xml-base"/>.
            </p>
        </div1>
        <div1 id="conformance">
            <head>Conformance</head>
            <p>
                A conformant XPL implementation must at least implement the Basic XPL Profile
                described below. Implementors are however encouraged to implement the optional
                modules. A conformant implementation must document what modules it implements.
            </p>
            <div2>
                <head>Basic Profile</head>
                <p>
                    The Basic XPL profile requires implementing all of this specification except the
                    optional Choose, Repeat and Exception modules. The Pipeline and Processor
                    modules must be implemented.
                </p>
            </div2>
            <div2>
                <head>Full Profile</head>
                <p>
                    The full XPL profile requires implementing all of this specification including
                    the Pipeline, Processor, Choose, Repeat and Exception modules.
                </p>
            </div2>
            <div2>
                <head>XPath Support</head>
                <p>
                    In XPL, XPath is used in the following places:
                </p>
                <ulist>
                    <item>
                        <p>
                            Within XPointer's <code>xpointer()</code> scheme.
                        </p>
                    </item>
                    <item>
                        <p>
                            In the <el>test</el> attribute of the <el>p:when</el> element, if the
                            Choose module is implemented.
                        </p>
                    </item>
                    <item>
                        <p>
                            In the <el>select</el> attribute of the <el>p:for-each</el> element, if the
                            Repeat module is implemented.
                        </p>
                    </item>
                </ulist>
                <p>
                    XPL constructs using XPath may support the following version of XPath:
                </p>
                <ulist>
                    <item>
                        <p>
                            <emph>XPath 1.0.</emph> In this case, <bibref ref="xpath-10"/> must be
                            supported.
                        </p>
                    </item>
                    <item>
                        <p>
                            <emph>XPath 2.0.</emph> In this case, <bibref ref="xpath-20"/> must be
                            supported.
                        </p>
                    </item>
                </ulist>
                <p>
                    An XPL implementation must document the version of XPath used. It may
                    optionally allow users to configure which XPath version must be used when
                    executing a pipeline. XPL itself does not have any provisions to configure,
                    whether on a XPL program basis, or on a finer granularity basis, what version of
                    XPath is used.
                </p>
                <p>
                    An <bibref ref="xpath-20"/> expression must raise a dynamic error if encountered
                    by an XPL implementation supporting only <bibref ref="xpath-10"/>. Optionally,
                    the XPL implementation may raise a static error if it is able to detect the
                    error before execution.
                </p>
            </div2>
        </div1>
    </body>
    <xi:include href="xpl-appendices.xml"/>
</spec>

<!--

TODO:
    o debug attribute: proc, choose, for-each
    o schemas on p:param [now p:output / p:input]: group explanation in central location
    o improve [Relationship with the W3C Note 28 February 2002]
    o Refer to ncname definition: http://www.w3.org/TR/REC-xml-names/#NT-NCName
    o mention sub-pipelines (in xpl:pipeline?)
    o check XPath 2.0 spec and "host language"
    o p:choose: export of identifiers
    o put p:while and p:try in a "future improvements section"
    o threading: mention?
-->
