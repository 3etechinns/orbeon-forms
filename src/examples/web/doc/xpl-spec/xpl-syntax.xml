<?xml version="1.0" encoding="iso-8859-1"?>
<div1 id="syntax">
    <head>Syntax</head>
    <div2>
        <head>Introduction</head>
        <p>
            The XPL syntax is organized into modules. The Pipeline module and the Processor
            module constitute the basic framework of XPL. Other modules build on top that
            framework to provide enhanced functionality. Modules are grouped into
            profiles, see <specref ref="conformance"/>.
        </p>
    </div2>
    <div2>
        <head>Namespace</head>
        <p>
            All the elements defined by XPL must be in the
            <code>http://www.orbeon.com/oxf/xpl</code> namespace. For consistency, XPL elements
            should use the prefix <code>p</code>. This document assumes that this prefix is used.
        </p>
    </div2>
    <div2>
        <head>Pipeline Module</head>
        <div3>
            <head>The <el>p:pipeline</el> Element</head>
            <pre>
&lt;p:pipeline
    version = "1.0" &gt;
    &lt;!-- Content: (p:input*, p:output*, (p:processor | p:choose | p:for-each)*) --&gt;
&lt;/p:pipeline&gt;
            </pre>
            <p>
                An <termref def="xpl-program">XPL program</termref> always starts with a
                <el>p:pipeline</el> element. The <el>p:pipeline</el> element must be the
                root element of the XML document containing the XPL program.
            </p>
            <p>
                The <el>p:pipeline</el> element has a mandatory <el>version</el> attribute.
                The value of the version attribute must be a valid instance of the type
                <code>xs:decimal</code> as defined in <bibref ref="xml-schema"/>.
            </p>
            <p>
                For this version of XPL, the value of the <el>version</el> attribute must
                be <code>1.0</code>.
            </p>
        </div3>
        <div3>
            <head>The <el>p:input</el> Element</head>
            <pre>
&lt;p:input
    name = <emph>ncname</emph>
    id? = <emph>ncname</emph>
    schema-uri? = <emph>uri-reference</emph>
    schema-href? = <emph>uri-reference</emph> /&gt;
            </pre>
            <p>
                The <el>p:input</el> element defines exactly one XPL program input. Zero,
                one or more <el>p:input</el> or <el>p:output</el> elements can be children
                elements of the <el>p:pipeline</el> element. They must occur before any
                other element in the XPL program.
            </p>
            <p>
                The <el>name</el> attribute is mandatory. It identifies the input to
                external users of the XPL program. There cannot be two inputs with the same
                name, but it is possible to have an input and an output with the same name.
                It is a static error if two inputs have the same name.
            </p>
            <p>
                The <el>id</el> attribute is optional. It is an XML Infoset identifier that
                identifies the XML Infoset associated with the input for use within the XPL
                program. In particular, the XML Infoset may be referenced with the
                <el>href</el> attribute on <el>p:input</el> elements within
                <el>p:processor</el> elements.
            </p>
            <p>
                If the <el>id</el> attribute is missing, the XPL program cannot read the
                input. It may make sense to declare an XPL program input without reading it
                so that external users of the XPL program are aware that the input may be
                used in a future version of the program.
            </p>
            <p>
                The optional <el>schema-href</el> and <el>schema-uri</el> are documented in <bibref
                ref="schema-references-syntax"/>. They validate the XML Infoset associated with the
                input.
            </p>
        </div3>
        <div3>
            <head>The <el>p:output</el> Element</head>
            <pre>
&lt;p:output
    name = <emph>ncname</emph>
    href = <emph>infoset-reference</emph>
    schema-uri? = <emph>uri-reference</emph>
    schema-href? = <emph>uri-reference</emph> /&gt;
            </pre>
            <p>
                The <el>p:output</el> element within a <el>p:pipeline</el> element defines
                exactly one XPL program output. Zero, one or more <el>p:input</el> or
                <el>p:output</el> elements can be children elements of the
                <el>p:pipeline</el> element. They must occur before any other element in the
                XPL program.
            </p>
            <p>
                The <el>name</el> attribute is mandatory. It identifies the output to external users
                of the XPL program. There cannot be two outputs with the same name, but it is
                possible to have an output and an input with the same name. It is a static error if
                two outputs have the same name.
            </p>
            <p>
                The <el>href</el> attribute is mandatory. It identifies the XML Infoset that
                must be produced by the XPL program in association with the output.
            </p>
            <p>
                The Infoset reference contained by the <el>href</el> attribute may refer to
                any XML Infoset identifier in scope after the last statement of the XPL program.
                See <specref ref="infoset-reference"/> for the detailed syntax.
            </p>
            <p>
                The optional <el>schema-href</el> and <el>schema-uri</el> are documented in <bibref
                ref="schema-references-syntax"/>. They validate the XML Infoset associated with the
                output.
            </p>
        </div3>
        <note>
            The <el>p:input</el> and <el>p:output</el> elements can also be used within a
            <el>p:processor</el> element. In that context, they support different
            attributes and content.
        </note>
    </div2>
    <div2 id="processor-module">
        <head>Processor Module</head>
        <div3>
            <head>The <el>p:processor</el> Element</head>
            <pre>
&lt;p:processor
    name = <emph>qname</emph> &gt;
    &lt;!-- Content: (p:input* | p:output*) --&gt;
&lt;/p:processor&gt;
            </pre>
            <p>
                The <el>p:processor</el> element declares a statement that consists of a
                single XML processor instance.
            </p>
            <p>
                The set of XML Infoset identifiers exposed by a <el>p:processor</el>
                statement consists of the set of identifiers declared with the <el>id</el>
                attribute on the nested <el>p:output</el> elements, if any.
            </p>
            <p>
                The <el>name</el> attribute is mandatory. It is of type <termref
                def="qname">QName</termref>. The QName identifies a particular XML
                processor implementation. The prefix of the given QName must be in scope on
                the <el>p:processor</el> element.
            </p>
            <p>
                More than one <el>p:processor</el> elements with the same <el>name</el>
                attribute may be used in an XPL program. This translates into using several
                <termref def="xml-processor-instance">instances</termref> of the XML
                processor.
            </p>
            <note>
                The presence of a <el>p:processor</el> statement in an XML program does not
                guarantee that the processor is executed. <specref ref="processing-model"/>
                details the conditions under which a processor is executed.
            </note>
        </div3>
        <div3>
            <head>The <el>p:input</el> Element</head>
            <pre>
&lt;p:input
    name = <emph>ncname</emph>
    href? = <emph>infoset-reference</emph>
    schema-uri? = <emph>uri-reference</emph>
    schema-href? = <emph>uri-reference</emph> &gt;
    &lt;!-- Content: (embedded-infoset)? --&gt;
&lt;/p:input&gt;
            </pre>
            <p>
                The <el>p:input</el> element connects an XML processor input identified by the
                mandatory <el>name</el> attribute.
            </p>
            <p>
                If the <el>href</el> attribute is missing, there must be an embedded Infoset as
                a child of the <el>p:input</el> element. In that case, here must exactly one
                child element of the <el>p:input</el> element. If no element is present or more
                than one element is present, a static error must be raised. If the <el>href</el>
                attribute is present and the <el>p:input</el> element has one or more children,
                a static error must be raised.
            </p>
            <p>
                The Infoset reference contained by the <el>href</el> attribute may refer to
                any XML Infoset identifier in scope for the parent <el>p:processor</el>. See
                <specref ref="infoset-reference"/> for the detailed syntax.
            </p>
            <p>
                The optional <el>schema-href</el> and <el>schema-uri</el> are documented in <bibref
                ref="schema-references-syntax"/>. They validate the XML Infoset associated with the
                input.
            </p>
            <p>
                The embedded XML Infoset, if any, is constructed from the single element
                under the <el>p:input</el> element as described in <specref
                ref="infoset-extraction"/>.
            </p>
        </div3>
        <div3>
            <head>The <el>p:output</el> Element</head>
            <pre>
&lt;p:output
    name = <emph>ncname</emph>
    id = <emph>ncname</emph>
    schema-uri? = <emph>uri-reference</emph>
    schema-href? = <emph>uri-reference</emph> &gt;
&lt;/p:output&gt;
            </pre>
            <p>
                The <el>p:output</el> element within a <el>p:processor</el> element
                connects an XML processor output identified by the mandatory <el>name</el>
                attribute.
            </p>
            <p>
                The mandatory <el>id</el> element assigns an XML Infoset identifier with
                the particular output.
            </p>
            <p>
                The identifier must follow the no-collision rule. This means that the
                identifier must not be present in the set of XML Infoset identifiers in
                scope for the parent <el>p:processor</el> statement. The XPL implementation
                must raise a static error if a collision is detected.
            </p>
            <p>
                The optional <el>schema-href</el> and <el>schema-uri</el> are documented in <bibref
                ref="schema-references-syntax"/>. They validate the XML Infoset associated with the
                output.
            </p>
        </div3>
        <note>
            The <el>p:input</el> and <el>p:output</el> elements can also be used within a
            <el>p:processor</el> element. In that context, they support different
            attributes and content.
        </note>
    </div2>
    <div2>
        <head>Choose Module</head>
        <div3>
            <head>The <el>p:choose</el> Element</head>
            <pre>
&lt;p:choose
    href = <emph>infoset-reference</emph> &gt;
    &lt;!-- Content: (p:output*, p:when+, p:otherwise?) --&gt;
&lt;/p:choose&gt;
            </pre>
            <p>
                The <el>p:choose</el> element declares a statement used to execute different
                sequences of statements depending on conditions evaluated during the
                execution of the XPL program.
            </p>
            <p>
                The content of a nested <el>p:when</el> or <el>p:otherwise</el> element is
                called a <emph>branch</emph>. As detailed in the processing model section, a
                branch may or may not be executed, and one branch of a <el>p:choose</el>
                element at most is executed.
            </p>
            <p>
                Conditions are expressed by children <el>p:when</el> elements using XPath
                expressions. They are applied to an XML Infoset determined by the
                mandatory <el>href</el> attribute of the <el>p:choose</el> element.
            </p>
            <p>
                The set of XML Infoset identifiers exposed by a <el>p:choose</el> statement is
                defined by the nested <el>p:output</el> elements if any. If no <el>p:output</el>
                element is present, no XML Infoset identifier is exposed by the <el>p:choose</el>
                statement.
            </p>
        </div3>
        <div3>
            <head>The <el>p:output</el> Element</head>
            <pre>
&lt;p:output
    id = <emph>ncname</emph>
    href = <emph>infoset-reference</emph>
    schema-uri? = <emph>uri-reference</emph>
    schema-href? = <emph>uri-reference</emph> /&gt;
            </pre>
            <p>
                The <el>p:output</el> element defines what XML Infoset identifers are exposed by the
                parent <el>p:choose</el> element. Each <el>p:output</el> element must have an
                <el>id</el> attribute which defines an XML Infoset identifier to expose.
            </p>
            <p>
                The mandatory <el>href</el> attribute determines the XML Infoset exposed. The
                Infoset reference may refer to XML Infoset identifiers scoped on the parent
                <el>p:choose</el> element as well as to XML Infoset identifiers scoped in the
                branches of the <el>p:choose</el> statement.
            </p>
            <p>
                The optional <el>schema-href</el> and <el>schema-uri</el> are documented in <bibref
                ref="schema-references-syntax"/>. They validate the XML Infoset produced by the
                <el>href</el> attribute.
            </p>
        </div3>
        <div3>
            <head>The <el>p:when</el> Element</head>
            <pre>
&lt;p:when
    test = <emph>expression</emph> &gt;
    &lt;!-- Content: (p:processor | p:choose | p:for-each)* --&gt;
&lt;/p:when&gt;
            </pre>
            <p>
                A <el>p:when</el> element is always a child of a <el>p:choose</el> element. A
                sequence of multiple <el>p:when</el> elements can be present under a single
                <el>p:choose</el> element. There must be at least one <el>p:when</el> element.
            </p>
            <p>
                The mandatory <el>test</el> attribute contains an XPath expression. The result
                of the expression must be castable to a boolean result. It is applied on the XML
                Infoset provided to the parent <el>p:choose</el> element.
            </p>
            <p>
                The <el>p:when</el> element may support <bibref ref="xpath-10"/> or <bibref
                ref="xpath-20"/>. The details are specified in <specref
                ref="conformance"/>.
            </p>
        </div3>
        <div3>
            <head>The <el>p:otherwise</el> Element</head>
            <pre>
&lt;p:otherwise&gt;
    &lt;!-- Content: (p:processor | p:choose | p:for-each)* --&gt;
&lt;/p:otherwise&gt;
            </pre>
            <p>
                A <el>p:otherwise</el> element is always a child of a <el>p:choose</el> element. Any
                <el>p:when</el> sibling element must all precede a <el>p:otherwise</el> element.
                There must be exactly zero or one <el>p:otherwise</el> element child of a
                <el>p:choose</el> element.
            </p>
        </div3>
        <div3>
            <head>Branches</head>
            <p>
                Each <el>p:when</el> or <el>p:otherwise</el> branch may contain a sequence
                of statements.
            </p>
            <p>
                The set of scoped XML Infoset identifiers for the first statement in the
                branch consists of the set of scoped identifiers for the parent
                <el>p:choose</el> element.
            </p>
            <p>
                The set of scoped XML Infoset identifiers after the last statement of a branch must
                contain the XML Infoset idenfiers referred by all the <el>p:output</el> element's
                <el>href</el> attribute.
            </p>
            <p>
                A static error must be raised if this condition is not met.
            </p>
            <note>
                The no-collision rule applies for statements within a branch. In other words an XML
                Infoset identifier exposed by a statement within a branch cannot override an
                identifier scoped for the corresponding <el>p:choose</el> element.
            </note>
        </div3>
    </div2>
    <div2>
        <head>Repeat Module</head>
        <div3>
            <head>The <el>p:for-each</el> Element</head>
            <pre>
&lt;p:for-each
    href = <emph>infoset-reference</emph>
    select = <emph>expression</emph>
    schema-href? <emph>uri-reference</emph>
    schema-uri? <emph>uri-reference</emph> &gt;
    &lt;!-- Content: (p:output?, (p:processor | p:choose | p:for-each)*) --&gt;
&lt;/p:for-each&gt;
            </pre>
            <p>
                The <el>p:for-each</el> element declares a statement used to execute
                sequences of statements multiple times within the execution of a same XPL
                program.
            </p>
            <p>
                The set of exposed XML Infoset identifiers consists of the single identifier
                defined by the optional embedded <el>p:output</el> element's <el>id</el>
                attribute. If there is no embedded <el>p:output</el> attribute, the set is
                empty.
            </p>
            <p>
                The <el>p:for-each</el> element contains a sequence of statements. If an
                embedded <el>p:output</el> element is present, the sequence must
                contain at least one statement. It is a static error if this is not the
                case.
            </p>
            <p>
                The set of scoped XML Infoset identifiers before the first statement in the
                embedded sequence of statements consists of the identifiers scoped for the
                <el>p:for-each</el> element.
            </p>
            <p>
                The optional <el>schema-href</el> and <el>schema-uri</el> are documented in <bibref
                ref="schema-references-syntax"/>. They validate the XML Infoset associated with the
                <el>href</el> attribute.
            </p>
            <note>
                The no-collision rule applies for statements within a <el>p:for-each</el>
                element. In other words an XML Infoset identifier exposed within a
                <el>p:for-each</el> cannot override an identifier scoped for corresponding
                <el>p:for-each</el> element.
            </note>
        </div3>
        <div3>
            <head>The <el>p:output</el> Element</head>
            <pre>
&lt;p:output
    href = <emph>infoset-reference</emph>
    id = <emph>ncname</emph>
    schema-uri? = <emph>uri-reference</emph>
    schema-href? = <emph>uri-reference</emph> &gt;
&lt;/p:output&gt;
            </pre>
            <p>
                The <el>p:output</el> element within a <el>p:for-each</el> element exposes
                an XML Infoset identifier to statements appearing after the current
                <el>p:for-each</el> statement.
            </p>
            <p>
                The mandatory <el>id</el> element exposes an XML Infoset identifier. The
                identifier must follow the no-collision rule. This means that the identifier
                must not be present in the set of scoped XML Infoset identifiers for the
                parent <el>p:for-each</el> statement. The XPL implementation must raise a
                static error if a collision is detected.
            </p>
            <p>
                The mandatory <el>href</el> attribute determines the XML Infoset exposed.
                The Infoset reference may refer to XML Infoset identifiers scoped on the
                parent <el>p:for-each</el> element as well as to XML Infoset identifiers
                scoped after the last statement of the sequence of statements embedded
                within the <el>p:for-each</el> statement.
            </p>
            <p>
                For the second category of XML Infoset identifiers, each identifier used by
                the expression in the <el>href</el> attribute refers to a sequence of XML
                Infosets rather than a single XML Infoset as is usually the case. See
                <specref ref="for-each-execution"/>.
            </p>
            <p>
                The optional <el>schema-href</el> and <el>schema-uri</el> are documented in <bibref
                ref="schema-references-syntax"/>. They validate the XML Infoset produced by the
                <el>href</el> attribute.
            </p>
        </div3>
    </div2>
    <div2 id="schema-references-syntax">
        <head>Schema References</head>
        <p>
            Several elements support the optional <el>schema-uri</el> and <el>schema-href</el>
            attributes. The purpose of these attributes is to refer to a schema defined outside of
            the XPL program, and to use that schema to validate a particular XML Infoset.
        </p>
        <p>
            Those attributes are associated with a particular XML Infoset, depending on the element
            they are associated with.
        </p>
        <p>
            If the <el>schema-href</el> attribute is present, it must contain a URL referring to
            either an W3C XML Schema schema, or a Relax NG schema.
        </p>
        <p>
            If the <el>schema-uri</el> attribute is present, it must contain a URI identifying
            either an W3C XML Schema schema, or a Relax NG schema. For W3C Schemas, it should
            specify the namespace URI that is the target namespace of the schema. The way the
            mapping between the URI and the actual schema is done is outside the scope of XPL.
        </p>
        <p>
            If both attributes are present, a static error must be raised.
        </p>
        <p>
            The use of <el>schema-href</el> allows easily using schemas bundled with an XPL program.
            The use of <el>schema-uri</el> allows the use of URIs, commonly used with XML Schema,
            which provide a level of abstraction hiding the actual storage location of actual schema
            files.
        </p>
    </div2>
</div1>