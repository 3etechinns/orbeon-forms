<!--
    Copyright (C) 2004 Orbeon, Inc.

    The Orbeon documentation is not distributed under the LGPL license. Use of the documentation is
    subject to the following terms:

    * Conversion to other formats is allowed, but the actual content may not be altered or edited
      in any way.

    * You may create printed copies for your own personal use.

    * For all other uses, such as selling printed copies or using (parts of) the manual in another
      publication, prior written agreement from Orbeon, Inc. is required.

    Please contact Orbeon at info@orbeon.com for more information.
-->
<document xmlns:p="http://www.orbeon.com/oxf/pipeline" xmlns:xforms="http://www.w3.org/2002/xforms" xmlns:delegation="http://orbeon.org/oxf/xml/delegation" xmlns:xsi="http://www.w3.org/1999/XMLSchema-instance" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <header>
        <title>Delegation Processor</title>
    </header>
    <body>
        <section>
            <title>Introduction</title>
            <p>The delegation processor can be used to call existing
                code available as:</p>
            <ul>
                <li>a Web service</li>
                <li>an EJB</li>
                <li>a JavaBean</li>
            </ul>
        </section>
        <section>
            <title>Usage</title>
            <img print-format="pdf" src="pages/processors-delegation.png"/>
            <table ca="|l|p{0.5\textwidth}|">
                <tr>
                    <th>interface input</th>
                    <td>
		                <p>
		                	With this input you describes services that you can then call
		                	in the <code>call</code> input.
		                	You define one or more <code>service id</code>(s) and maps each one
		                    of those <code>id</code>(s) to a given Web service, EJB, or JavaBean. You also
		                    need to provide any information that the delegation processor needs to
		                    call the service: for instance a JNDI name for an EJB or a class
		                    name for a JavaBean.
		                </p>
		                <p>
		                	The interface input is the only document with information
		                    specific to the service type (EJB, Web service or JavaBean).
		                    This means that if, at some point, a service is moved from, say, a
		                    JavaBean to an EJB, only the interface will have to be modified
		                    (not the call input or data output).
		                </p>
                    </td>
                </tr>
                <tr>
                    <th>call input</th>
                    <td>
                    	A document containing <code>&lt;delegation:execute&gt;</code> elements.
                    	Each <code>&lt;delegation:execute&gt;</code> element specifies a 
						service to be called and the parameters to be sent to that service.
                    </td>
                </tr>
                <tr>
                    <th>data output</th>
                    <td>
                    	A document based on the <code>call</code> input where the
                        <code>&lt;delegation:execute&gt;</code> elements have been
                        replaced with the value returned by the service.
                    </td>
                </tr>
            </table>
        </section>
        <section>
        	<title>Calling an EJB</title>
            <p>
            	You call an EJB with:
            </p>
            <xml-source show-namespaces="false">
			    <p:processor name="oxf:delegation">
			        <p:input name="interface">
			            <config>
	                        <service id="creditcard-validation" type="stateless-ejb" 
	                        	uri="java:comp/env/ejb/creditcard-validation"/>
			            </config>
			        </p:input>
			        <p:input name="call">
			            <delegation:execute service="creditcard-validation" operation="validate">
			            	<number xsi:type="xs:string">1234123412341234</number>
			            	<type xsi:type="xs:string">visa</type>
			            </delegation:execute>
			        </p:input>
			        <p:output name="data" id="data"/>
			    </p:processor>
            </xml-source>
            <ul>
            	<li>The <code>interface</code> input declares the EJB that will be called:
	            	<ul>
	            		<li>
	            			The value of the <code>type</code> attribute must be set to 
	            			<code>stateless-ejb</code>.
            			</li>
	            		<li>
	            			The URI attribute references the JNDI name of the EJB.
            			</li>
	        		</ul>
        		</li>
        		<li>The <code>call</code> input defines the method to be called and the parameters:
        			<ul>
        				<li>
        					The <code>service</code> attribute references the service id declared
							in the <code>interface</code> input.
    					</li>
    					<li>
    						Each child element of <code>&lt;delegation:execute></code>
    						corresponds to an attribute of the method to be called. The name of
    						each element must match the attribute name, and the value in the
    						<code>xsi:type</code> attribute must match the attribute type. The
    						content of the element is the value passed to the EJB method.
						</li>
						<li>
							Note: the only two supported types are: <code>xs:string</code> and
							<code>xs:double</code>.
						</li>
        			</ul>
    			</li>
            </ul>
        </section>
        <section>
        	<title>Calling a Web Service</title>
        	<section>
        		<title>Example: RPC-Style</title>
	        	<xml-source show-namespaces="false">
				    <p:processor name="oxf:delegation">
				        <p:input name="interface">
				            <config>
				                <service id="quotes" type="webservice" style="rpc"
				                        endpoint="http://www.scdi.org/~avernet/webservice/">
				                    <operation nsuri="urn:avernet" name="getRandomQuote"
				                        encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
				                </service>
				            </config>
				        </p:input>
				        <p:input name="call">
				            <delegation:execute service="quotes" operation="getRandomQuote"/>
				        </p:input>
				        <p:output name="data" ref="data"/>
				    </p:processor>
	        	</xml-source>
        	</section>
        	<section>
        		<title>Example: Document-Style</title>
	        	<xml-source show-namespaces="false">
				    <p:processor name="oxf:delegation">
				        <p:input name="interface">
				            <config>
				                <service id="stock-quote" type="webservice" style="document"
				                    endpoint="http://ws.cdyne.com/delayedstockquote/delayedstockquote.asmx">
				                    <operation name="get-quote" soap-action="http://ws.cdyne.com/GetQuote"/>
				                </service>
				            </config>
				        </p:input>
				        <p:input name="call">
				            <delegation:execute service="stock-quote" operation="get-quote" xsl:version="2.0">
				                <m:GetQuote xmlns:m="http://ws.cdyne.com/">
				                    <m:StockSymbol><xsl:value-of select="/symbol"/></m:StockSymbol>
				                    <m:LicenseKey>0</m:LicenseKey>
				                </m:GetQuote>
				            </delegation:execute>
			            </p:input>
				        <p:output name="data" ref="data"/>
				    </p:processor>
	        	</xml-source>
        	</section>
        	<section>
        		<title>Usage</title>
        		<ul>        		
        			<li>
        				The <code>interface</code> input declares the Web service to be called:
        				<ul>
        					<li>
        						Valid values for the style attribute are <code>rpc</code>
    							and <code>document</code>. The default value if the attribute
    							is missing is <code>rpc</code>.
							</li>
							<li>
								The <code>id</code> (referenced when Web service is called in
								the <code>call</code> input) and <code>endpoint</code>
								(the SOAP endpoint) attributes are mandatory.
							</li>
							<li>
								Declaring the Web service operations is optional for document-style
								services. You only need to do so if you want to specify a SOAP action
								for a given operation.
							</li>
							<li>
								Optionally you can declare for each operation the encoding style
								(<code>encodingStyle</code> attribute) and SOAP action
								(<code>soap-action</code> attribute).
							</li>
                            <li>
                                Optionally you can declare what part of the SOAP result document is returned by
                                specifying an XPath expression in the optional <code>select</code> attribute on the
                                <code>operation</code> element.
                                If you don't specify an expression, by default when the style is RPC the
                                content of the first child element under the SOAP body is returned, and when the
                                style is document the content of the SOAP body is returned.
                            </li>
                        </ul>
    				</li>
    				<li>
    					In the <code>call</code> input:
    					<ul>
    						<li>
				                The XML fragment you specify in the <code>execute</code> element is
				                sent as is, and you are responsible of making sure that it
				                is valid according to the encoding style.
			                </li>
			                <li>
			                	Referencing a specific operation in the <code>operation</code>
			                	attribute is mandatory for RPC-style services, and is optional
			                	for document-style services (you only want to do so if you 
			                	declared specific information about the operation in the 
			                	<code>interface</code> input).
		                	</li>
	                	</ul>
	                </li>
                </ul>
            </section>
        </section>
        <!--
        <section>
        	<title>Calling a JavaBean</title>
            <p>For JavaBeans, only the name of the class needs to
                be specified, e.g.:</p>
            <xml-source show-namespaces="false">
                <config>
                    <service id="creditcard-validation" type="javabean" uri="com.example.creditcard.Validation"/>
                </config>
            </xml-source>
        </section>
        -->
    </body>
</document>
