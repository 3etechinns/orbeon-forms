<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
    Copyright (C) 2004 Orbeon, Inc.

    The Orbeon documentation is not distributed under the LGPL license. Use of the documentation is
    subject to the following terms:

    * Conversion to other formats is allowed, but the actual content may not be altered or edited
      in any way.

    * You may create printed copies for your own personal use.

    * For all other uses, such as selling printed copies or using (parts of) the manual in another
      publication, prior written agreement from Orbeon, Inc. is required.

    Please contact Orbeon at info@orbeon.com for more information.
-->
<!DOCTYPE document [
    <!ENTITY full "<td style='background: #66FF99'>Fully supported</td>">
    <!ENTITY partial "<td style='background: #99FFCC'>Partially supported</td>">
    <!ENTITY future "<td style='background: #FFCC99'>Not supported yet</td>">
    <!ELEMENT document (ANY)>
]>
<document xmlns:p="http://www.orbeon.com/oxf/pipeline" xmlns:xforms="http://www.w3.org/2002/xforms" xmlns:xxforms="http://orbeon.org/oxf/xml/xforms" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <header>
        <title>XForms</title>
    </header>
    <body>
        <section>
            <title>Scope</title>
            <p>
                Web applications use forms to collect data from users. Presentation Server form
                handling is based on <link href="http://www.w3.org/MarkUp/Forms/">XForms</link>,
                namely the <a href="http://www.w3.org/TR/xforms/">XForms 1.0 W3C
                Recommendation</a>. This section provides an introduction to XForms concepts and
                explains how to use XForms in your Presentation Server application.
            </p>
        </section>
        <section>
            <title>Introduction to XForms</title>
            <section>
                <title>Origin, Today, and Tomorrow</title>
                <p>
                    XForms has been designed by the W3C based on experience with HTML forms. It was only promoted
                    to the rank of W3C Recommendation quite recently, in October 2003. Mainstream browsers
                    (Internet Explorer, Mozilla / Firefox, Opera, Safari) do not yet support XForms natively.
                    However you can already leverage the benefits of XForms today by using a server-side XForms
                    engine like the one provided in Presentation Server. Until browsers natively support XForms,
                    the Presentation Server XForms engine will transparently generate HTML forms and perform the
                    work that would be done by an XForms-compliant browser. This way you can start leveraging
                    XForms today, be ready for upcoming XForms-compliant browsers, and work smoothly with the
                    mainstream browsers that are deployed in the marketplace.
                </p>
            </section>
            <section>
                <title>Benefits</title>
                <p>
                    Compared to HTML forms, XForms offers a higher level approach to forms. The
                    benefits are that less programming is needed (less JavaScript, and less
                    server-side programming), so forms are easier to create and modify. As an
                    illustration, let's consider two facets of XForms:
                </p>
                <ol>
                    <li>
                        <p>
                            XForms clearly defines how data entered by the end-user is collected: it
                            is stored in an XML document called the XForms <i>instance</i>, an
                            initially empty, "skeletal" XML instance document that defines the
                            structure of the data you wish to collect from the user, which is
                            afterwards filled out with information collected from the user. For
                            example, credit card information collected on a web site can be
                            structured as follows:
                        </p>
                        <xml-source>
                            <credit-card>
                                <type/>
                                <number/>
                                <expiration-month/>
                                <expiration-year/>
                            </credit-card>
                        </xml-source>
                        <p>
                            The outcome of the user filling out a form collecting this information
                            could be this complete XML document:
                        </p>
                        <xml-source>
                            <credit-card>
                                <type>visa</type>
                                <number>1234567812345678</number>
                                <expiration-month>8</expiration-month>
                                <expiration-year>2008</expiration-year>
                            </credit-card>
                        </xml-source>
                        <p>
                            An application using this data to do some processing (e.g. checking the
                            validity of the credit card) receives the above XML document. There is
                            no need to write code to go read the HTTP request parameters, or to use
                            a framework performing this task: XForms does it all.
                        </p>
                    </li>
                    <li>
                        <p>
                            More often than not, there are constraints on the data that can be
                            entered by the end-user. For instance, in the example we just
                            considered, the card number must have 16 digits and the expiration month
                            must be a number between 1 and 12. Traditionally code must be written to
                            check for those constraints. And more code must be written to handle
                            error conditions (getting back to the page displaying the form and
                            showing the appropriate error messages). All this is done is very
                            simple and declarative way with XForms. For instance, checking that the
                            expiration month is valid number between 1 and 12 can be done with:
                        </p>
                        <xml-source>
                            <bind nodeset="/credit-card/expiration-month" type="xs:integer" constraint=". >= 1 and 12 >= ."/>
                        </xml-source>
                        <p>
                            An error message can be attached to the "month" text field and if the
                            end-user enters an invalid month the XForms engine will notice that the
                            above constraint is not met and will display the error message. You do
                            not have to write any code for this to happen. We will see later how you
                            go about doing this with XForms in more details.
                        </p>
                    </li>
                </ol>
            </section>
            <section>
                <title>Processing Model</title>
                <img print-format="pdf" src="pages/reference-xforms-model-controls.png" style="clear: both; float: right"/>
                <p>
                    XForms exposes two main components that are distinct but designed to closely
                    work with one another:
                </p>
                <ul>
                    <li>
                        <b>XForms model</b> _ The XForms model defines the data that needs to be
                        captured and the constraints on this data.
                    </li>
                    <li>
                        <b>XForms controls</b> _ XForms controls are widgets, like a text field or a
                        drop down combo box. They are generally used in an XHTML page to define the
                        visual representation of a form. </li>
                </ul>
                <img print-format="pdf" src="pages/reference-xforms-operation-model.png" style="clear: both; float: right"/>
                <p>
                    At a high level, an application interacts with an end-user through the
                    following steps:
                </p>
                <ol>
                    <li>The application generates an XHTML page that contains XForms controls, and
                    provides an XForms model for that page.</li>
                    <li>The XForms engine processes the XForms controls and sends a HTML page to the
                    end-user's browser.</li>
                    <li>The end-user fills out the form.</li>
                    <li>The XForms engine creates an XML document (called the XForms instance)
                    based on the values entered by the end-user, and sends this document to the
                    application.</li>
                    <li>The application performs its business logic based in the XForms
                    instance.</li>
                </ol>
                <img print-format="pdf" src="pages/reference-xforms-operation-model.png" style="clear: both; float: right"/>
                <p>
                    As we can see, your role as the author of an Presentation Server application is:
                </p>
                <ul>
                    <li>To provide the XForms model (step 1 above).</li>
                    <li>To provide the description of the form user interface using XForms controls (step 1 above).</li>
                    <li>To respond to user actions based on the XForms instance, which contains data captured from the end-user (step 5 above).</li>
                </ul>
                <p>
                    In this chapter we will explore the first two of the three aspects above. You
                    hook-up your backend logic for a page in your application page flow. The <a href="reference-controller">Page Flow Controller</a> documentation details how
                    this is done.
                </p>
            </section>
        </section>
        <section>
            <title>XForms Model</title>
            <img src="pages/reference-xforms-credit-card-form.png" style="clear: both; float: right"/>
            <p>
                To help us in our exploration of the XForms model we consider a specific example: an
                XForms Credit Card Verifier. This example displays a simple form asking for a
                credit card number and related information to be entered, as shown on the screenshot
                to the right. When the "verify" button is pressed, the information entered by the
                end-user is validated by a set of rules and the result displayed on the "Card
                valid:" line. This example is fully implemented with 3 XML files:
            </p>
            <ul>
                <li>
                    <a href="../examples/source?src=examples/xforms/xforms-credit-card/xforms-model.xml">xforms-model.xml</a>: the XForms model</li>
                <li>
                    <a href="../examples/source?src=examples/xforms/xforms-credit-card/view.xml">view.xml</a>: the XHTML view using XForms controls</li>
                <li>
                    <a href="../examples/source?src=examples/xforms/xforms-credit-card/page-flow.xml">page-flow.xml</a>: declared the page and references the two files above</li>
            </ul>
            <p>
                We will here focus on the XForms model (xforms-model.xml) which is the most
                interesting file for this example. The XForms model does two things:
            </p>
            <ol>
                <li>It declares the XForms instance.</li>
                <li>It declares a set of rules that are attached to nodes of the XForms instance.</li>
            </ol>
            <section>
                <title>XForms Instance</title>
                <p>
                    You define the XForms instance by declaring an "empty" XForms instance document.
                    In the Credit Card Verifier the XForms instance is declared with:
                </p>
                <xml-source>
                    <xforms:instance>
                        <credit-card>
                            <type/>
                            <number/>
                            <expiration-month/>
                            <expiration-year/>
                            <verification-code/>
                            <valid/>
                            <gaga/>
                        </credit-card>
                    </xforms:instance>
                </xml-source>
                <p>
                    In most cases, the XForms instance only contains empty elements and attributes
                    that will be filled with the values entered by the end-user. When the page is
                    first loaded, the instance declared in the XForms model becomes the active
                    XForms instance. When the end-user submits the form, the values he enters in
                    the forms controls are used to fill the instance. We will see in the next
                    section how controls are bound to elements and attributes in the XForms
                    instance.
                </p>
            </section>
            <section>
                <title>Model Item Properties</title>
                <p>
                    In addition to the XForms instance, the XForms model can declare a set of
                    "rules", called "model item properties" in the XForms jargon. (We will here use
                    indifferently the terms "rules" and "model item properties".) Let's write a set
                    of rules for the above Credit Card Validation form. Specifically we want:
                </p>
                <ol>
                    <li>To check that the credit card number is a number (with only digits)</li>
                    <li>To check that the expiration month is valid (integer between 1 and 12)</li>
                    <li>To check that the expiration year is valid (4 digit number)</li>
                    <li>To display the "verification code" text field only if the card type is Visa or MasterCard</li>
                    <li>To determine, through calculation, if the credit card is valid. The result
                    of this calculation is either "true" or "false" and this value is displayed at
                    the bottom of the bottom of the form.</li>
                </ol>
                <p>
                    You describe each one of those rules with an <code>&lt;xforms:bind></code>
                    element in the XForms model. Rules apply to elements and attributes in the
                    XForms instance. You specify the elements and attributes each rule applies to
                    with an XPath expression in the mandatory <code>nodeset</code> attribute. In
                    addition to the <code>nodeset</code> attribute you want to have at least one
                    attribute specifying the essence of the rule. We will go over the exhaustive
                    list of all the possible attributes later in this section, but first let's see
                    how we can express the above rules for the Credit Card Verifier form:
                </p>
                <img src="pages/reference-xforms-type.png" style="clear: both; float: right"/>
                <ol>
                    <li>
                        <p>
                            You specify that the credit card number must be a number with:
                        </p>
                        <code>&lt;xforms:bind nodeset="/credit-card/number" type="xs:integer"/></code>
                        <p>
                            The value of the <code>type</code> attribute is a W3C XML Schema
                            simple type. You can see the list of simple types in the <a href="
                            http://www.w3.org/TR/2001/REC-xmlschema-0-20010502/#CreatDt">XML
                            Schema primer</a>. If the end-user enters an invalid credit card number
                            (i.e. not a number), an error will be displayed as shows in the
                            screenshot on the right.
                        </p>
                    </li>
                    <li>
                        <p>
                            You can also constrain the value of an element or attribute with an
                            XPath expression in the <code>constraint</code> attribute. For instance
                            you specify that the expiration month must be an integer between 1 and
                            12 with:
                        </p>
                        <code>&lt;xforms:bind nodeset="/credit-card/expiration-month"
                            constraint="../number = '' or (. castable as xs:integer and . >= 1 and 12 >= .)"/></code>
                        <p>
                            Note that we have decided here not to bother checking the expiration
                            month if no credit card number was entered. Presentation Server supports
                            XPath 2.0 expressions in the constraint attribute.
                        </p>
                    </li>
                    <li>
                        <p>
                            Similarly, you check that the expiration year is a 4 digit number with:
                        </p>
                        <code>&lt;xforms:bind nodeset="/credit-card/expiration-year"
                        constraint="../number = '' or (. castable as xs:integer and string-length(.)
                        = 4)"/></code>.
                    </li>
                    <li>
                        <p>
                            You hide the "verification code" text field for American Express cards
                            with:
                        </p>
                        <code>&lt;xforms:bind nodeset="/credit-card/verification-code"
                        relevant="../type = 'visa' or ../type = 'mastercard'"/></code>
                        <p>
                            The attribute we use here is "relevant". By default, everything is
                            relevant in the XForms instance. If a "relevant" rule is specified, the
                            XPath expression is evaluated for each node in the nodeset, and if the
                            expression returns false, then the node is not considered relevant. When
                            a node is not relevant, the corresponding widget is not displayed (more
                            on this later).
                        </p>
                    </li>
                    <li>
                        <p>
                            The content of elements and attributes are in general populated by
                            values entered by the user. But they can also be populated
                            automatically based on XPath expressions you provide. Of course, those
                            XPath expressions can use values entered by the end-user. We populate
                            the <code>&lt;valid></code> element with either "true" or "false" with:
                        </p>
                        <code>&lt;xforms:bind nodeset="/credit-card/valid" calculate="..."/></code>.
                        <p>
                            The XPath expression checking that the credit card number is valid has
                            not been included here but you can see it in the <a href="../examples/source?src=examples/xforms/xforms-credit-card/xforms-model.xml">xforms-model.xml</a>.
                        </p>
                    </li>
                </ol>
                <p>
                    Now that we have seen a few examples of model item properties, let's go over all
                    the XForms model item properties. Model item properties can essentially be used
                    for 3 purposes:
                </p>
                <table>
                    <tr>
                        <th>Validation</th>
                        <td>
                            <p>
                                The purpose is to determine if the content of an element or
                                attribute in the XForms instance is valid. Invalid values can have
                                an impact on how a form is displayed (you might want to highlight
                                errors and show some information to help the end-user to correct the
                                issue) and on page flow (maybe data should not be saved until it is
                                valid), hence the need to validate in the first place. There are 3
                                ways to validate the content of an element or attribute:
                            </p>
                            <ul>
                                <li>
                                    <p>
                                        <b>required</b> _ You can specify in the
                                        <code>required</code> attribute an XPath expression that
                                        determines if a value is required. The XPath can be as
                                        simple as <code>true()</code>, or more complex and depend on
                                        other values entered by the end-user. By default values are
                                        not required.
                                    </p>
                                </li>
                                <li>
                                    <p>
                                        <b>type</b> _ In the <code>type</code> attribute you can
                                        specify a W3C XML Schema simple type. The <code>type</code>
                                        attribute works in association with the
                                        <code>required</code> attribute: even if a type is
                                        specified, if the value is an empty string, the validity
                                        will only depend on the whether the value is required.
                                    </p>
                                    <table>
                                        <tr>
                                            <th/>
                                            <th>Required</th>
                                            <th>Not required</th>
                                        </tr>
                                        <tr>
                                            <th>Value is empty</th>
                                            <td>Invalid</td>
                                            <td>Valid</td>
                                        </tr>
                                        <tr>
                                            <th>Value is not empty</th>
                                            <td colspan="2">Validated according to<br/>specified simple type</td>
                                        </tr>
                                    </table>
                                </li>
                                <li>
                                    <p>
                                        <b>constraint</b> _ In the <code>constraint</code> you can
                                        write any XPath 2.0 expression that returns a boolean
                                        value. If false is returned, then the value is considered
                                        invalid, otherwise it is considered valid.
                                    </p>
                                </li>
                            </ul>
                        </td>
                    </tr>
                    <tr>
                        <th>Calculation</th>
                        <td>
                            <ul>
                                <li>
                                    <p>
                                        <b>calculate</b> _ The content of the element or attribute
                                        will be set to the result of the evaluation of the XPath 2.0
                                        expression in the <code>calculate</code> attribute. This
                                        way you can automatically compute some values in the XForms
                                        instance based on other values, typically entered by the
                                        end-user.
                                    </p>
                                </li>
                            </ul>
                        </td>
                    </tr>
                    <tr>
                        <th>Visibility</th>
                        <td>
                            <p>
                                By default all the XForms instance nodes are not read-only and are
                                relevant, which means that if an XForms control is bound to that
                                node (e.g. a text field), the control is displayed and is editable
                                by the end-user. You can change this by providing XPath 2.0
                                expressions in the <code>readonly</code> and <code>relevant</code>
                                attributes:
                            </p>
                            <ul>
                                <li>
                                    <p>
                                        <b>readonly</b> _ If the XPath 2.0 expression in
                                        <code>readonly</code> evaluates to true, the control will be
                                        displayed in non-editable mode. Typically, in an XHTML user
                                        interface only the current value is displayed, instead of
                                        displaying a form element, like a text field.
                                    </p>
                                </li>
                                <li>
                                    <p>
                                        <b>relevant</b> _ If the XPath 2.0 expression in
                                        <code>relevant</code> evaluates to false, the control will
                                        not be displayed at all.
                                    </p>
                                </li>
                            </ul>
                        </td>
                    </tr>
                </table>
            </section>
        </section>
        <a name="xforms-controls"/>
        <section>
            <title>XForms Controls</title>
            <section>
                <title>Controls Reference</title>
                <p>
                    XForms controls are very similar to HTML form elements: you will find text
                    fields, drop down lists, checkboxes, etc. These are the major differences
                    between HTML forms elements and XForms controls:
                </p>
                <ul>
                    <li>
                        <p>
                            The value displayed by a control comes from the content of an element or
                            attribute of the XForms instance. When you declare a control, you bind
                            it to a node of your XForms instance with an XPath-like expression in
                            the <code>ref</code> attribute. For instance you would declare a text
                            field bound to the <code>&lt;number></code> element, which a child of
                            <code>&lt;credit-card></code>, with:
                        </p>
                        <xml-source show-namespaces="false">
                            <xforms:input ref="/credit-card/number"/>
                        </xml-source>
                    </li>
                    <li>
                        <p>
                            The way a control is rendered depends on model item properties: if the
                            control is bound to an invalid node then an error can be displayed, if
                            the control is bound to a read-only node only the current value is
                            displayed and the end-user can't change it, and if the node is not
                            relevant the control isn't be displayed at all.
                        </p>
                    </li>
                </ul>
                <p>
                    The table below lists all the available XForms controls and shows for each one
                    the XML you need to use in your view, as well as an example showing that
                    control in action.
                </p>
                <table>
                    <tr>
                        <th/>
                        <th>Typical UI for control</th>
                        <th>XForms in the view</th>
                        <th>Example</th>
                    </tr>
                    <tr>
                        <th>Text field</th>
                        <td>
                            <img src="pages/reference-xforms-input.png"/>
                        </td>
                        <td>
                            <xml-source border="false" show-namespaces="false">
                                <xforms:input ref="text"/>
                            </xml-source>
                        </td>
                        <td>
                            <a href="../goto-example/xforms-text">Text Controls</a>
                        </td>
                    </tr>
                    <tr>
                        <th>Password field</th>
                        <td>
                            <img src="pages/reference-xforms-secret.png"/>
                        </td>
                        <td>
                            <xml-source border="false" show-namespaces="false">
                                <xforms:secret ref="secret"/>
                            </xml-source>
                        </td>
                        <td>
                            <a href="../goto-example/xforms-text">Text Controls</a>
                        </td>
                    </tr>
                    <tr>
                        <th>Text area</th>
                        <td>
                            <img src="pages/reference-xforms-textarea.png"/>
                        </td>
                        <td>
                            <xml-source border="false" show-namespaces="false">
                                <xforms:textarea ref="textarea"/>
                            </xml-source>
                        </td>
                        <td>
                            <a href="../goto-example/xforms-text">Text Controls</a>
                        </td>
                    </tr>
                    <tr>
                        <th>Radio buttons</th>
                        <td>
                            <img src="pages/reference-xforms-radio.png"/>
                        </td>
                        <td>
                            <xml-source border="false" show-namespaces="false">
                                <xforms:select1 ref="carrier" appearance="full">
                                    <xforms:item>
                                        <xforms:label>Fedex</xforms:label>
                                        <xforms:value>fedex</xforms:value>
                                    </xforms:item>
                                    <xforms:item>
                                        <xforms:label>UPS</xforms:label>
                                        <xforms:value>ups</xforms:value>
                                    </xforms:item>
                                </xforms:select1>
                            </xml-source>
                        </td>
                        <td>
                            <a href="../goto-example/xforms-selection">Selection Controls</a>
                        </td>
                    </tr>
                    <tr>
                        <th>Combo box</th>
                        <td>
                            <img src="pages/reference-xforms-combobox.png"/>
                        </td>
                        <td>
                            <xml-source border="false" show-namespaces="false">
                                <xforms:select1 ref="payment" appearance="minimal">
                                    <xforms:item>
                                        <xforms:label>Cash</xforms:label>
                                        <xforms:value>cash</xforms:value>
                                    </xforms:item>
                                    <xforms:item>
                                        <xforms:label>Credit</xforms:label>
                                        <xforms:value>credit</xforms:value>
                                    </xforms:item>
                                </xforms:select1>
                            </xml-source>
                        </td>
                        <td>
                            <a href="../goto-example/xforms-selection">Selection Controls</a>
                        </td>
                    </tr>
                    <tr>
                        <th>Check boxes</th>
                        <td>
                            <img src="pages/reference-xforms-checkbox.png"/>
                        </td>
                        <td>
                            <xml-source border="false" show-namespaces="false">
                                <xforms:select ref="wrapping" appearance="full">
                                    <xforms:choices>
                                        <xforms:item>
                                            <xforms:label>Hard-box</xforms:label>
                                            <xforms:value>box</xforms:value>
                                        </xforms:item>
                                        <xforms:item>
                                            <xforms:label>Gift</xforms:label>
                                            <xforms:value>gift</xforms:value>
                                        </xforms:item>
                                    </xforms:choices>
                                </xforms:select>
                            </xml-source>
                        </td>
                        <td>
                            <a href="../goto-example/xforms-selection">Selection Controls</a>
                        </td>
                    </tr>
                    <tr>
                        <th>List</th>
                        <td>
                            <img src="pages/reference-xforms-list.png"/>
                        </td>
                        <td>
                            <xml-source border="false" show-namespaces="false">
                                <xforms:select ref="taste" appearance="compact">
                                    <xforms:item>
                                        <xforms:label>Vanilla</xforms:label>
                                        <xforms:value>vanilla</xforms:value>
                                    </xforms:item>
                                    <xforms:item>
                                        <xforms:label>Strawberry</xforms:label>
                                        <xforms:value>strawberry</xforms:value>
                                    </xforms:item>
                                </xforms:select>
                            </xml-source>
                        </td>
                        <td>
                            <a href="../goto-example/xforms-selection">Selection Controls</a>
                        </td>
                    </tr>
                    <tr>
                        <th>Submit button</th>
                        <td>
                            <img src="pages/reference-xforms-submit-button.png"/>
                        </td>
                        <td>
                            <xml-source border="false" show-namespaces="false">
                                <xforms:submit>
                                    <xforms:label>Submit</xforms:label>
                                </xforms:submit>
                            </xml-source>
                        </td>
                        <td>
                            <a href="../goto-example/xforms-submit">Submit Controls</a>
                        </td>
                    </tr>
                    <tr>
                        <th>Submit link</th>
                        <td>
                            <img src="pages/reference-xforms-submit-link.png"/>
                        </td>
                        <td>
                            <xml-source border="false" show-namespaces="false">
                                <xforms:submit xxforms:appearance="link">
                                    <xforms:label>Submit</xforms:label>
                                </xforms:submit>
                            </xml-source>
                        </td>
                        <td>
                            <a href="../goto-example/xforms-submit">Submit Controls</a>
                        </td>
                    </tr>
                    <tr>
                        <th>Submit image</th>
                        <td>
                            <img src="pages/reference-xforms-submit-image.png"/>
                        </td>
                        <td>
                            <xml-source border="false" show-namespaces="false">
                                <xforms:submit xxforms:appearance="image">
                                    <xxforms:img src="images/submit.gif"/>
                                </xforms:submit>
                            </xml-source>
                        </td>
                        <td>
                            <a href="../goto-example/xforms-submit">Submit Controls</a>
                        </td>
                    </tr>
                    <tr>
                        <th>Upload</th>
                        <td>
                            <img src="pages/reference-xforms-upload-image.png"/>
                        </td>
                        <td>
                            <xml-source border="false" show-namespaces="false">
                                <xforms:upload ref="files/file[1]">
                                    <xforms:filename ref="@filename"/>
                                    <xforms:mediatype ref="@mediatype"/>
                                    <xxforms:size ref="@size"/>
                                </xforms:upload>
                            </xml-source>
                        </td>
                        <td>
                            <a href="../goto-example/xforms-upload">Upload Control</a>
                        </td>
                    </tr>
                </table>
                <p>
                    In the examples above, the labels and values for the <code>select</code> and
                    <code>select1</code> controls are declared in the control element with multiple
                    <code>&lt;xforms:item></code> elements. Alternatively the label/value pairs can
                    be pulled out from the instance, instead of being declared in XForms control.
                    As shown in the code below from the <a href="/goto-example/xforms-selection">XForms Selection Controls</a> example,
                    you do this by using the <code>&lt;xforms:itemset></code> element, instead of
                    using <code>&lt;xforms:item></code> elements:
                </p>
                <xml-source show-namespaces="false">
                    <xforms:select1 ref="document/payment" appearance="minimal">
                        <xforms:itemset nodeset="/form/data/payments/payment">
                            <xforms:label ref="@label"/>
                            <xforms:copy ref="@value"/>
                        </xforms:itemset>
                    </xforms:select1>
                </xml-source>
            </section>
            <a name="label-alert-help-hint"/>
            <section>
                <title>Label, Alert, Help, and Hint</title>
                <p>
                    Nested inside each XForms control element, you can specify additional elements
                    that can alter the way the control is displayed. The table below lists those
                    elements:
                </p>
                <table>
                    <tr>
                        <th>Label</th>
                        <td>
                            <img src="pages/reference-xforms-submit-button.png"/>
                        </td>
                        <td>
                            <p>
                                By default a label is used in submit controls, as well as the single
                                and multiple selection controls, as shown in the table above.
                            </p>
                        </td>
                    </tr>
                    <tr>
                        <th>Alert</th>
                        <td>
                            <img src="pages/reference-xforms-alert.png"/>
                        </td>
                        <td>
                            <p>
                                In each control you can specify an error message that will be
                                displayed if the value entered by the user triggers a validation
                                error.
                            </p>
                            <xml-source border="false" show-namespaces="false">
                                <xforms:secret ref="secret">
                                    <xforms:alert>Invalid password</xforms:alert>
                                </xforms:secret>
                            </xml-source>
                        </td>
                    </tr>
                    <tr>
                        <th>Hint</th>
                        <td>
                            <img src="pages/reference-xforms-hint.png"/>
                        </td>
                        <td>
                            <p>
                                You can specify a hint on each control, which is displayed in a
                                tooltip when the mouse is positioned over the control.
                            </p>
                            <xml-source border="false" show-namespaces="false">
                                <xforms:textarea ref="textarea">
                                    <xforms:hint>Enter at least 10 characters</xforms:hint>
                                </xforms:textarea>
                            </xml-source>
                        </td>
                    </tr>
                    <tr>
                        <th>Help</th>
                        <td>
                            <img src="pages/reference-xforms-help.png"/>
                        </td>
                        <td>
                            <p>
                                If you specify a help message for a control, an icon with a
                                question mark is displayed next to the control. A pop-up window will
                                display the help message when the end-user clicks on the control.
                            </p>
                            <xml-source border="false" show-namespaces="false">
                                <xforms:secret ref="secret">
                                    <xforms:help>
                                        Make sure you enter a valid password.
                                        <p>
                                            <i>The password is 42.</i>
                                        </p>
                                    </xforms:help>
                                </xforms:secret>
                            </xml-source>
                        </td>
                    </tr>
                </table>
                <p>
                    In the examples above, the text displayed is directly in the
                    <code>&lt;xforms:label></code>, <code>&lt;xforms:alert></code>,
                    <code>&lt;xforms:help></code>, or <code>&lt;xforms:hint></code> element.
                    Alternatively that text can come from the XForms instance by having a
                    <code>ref</code> attribute on any one of those elements. The <code>ref</code>
                    references a node in the instant that contains the text. This is illustrated in
                    the code below from the <a href="/goto-example/xforms-text">XForms Text
                    Controls</a> example:
                </p>
                <xml-source show-namespaces="false">
                    <xforms:secret ref="secret">
                        <xforms:alert ref="@alert"/>
                    </xforms:secret>
                </xml-source>
            </section>
            <a name="upload"/>
            <section>
                <title>Upload</title>
                <p>
                    The preferred way to handle file uploads with Presentation Server is to use
                    XForms. For this purpose, use the XForms Upload control:
                </p>
                <xml-source show-namespaces="false">
                    <xforms:upload ref="files/file[1]">
                        <xforms:filename ref="@filename"/>
                        <xforms:mediatype ref="@mediatype"/>
                        <xxforms:size ref="@size"/>
                    </xforms:upload>
                </xml-source>
                <p>
                    The relevant part of the XForms model can look like this:
                </p>
                <xml-source>
                    <files>
                        <file filename="" mediatype="" size="" xsi:type="xs:anyURI"/>
                    </files>
                </xml-source>
                <p>
                    The <code>file</code> element is the element storing the result of the file
                    upload. There are two ways of storing such a result:
                </p>
                <ul>
                    <li>As a URL, by specifying the type <code>xs:anyURI</code>.</li>
                    <li>As Base64-encoded text, by specifying the type
                    <code>xs:base64Binary</code>. Base64 is a mechanism to encode any binary data
                    using a 65-character subset of US-ASCII. Using this mechanism allows embedding
                    binary data into XML documents, at the typical cost of taking 50% more space
                    than the original binary data. For more information, please refer to the <a href="http://www.ietf.org/rfc/rfc2045.txt">RFC</a>.</li>
                </ul>
                <note>
                    It is mandatory to specify either one of <code>xs:anyURI</code> or
                    <code>xs:base64Binary</code>.
                </note>
                <p>
                    The optional <code>xforms:filename</code>, <code>xforms:mediatype</code>, and
                    <code>xxforms:size</code> (the latter being an extension) allow storing metadata
                    about an uploaded file:
                </p>
                <ul>
                    <li>
                        <code>xforms:filename</code>: stores the file name sent by the user agent</li>
                    <li>
                        <code>xforms:mediatype</code>: store the media type sent by the user agent</li>
                    <li>
                        <code>xxforms:size</code>: stores the actual size in bytes of the uploaded data</li>
                </ul>
                <p>
                    Note that the file name and the media type are provided by the user agent
                    (typically a web browser) and are not guaranteed to be correct.
                </p>
                <p>
                    The result of a file upload can look as follows when using
                    <code>xs:anyURI</code>:
                </p>
                <xml-source>
                    <file filename="photo.jpg" mediatype="image/jpeg" size="2345" xsi:type="xs:anyURI">file:/C:/Tomcat/temp/upload_00000005.tmp</file>
                </xml-source>
                <warning>
                    The URL stored as the value of the upload is temporary and only valid for the
                    duration of the current request. It is only accessible from the server side, and
                    will not be accessible from a client such as a web browser. It is not guaranteed
                    to be a <code>file:</code> URL, only that it can be read with Presentation
                    Server's <a href="processors-generators#url-generator">URL generator</a>.
                </warning>
                <p>
                    The contents of the file can be retrieved using the URL Generator. The result
                    will be an XML document containing a single root element containing the uploaded
                    file in Base64-encoded text.
                </p>
                <note>
                    Using the <code>xs:anyURI</code> type allows Presentation Server to make sure
                    the uploaded file does not have to reside entirely in memory. This is the
                    preferred method for uploading large files.
                </note>
                <p>
                    The result of a file upload can look as follows when using
                    <code>xs:base64Binary</code>:
                </p>
                <xml-source>
                    <file filename="photo.jpg" mediatype="image/jpeg" size="2345" xsi:type="xs:base64Binary">
                        /9j/4AAQSkZJRgABAQEASABIAAD/2wBDAAQDAwQDAwQEBAQFBQQFBwsHBwYGBw4KCggLEA4RERAO
                        EA8SFBoWEhMYEw8QFh8XGBsbHR0dERYgIh8cIhocHRz/2wBDAQUFBQcGBw0HBw0cEhASHBwcHBwc
                        ...
                    </file>
                </xml-source>
                <p>
                    In this case, the uploaded file is encoded an directly embedded into the XML
                    instance. This is a good method to handle small files only, because the entire
                    file is converted and stored in memory.
                </p>
            </section>
            <section>
                <title>UI Rendering</title>
                <img src="pages/home-changes-epilogue.png" style="clear: both; float: right"/>
                <p>
                    By default Presentation Server renders XForms controls into XHTML form elements
                    and generates XHTML to render alerts, hints, and help messages. This default
                    behavior helps you get started as you create your application. If you want to,
                    you can change the way rendering into XHTML is done, or even render XForms
                    controls into something other than XHTML, for instance SVG.
                </p>
                <p>
                    Rendering of XForms elements is done in an XSLT stylesheet bundled with your
                    application resources. The stylesheet file is called
                    <code>xforms-to-xhtml.xsl</code> and the diagram on the right shows how the
                    XForms output processor is called from the epilogue, and its output transformed
                    by <code>xforms-to-xhtml.xsl</code>.
                </p>
                <p>
                    Let's consider a specific example: XForms input controls are rendered to XHTML
                    with this template in <code>xforms-to-xhtml.xsl</code>:
                </p>
                <xml-source show-namespaces="false">
                    <xsl:template match="xforms:input">
                        <xhtml:input type="text" name="{xxforms:encrypt-name(@xxforms:name)}" value="{@xxforms:value}">
                            <xsl:call-template name="copy-other-attributes"/>
                        </xhtml:input>
                    </xsl:template>
                </xml-source>
                <p>
                    An XHTML input field is generated and the label is not used, even if one if
                    provided on the XForms control. Say that if a label is provided, you want to
                    display it followed by a ":", just in front of the text field. You can do this
                    by modifying the above template in <code>xforms-to-xhtml.xsl</code> with:
                </p>
                <xml-source show-namespaces="false">
                    <xsl:template match="xforms:input">
                        <xsl:if test="xforms:label">
                            <xsl:value-of select="xforms:label"/>
                            <xsl:text>: </xsl:text>
                        </xsl:if>
                        <xhtml:input type="text" name="{xxforms:encrypt-name(@xxforms:name)}" value="{@xxforms:value}">
                            <xsl:call-template name="copy-other-attributes"/>
                        </xhtml:input>
                    </xsl:template>
                </xml-source>
            </section>
        </section>
        <section>
            <title>XForms Repeat</title>
            <p>
                The XForms repeat module lets you easily create pages where XForms controls are
                repeated, like an invoice made of invoice lines (with a description, unit price,
                quantity), where new lines can be added, and existing lines can be edited or
                deleted. Presentation Server supports the following elements in the XForms repeat
                module:
                <code>repeat</code>, <code>itemset</code>, <code>insert</code>, and
                <code>delete</code>.
            </p>
            <img src="pages/reference-xforms-repeat.png" style="clear: both; float: right; margin: 1em"/>
            <p>
                The <a href="/goto-example/xforms-ubl">UBL Order</a> example illustrates this
                scenario. See below a portion of the UBL example view that shows how
                <code>&lt;xforms:repeat></code> is being used. In this example, a line in an HTML
                table is generated for each order line in the XForms instance. As shown on the
                screenshot on the right, on each line of the HTML table, two controls are generated:
                a text field, and a "remove" button. The <code>&lt;xforms:submit></code> button
                contains an element <code>&lt;xforms:delete></code>: this is an XForms actions,
                which we will cover in the next section.
            </p>
            <xml-source show-namespaces="false">
                <xforms:repeat nodeset="order:Order/cat:OrderLine" id="lineSet">
                    <xhtml:tr>
                        <xhtml:td>
                            <xforms:input ref="cat:Item/cat:Description"/>
                        </xhtml:td>
                        <xhtml:td align="center">
                            <xforms:submit xxforms:appearance="image">
                                <xxforms:img src="/images/remove.png"/>
                                <xforms:label/>
                                <xforms:delete nodeset="/form/order:Order/cat:OrderLine" at="index('lineSet')"/>
                            </xforms:submit>
                        </xhtml:td>
                    </xhtml:tr>
                </xforms:repeat>
            </xml-source>
            <p>
                
            </p>
            <p>

            </p>
        </section>
        <section>
            <title>XForms Actions</title>
            <p>
                The XForms specification focuses on the page view (by providing XForms controls) and
                how the view interacts with the page model (by defining the XForms instance). You
                typically implement the page model as a pipeline that receives the XForms instance
                in input, and you can do anything you want in that pipeline, like querying a
                database based on values entered by the end-user, or modifying the XForms instance
                (see the <a href="reference-controller">Page Flow Controller reference
                documentation</a> for more information on this).
            </p>
            <p>
                In certain cases, you want to perform very simple operations on the XForms instance
                when certain buttons are pressed by the end-users. Instead of doing this in the
                page model, XForms provides you with a way to describe those simple operations
                directly in the view with XForms actions. We go over the available XForms actions in
                the next few sections.
            </p>
            <section>
                <title>Set Value Action</title>
                <p>
                    When you have more than one XForms submit control (i.e. button, image, or link)
                    on the same page you might be interested in knowing what button was pressed by
                    the end-user. To do so, you can tell the XForms engine to set values in the
                    XForms instance when a submit control is activated with an
                    <code>&lt;xforms:setvalue></code> element child of the corresponding
                    <code>&lt;xforms:submit></code> element. The <a href="../goto-example/xforms-submit">XForms Submit Example</a> illustrates
                    this. For instance, the content of the <code>&lt;clicked></code> and
                    <code>&lt;taste></code> elements are set with:
                </p>
                <xml-source>
                    <xforms:submit>
                        <xforms:label>Submit</xforms:label>
                        <xforms:setvalue ref="clicked">button</xforms:setvalue>
                        <xforms:setvalue ref="taste">vanilla</xforms:setvalue>
                    </xforms:submit>
                </xml-source>
                <p>
                    There are two variations of <code>&lt;xforms:setvalue></code>. The first one,
                    illustrated above, specifies the value as a literal enclosed in the
                    <code>&lt;xforms:setvalue></code> element. The second possibility consists of
                    using the <code>value</code> attribute: the content of the attribute is an XPath
                    expression evaluated in the context of the XForms instance, and the content of
                    the node pointed to by the <code>ref</code> attribute will be set with the
                    result of the XPath expression provided in the <code>value</code> attribute.
                </p>
            </section>
            <section>
                <title>Insert Action</title>
                <p>
                    The Insert and Delete actions are typically used in conjunctions with XForms
                    repeat: when you create a page with a repeating structure (e.g. purchase order
                    lines) you typically want to enable the end-user to insert a new line, and to
                    delete existing lines. The annotated screenshot of the <a href="/goto-example/xforms-ubl">UBL Order</a> example shows which submit
                    controls are implemented with XForms insert and XForms delete.
                </p>
                <img src="pages/reference-xforms-insert-delete.png"/>
                <p>
                    The XForms insert action creates a copy of the last element in a node set and
                    inserts the copy in the node set where specified. Note that the copy can be
                    inserted wherever you want in the node set, but that it is always the last
                    element in the node set that gets copied.
                </p>
                <p>
                    As shown in the example below, you specify the node set to operate on with an
                    XPath expression in the <code>nodeset</code> attribute, the insertion point by
                    pointing to an existing element with the <code>at</code> attribute, and declare
                    if you want the insertion to be done after of before that element with the
                    <code>position</code> attribute. The value of the <code>at</code> attribute is
                    an XPath expression that returns an element position, like <code>last()</code>
                    or <code>4</code>. Valid values for the <code>position</code> attribute are
                    <code>before</code> and <code>after</code>.
                </p>
                <xml-source show-namespaces="false">
                    <xforms:submit xxforms:appearance="button">
                        <xforms:label>Insert new line</xforms:label>
                        <xforms:insert nodeset="/form/order:Order/cat:OrderLine" at="last()" position="after"/>
                    </xforms:submit>
                </xml-source>
            </section>
            <section>
                <title>Delete Action</title>
                <p>
                    The XForms delete action deletes an element in a node set. As shown in the
                    example below you specify the node set to operate on with an XPath expression in
                    the <code>nodeset</code> attribute and the position of the element to delete
                    with the <code>at</code> attribute. If you wanted to create a submit control
                    that always deletes the second element in the node set, you would have
                    <code>at="2"</code>. In most cases however, you want to enable the end-user to
                    delete any displayed line. To that effect, you provide a submit control on each
                    line in the view which would delete the corresponding element in the instance,
                    as we did on the UBL example shown above.
                </p>
                <p>
                    Even if multiple lines are displayed in the UI, you only have one submit
                    control element in the view, inside an XForms repeat. To refer to the "current
                    line" use the <code>index()</code> function in the <code>at</code> attribute.
                    The <code>index()</code> function takes one attribute of type
                    <code>xs:string</code>, which is a reference to a "repeat id". Repeat ids are
                    declared with the <code>id</code> attribute on the
                    <code>&lt;xforms:repeat></code> element. In the snippet below taken from the <a href="/goto-example/xforms-ubl">UBL Order example</a>, with
                    <code>at="index('lineSet')"</code> we refer to the position of the current line
                    in the XForms repeat with an <code>id="lineSet"</code> attribute. Repeat ids
                    become particularly important when you have nested repeats, as shown in the <a href="/goto-example/xforms-repeat">XForms repeat example</a>.
                </p>
                <p>
                    Note that when you reference a repeat id with the <code>index()</code> function
                    in XForms actions, the element for that action must be nested in the XForms
                    repeat element that declares the references id.
                </p>
                <xml-source show-namespaces="false">
                    <xforms:repeat nodeset="order:Order/cat:OrderLine" id="lineSet">
                        <comment>... other XForms controls showing order line ...</comment>
                        <xforms:submit>
                            <xforms:label>Delete line</xforms:label>
                            <xforms:delete nodeset="/form/order:Order/cat:OrderLine" at="index('lineSet')"/>
                        </xforms:submit>
                    </xforms:repeat>
                </xml-source>
            </section>
            <section>
                <title>Message Action</title>
                <p>
                    The XForms message action displays a message to the user. Presentation Server being a server-side
                    XForms implementation, it uses the Javascript <code>alert()</code> function to pop-up a modal dialog box to the
                    user.
                    <img print-format="pdf" src="pages/reference-xforms-message.png" style="clear: both; float: right"/>
                </p>
                <p>
                    The message action is supported in <code>xforms:submit</code> elements. Typically, the content of
                    the <code>message</code> element is the message to render. It can also come from the binding attributes
                    (<code>ref</code> or <code>bind</code>), or from the linking attribute (<code>src</code>). The order of preference
                    is the following:
                    <ul>
                        <li>Binding attributes</li>
                        <li>Linking attribute</li>
                        <li>Inline text</li>
                    </ul>
                </p>
                <note>
                    <ul>
                        <li>Due to browsers limitation, the only <code>level</code> of the message is <code>modal</code>. This attribute
                            is optional.</li>
                        <li>When using the linking attribute (<code>src</code>, the value must be an absolute URL, starting with
                        <code>oxf:</code>, <code>http:</code> or other supported protocols.</li>
                    </ul>
                </note>
                <xml-source show-namespaces="false">
                    <xforms:submit>
                        <xforms:label>Submit</xforms:label>
                        <xforms:message ref="taste"/>
                    </xforms:submit>
                </xml-source>
            </section>
        </section>
        <section>
            <title>
                Extensions
            </title>
            <p>
                These controls are not part of the XForms specification and consequently are in the
                <code>xxforms</code> namespace.
            </p>
            <section>
                <anchor id="conditionals"/>
                <title>Conditionals</title>
                <p>
                    Two controls provide a mechanism to selectively enable markup and other XForms controls depending of
                    the values stored in the XForms instance. The syntax is modeled after the XSLT language:
                    <code>if</code> and <code>choose/when/otherwise</code>.
                </p>
                <note>
                    The <code>test</code> attribute must contain an XPath expression to be evaluated against the current instance.
                    Expressions  not starting with a '/' are considered relative to the nearest <code>xforms:group</code>.
                </note>
                <p>
                    <ul>
                        <li>
                            <p>
                                <code>xxforms:if</code> _ Enables the content if, and only if the XPath expression contained
                                in the <code>test</code> attribute evaluates to true.
                            </p>
                            <p>
                                In the following example, the input control is rendered only if the expression <code>/form/a = '1'</code>
                                is true.
                                <xml-source>
                                    <xforms:group ref="/form">
                                        <xxforms:if test="a = '1'">
                                            <xforms:input ref="b"/>
                                        </xxforms:if>
                                    </xforms:group>
                                </xml-source>
                            </p>
                        </li>
                        <li>
                            <p>
                                <code>xxforms:choose</code> _ Contains a sequence of at least one <code>xxforms:when</code>
                                element, optionnally followed by a <code>xxforms:otherwise</code>. Each <code>xxforms:when</code>
                                which <code>test</code> attribute evaluate to true is enabled. If all evaluate to false, the
                                <code>xxforms:otherwise</code> content is enabled.
                            </p>
                            <p>
                                In the following example show a simple <code>xxforms:choose</code> to render a different XForms control
                                depending of the value of the <code>/form/a</code> instance element.
                                <xml-source>
                                    <xforms:group ref="/form">
                                        <xxforms:choose>
                                            <xxforms:when test="a = '1'">
                                                <xforms:input ref="b"/>
                                            </xxforms:when>
                                            <xxforms:when test="b = '2'">
                                                <xforms:input ref="c"/>
                                            </xxforms:when>
                                            <xxforms:otherwise>
                                                <xforms:input ref="d"/>
                                            </xxforms:otherwise>
                                        </xxforms:choose>
                                    </xforms:group>
                                </xml-source>
                            </p>
                        </li>
                    </ul>
                </p>
            </section>
            <section>
                <title>Hidden Fields</title>
                <p>
                    In certain rare situations, you may want to generate hidden form fields in an
                    HTML page. In HTML, this is done with the following tags:
                </p>
                <xml-source>
                    <input type="hidden"/>
                </xml-source>
                <p>
                    Hidden HTML fields are not visible to the end user, but their value can be set
                    for example by JavaScript code embedded in the page. There is no standard XForms
                    control for hidden fields. Presentation Server provides a control as an XForms
                    extension:
                </p>
                <xml-source>
                    <xxforms:hidden ref="..."/>
                </xml-source>
                <p>
                    To set the value of a hidden field from your own JavaScript, you need to be able
                    to reference the hidden form element. Presentation Server automatically assigns
                    an opaque name to each form element. This name is used internally by
                    Presentation Server to repopulate the XForms instance upon form submission. This
                    means that you cannot assign your own name to a form element. Instead you
                    should use the HTML <code>id</code> attribute, and reference the field in
                    JavaScript by that identifier. You assign an identifier to the hidden XForms
                    control with:
                </p>
                <xml-source show-namespaces="false">
                    <xxforms:hidden ref="..." xhtml:id="my-id"/>
                </xml-source>
                <p>
                    Then you can reference the form control in JavaScript with
                    <code>document.getElementById('my-id')</code> (<a href="
                    http://www.mozilla.org/docs/dom/domref/dom_doc_ref48.html">more information on
                    getElementById</a>).
                </p>
            </section>
        </section>
        <section>
            <title>Conformance</title>
            <table>
                <tr>
                    <th colspan="3">XForms Specification Section</th>
                    <th>Comment</th>
                    <th>Conformance</th>
                </tr>
                <tr>
                    <td rowspan="4"><a href="http://www.w3.org/TR/xforms/slice2.html">2. Introduction to XForms</a></td>
                    <td colspan="2"><a href="http://www.w3.org/TR/xforms/slice2.html#concepts-xhtml">2.1 An Example</a></td>
                    <td/>
                    &full;
                </tr>
                <tr>
                    <td colspan="2"><a href="http://www.w3.org/TR/xforms/slice2.html#concepts-xml-instance-data">2.2 Providing XML Instance Data</a></td>
                    <td/>
                    &full;
                </tr>
                <tr>
                    <td colspan="2"><a href="http://www.w3.org/TR/xforms/slice2.html#concepts-model">2.3 Constraining Values</a></td>
                    <td>
                        Data entered by the user can be checked by specifying a schema in the XForms
                        model (the schema is then used to validate the instance), or by declaring a
                        <code>relevant</code>, <code>constraint</code>, or <code>type</code> model
                        item property in the XForms model. However, it is not yet possible to have
                        an inline schema in the XForms model, and reference a type declared in this
                        schema in a <code>type</code> model item property.
                        
                        <p>
                            [RFE <a href="http://tinyurl.com/5cavs">1076200</a>]<br/>
                            [RFE <a href="http://tinyurl.com/63ya2">1076207</a>]
                        </p>
                    </td>
                    &partial;
                </tr>
                <tr>
                    <td colspan="2"><a href="http://www.w3.org/TR/xforms/slice2.html#concepts-multiple">2.4 Multiple Forms per Document</a></td>
                    <td>
                        You can have multiple forms in a given page; however you can only have one
                        XForms model per page. If you have multiple forms on the same page, all the
                        controls on the page will be bound to the nodes in the same XForms instance.
                        
                        <p>
                            [RFE <a href="http://tinyurl.com/4jbd7">1076212</a>]<br/>
                            [RFE <a href="http://tinyurl.com/3py3m">1076217</a>]
                        </p>
                    </td>
                    &partial;
                </tr>
                <tr>
                    <td rowspan="12"><a href="http://www.w3.org/TR/xforms/slice3.html">3. Document Structure</a></td>
                    <td colspan="2"><a href="http://www.w3.org/TR/xforms/slice3.html#structure-namespace">3.1 The XForms Namespace</a></td>
                    <td/>
                    &full;
                </tr>
                <tr>
                    <td rowspan="5"><a href="http://www.w3.org/TR/xforms/slice3.html#structure-attrs">3.2 XForms Core Attribute Collections</a></td>
                    <td><a href=">http://www.w3.org/TR/xforms/slice3.html#structure-attrs-common">3.2.1 Common Attributes</a></td>
                    <td/>
                    &full;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/xforms/slice3.html#structure-attrs-link">3.2.2 Linking Attributes</a></td>
                    <td>[RFE <a href="http://tinyurl.com/4xj6p">1076243</a>]</td>
                    &future;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/xforms/slice3.html#structure-attrs-single-node">3.2.3 Single-Node Binding Attributes</a></td>
                    <td>
                        Only the <code>ref</code> attribute is supported. The <code>bind</code> and
                        <code>model</code> attributes are not supported.
                    
                        <p>
                            [RFE <a href="http://tinyurl.com/6k68e">1059115</a>]<br/>
                            [RFE <a href="http://tinyurl.com/4jbd7">1076212</a>]
                        </p>
                    </td>
                    &partial;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/xforms/slice3.html#structure-attrs-nodeset">3.2.4 Node-Set Binding Attributes</a></td>
                    <td>
                        Only the <code>nodeset</code> attribute is supported. The <code>bind</code> and
                        <code>model</code> attributes are not supported.
                    
                        <p>
                            [RFE <a href="http://tinyurl.com/6k68e">1059115</a>]<br/>
                            [RFE <a href="http://tinyurl.com/4jbd7">1076212</a>]
                        </p>
                    </td>
                    &partial;
                </tr>
                <tr>    
                    <td><a href="http://www.w3.org/TR/xforms/slice3.html#structure-attrs-mip">3.2.5 Model Item Property Attributes</a></td>
                    <td>
                        Model item properties are supported on the <code>&lt;xforms:bind></code>
                        elements but not on XForms controls. For details on support for individual
                        model item properties, see section 6.1.
                        
                        <p>[RFE <a href="http://tinyurl.com/4fvy3">1076359</a>]</p>
                    </td>
                    &partial;
                </tr>
                <tr>
                    <td rowspan="4"><a href="http://www.w3.org/TR/xforms/slice3.html#structure-abstract">3.3 The XForms Core Module</a></td>
                    <td><a href="http://www.w3.org/TR/xforms/slice3.html#structure-model">3.3.1 The model Element</a></td>
                    <td>
                        The <code>&lt;xforms:model></code> element cannot be used in a view, 
                        the <code>functions</code> attribute is not supported and it is not possible 
                        to reference multiple schemas with the <code>schema</code> attribute (only
                        one schema is supported.
                        
                        <p>
                            [RFE <a href="http://tinyurl.com/3py3m">1076217</a>]<br/>
                            [RFE <a href="http://tinyurl.com/5vnrw">1076372</a>]<br/>
                            [RFE <a href="http://tinyurl.com/6dws7">1076373</a>]
                        </p>
                    </td>
                    &partial;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/xforms/slice3.html#structure-model-instance">3.3.2 The instance Element</a></td>
                    <td/>
                    &full;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/xforms/slice3.html#structure-model-submission">3.3.3 The submission Element</a></td>
                    <td>
                        Only the <code>method</code>, <code>action</code>, and 
                        <code>encoding</code> attributes are supported. See section 11
                        for more details on the submission mechanism.
                        
                        <p>
                            [RFE <a href="http://tinyurl.com/3py3m">1076217</a>]<br/>
                            [RFE <a href="http://tinyurl.com/45mh6">1076380</a>]<br/>
                            [RFE <a href="http://tinyurl.com/4qljg">1076381</a>]
                        </p>
                    </td>
                    &partial;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/xforms/slice3.html#structure-bind-element">3.3.4 The bind Element</a></td>
                    <td>
                        The <code>id</code> attribute on <code>&lt;xforms:bind></code> is
                        not supported.
                        
                        <p>[RFE <a href="http://tinyurl.com/6k68e">1059115</a>]</p>
                    </td>
                    &partial;
                </tr>
                <tr>
                    <td colspan="2"><a href="http://www.w3.org/TR/xforms/slice3.html#module-mustUnderstand">3.4 The XForms MustUnderstand Module</a></td>
                    <td>
                        <p>[RFE <a href="http://tinyurl.com/6exyy">1076389</a>]</p>
                    </td>
                    &future;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/xforms/slice3.html#module-extension">3.5 The XForms Extension Module</a></td>
                    <td><a href="http://www.w3.org/TR/xforms/slice3.html#structure-extension">3.5.1 The extension Element</a></td>
                    <td>
                        The <code>&lt;extension></code> element can be used by a host language.
                        Presentation Server does not have any contraint on the host language
                        and since no language levarages this element, its use is forbidden at
                        this point. To adhere more closely to specification, the RFE below
                        asks for this element to be authorized and just ignored. 
                        
                        <p>[RFE <a href="http://tinyurl.com/4sxtp">1076393</a>]</p>
                    </td>
                    &partial;
                </tr>
                <tr>
                    <td colspan="3"><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice4.html">4 Processing Model</a></td>
                    <td>
                        <p>
                            Events are not supported. This means that it is not possible to
                            trigger the execution of an action (e.g. display a message dialog, or
                            set the value of a node in the instance to a certain value) when a
                            certain event occurs (e.g. the user changes the selected item in a combo
                            box, or enters an invalid value in a text field).
                        </p>
                        <p>
                            Even though events are not supported, it is still possible to
                            implement the same functionality on the server-side with Presentation
                            Server. The main drawback is that a round-trip to the server is then
                            required.
                        </p>
                        <p>
                            Let's look at an example. Consider a page with 2 controls: a combo box
                            and a text field. You want to display or hide a text field depending on
                            the value selected by the end-user in the combo box. When the end-user
                            changes the selection through the combo box, the instance gets updated
                            with the newly selected value. A <code>relevant</code> model item
                            property determines if the text field is to be displayed based the value
                            selected in the combo box.
                        </p>
                        <p>
                            With events, you can generate an <code>xforms-refresh</code> event when
                            the combo box selected value changes, which will reevaluate the
                            <code>relevant</code> model item property and appropriately hide or
                            display the text field.
                        </p>
                        <p>
                            Without event (in the current version of Presentation Server), you
                            attach to the combo box JavaScript that submits the form when the
                            selected value changes. On the server-side the instance gets updated and
                            the text field gets displayed or not accordingly. The main drawback here
                            is that a round-trip to the server is required.
                        </p>
                    </td>
                    &future;
                </tr>
                <tr>
                    <td rowspan="5"><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice5.html">5 Datatypes</a></td>
                    <td colspan="2"><a href="5.1 XML Schema Built-in Datatypes">5.1 XML Schema Built-in Datatypes</a></td>
                    <td>
                        The specification indicated that XForms supports all XML Schema datatypes
                        except for <code>xsd:duration</code>, <code>xsd:ENTITY</code>,
                        <code>xsd:ENTITIES</code>, and <code>xsd:NOTATION</code>. Presentation
                        Server supports all XML Schema datatypes, including those.

                        <p>[RFE <a href="http://tinyurl.com/49wje">1078077</a>]</p>
                    </td>
                    &partial;
                </tr>
                <tr>
                    <td rowspan="4"><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice5.html#datatypes-xforms">5.2 XForms Datatypes</a></td>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice5.html#dt-listItem">5.2.1 xforms:listItem</a></td>
                    <td rowspan="4">
                        XForms-specific datatypes are not supported. However you can use all the XML
                        Schema built-in datatypes.

                        <p>[RFE <a href="http://tinyurl.com/5z9zs">1078089</a>]</p>
                    </td>
                    &future;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice5.html#dt-listItems">5.2.2 xforms:listItems</a></td>
                    &future;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice5.html#dt-dayTimeDuration">5.2.3 xforms:dayTimeDuration</a></td>
                    &future;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice5.html#dt-yearMonthDuration">5.2.4 xforms:yearMonthDuration</a></td>
                    &future;
                </tr>
                <tr>
                    <td rowspan="8"><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice6.html">6 Model Item Properties</a></td>
                    <td rowspan="7"><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice6.html#model-xformsconstraints">6.1 Model Item Property Definitions</a></td>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice6.html#model-prop-type">6.1.1 The type Property</a></td>
                    <td>
                        In Presentastion Server no error is triggered if the same model item
                        property is set twice on the same node. Also the inheritace rules for 
                        model item properties are not supported. This applies to all the model item
                        properties (section 6.1).

                        <p>
                            [RFE <a href="http://tinyurl.com/48eb9">1078088</a>]<br/>
                            [RFE <a href="http://tinyurl.com/4krk7">1078545</a>]
                        </p>
                    </td>
                    &partial;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice6.html#model-prop-readOnly">6.1.2 The readonly Property</a></td>
                    <td>
                        The default value for the <code>readonly</code> property is always
                        <code>false</code> (it should be <code>true</code> when a
                        <code>calculate</code> property is specified).

                        <p>[RFE <a href="http://tinyurl.com/5528q">1078092</a>]</p>
                    </td>
                    &partial;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice6.html#model-prop-required">6.1.3 The required Property</a></td>
                    <td>
                        Presentation Server does check that required elements do not have a 
                        <code>xsi:nil="true"</code> attribute.
                        
                        <p>[RFE <a href="http://tinyurl.com/6m4kq">1078528</a>]</p>
                    </td>
                    &partial;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice6.html#model-prop-relevant">6.1.4 The relevant Property</a></td>
                    <td>
                        When <code>required="true()"</code> and <code>relevant="false()"</code>
                        for a given node, and the node is empty, the engine should not
                        report this as an error.
                    
                        <p>[RFE <a href="http://tinyurl.com/3mkyx">1078552</a>]</p>
                    </td>
                    &partial;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice6.html#model-prop-calculate">6.1.5 The calculate Property</a></td>
                    <td/>
                    &partial;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice6.html#model-prop-validate">6.1.6 The constraint Property</a></td>
                    <td/>
                    &partial;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice6.html#model-prop-p3ptype">6.1.7 The p3ptype Property</a></td>
                    <td>
                        The model item property is not supported.

                        <p>[RFE <a href="http://tinyurl.com/489st">1078562</a>]</p>
                    </td>
                    &future;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice6.html#model-using">6.2 Schema Constraints</a></td>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice6.html#model-using-atomic">6.2.1 Atomic Datatype</a></td>
                    <td>
                        Checking the type of an element based on the <code>xsi:type</code>
                        attribute on that element in the instance is not supported.

                        <p>[RFE <a href="http://tinyurl.com/6lvwk">1078567</a>]</p>
                    </td>
                    &partial;
                </tr>
                <tr>
                    <td rowspan="25"><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice7.html">7 XPath Expressions in XForms</a></td>
                    <td colspan="2"><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice7.html#expr-datatypes">7.1 XPath Datatypes</a></td>
                    <td/>
                    &full;
                </tr>
                <tr>
                    <td colspan="2"><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice7.html#expr-hasfeature">7.2 Feature string for the hasFeature method call</a></td>
                    <td rowspan="2">
                        <p>
                            Exposing the instance with the DOM interface is not mandated by the
                            specification. In Presentation Server the instance is not exposed through 
                            the DOM API, consequently the <code>hasFeature</code> method and all the
                            instance data methods cannot be used.
                        </p>
                        <p>
                            In Presentation Server, the model item properties computed by the XForms
                            engine (validity, type, ...) for the content of an element are exposed
                            to the user through attributes in the <code>http://orbeon.org/oxf/xml/xforms</code>
                            namespace, usually using the prefix <code>xxforms</code>.
                        </p>
                        <p>[RFE <a href="http://tinyurl.com/5cxbg">1008413</a>]</p>
                    </td>
                    &full;
                </tr>
                <tr>
                    <td colspan="2"><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice7.html#expr-instance">7.3 Instance Data</a></td>
                    &full;
                </tr>
                <tr>
                    <td colspan="2"><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice7.html#expr-eval">7.4 Evaluation Context</a></td>
                    <td/>
                    &full;
                </tr>
                <tr>
                    <td rowspan="5"><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice7.html#expr-binding-expression">7.5 Binding Expressions</a></td>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice7.html#expr-dynamic-dependency">7.5.1 Dynamic Dependencies</a></td>
                    <td>
                        According to the specification XPath expressions that create dynamic 
                        dependencies should not be allowed as binding expression. Presentation 
                        Server does not enforce this restriction, and any valid XPath 
                        expression can be used as a binding expression.
                        
                        <p>[RFE <a href="http://tinyurl.com/6x8r5">1078655</a>]</p>
                    </td>
                    &partial;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice7.html#expr-model-binding-expression">7.5.2 Model Binding Expressions</a></td>
                    <td/>
                    &full;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice7.html#expr-ui-binding-expression">7.5.3 UI Binding Expressions</a></td>
                    <td/>
                    &full;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice7.html#ui-binding-foreign">7.5.4 UI Binding in other XML vocabularies</a></td>
                    <td/>
                    &full;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice7.html#ui-binding-examples">7.5.5 Binding Examples</a></td>
                    <td/>
                    &full;
                </tr>
                <tr>
                    <td colspan="2"><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice7.html#expr-lib">7.6 XForms Core Function Library</a></td>
                    <td/>
                    &full;
                </tr>
                <tr>
                    <td rowspan="2"><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice7.html#expr-lib-bool">7.7 Boolean Functions</a></td>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice7.html#fn-boolean-from-string">7.7.1 The boolean-from-string() Function</a></td>
                    <td/>
                    &full;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice7.html#fn-if">7.7.2 The if() Function</a></td>
                    <td>
                        The <code>if</code> function defined by XForms clashes with the 
                        <code>if</code> keyword of XPath 2.0. We recommend you use the XPath 
                        2.0 <code>if</code> statement instead of the function. In case you want 
                        to use the XForms function, it is available under the 
                        name <code>xfif</code>. It is not planned to support the XForms 
                        <code>if</code> function in future versions of Presentation Server, as 
                        the XForms specification is expected to use XPath 2.0 in future version 
                        and consequently to deprecate the <code>if</code> function.
                    </td>
                    &partial;
                </tr>
                <tr>
                    <td rowspan="5"><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice7.html#expr-lib-num">7.8 Number Functions</a></td>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice7.html#fn-avg">7.8.1 The avg() Function</a></td>
                    <td/>
                    &full;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice7.html#fn-min">7.8.2 The min() Function</a></td>
                    <td/>
                    &full;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice7.html#fn-max">7.8.3 The max() Function</a></td>
                    <td/>
                    &full;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice7.html#fn-count-non-empty">7.8.4 The count-non-empty() Function</a></td>
                    <td/>
                    &full;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice7.html#fn-index">7.8.5 The index() Function</a></td>
                    <td>
                        The argument if the <code>index</code> function is the id defined on a 
                        <code>&lt;xforms:repeat></code> element. With Presentation Server, it 
                        is only valid to call the <code>index</code> function with an id 
                        referencing a <code>&lt;xforms:repeat></code> element that is an 
                        ancestor of the element from where the <code>index</code> function 
                        is called.
                        
                        <p>[RFE <a href="http://tinyurl.com/42osk">1078684</a>]</p>
                    </td>
                    &partial;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice7.html#expr-lib-string">7.9 String Functions</a></td>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice7.html#fn-property">7.9.1 The property() Function</a></td>
                    <td/>
                    &full;
                </tr>
                <tr>
                    <td rowspan="5"><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice7.html#expr-lib-date">7.10 Date and Time Functions</a></td>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice7.html#fn-now">7.10.1 The now() Function</a></td>
                    <td/>
                    &full;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice7.html#fn-get-duration-from-date">7.10.2 The days-from-date() Function</a></td>
                    <td/>
                    &full;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice7.html#fn-get-duration-from-dateTime">7.10.3 The seconds-from-dateTime() Function</a></td>
                    <td/>
                    &full;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice7.html#fn-get-seconds-from-duration">7.10.4 The seconds() Function</a></td>
                    <td/>
                    &full;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice7.html#fn-get-months-from-duration">7.10.5 The months() Function</a></td>
                    <td/>
                    &full;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice7.html#expr-lib-nodset">7.11 Node-set Functions</a></td>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice7.html#fn-instance">7.11.1 The instance() Function</a></td>
                    <td>
                        The <code>instance()</code> function is not supported as multiple 
                        instances per document are not supported.
                    </td>
                    &future;
                </tr>
                <tr>
                    <td colspan="2"><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice7.html#expr-extension">7.12 Extension Functions</a></td>
                    <td>
                        Extension functions are not supported.
                        
                        <p>[RFE <a href="http://tinyurl.com/42osk">1078684</a>]</p>
                    </td>
                    &future;
                </tr>
                <tr>
                    <td rowspan="20"><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice8.html">8 Form Controls</a></td>
                    <td rowspan="11"><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice8.html#id2625797">8.1 The XForms Form Controls Module</a></td>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice8.html#ui-processing">8.1.1 Implementation Requirements Common to All Form Controls</a></td>
                    <td>
                       The <code>inputmode</code>, <code>incremental</code> attributes is not supported.

                       <p>
                           [RFE <a href="http://tinyurl.com/45zxj">1078708</a>]<br/>
                           [RFE <a href="http://tinyurl.com/5qbaq">1078709</a>]
                       </p>
                    </td>
                    &partial;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice8.html#ui-input">8.1.2 The input Element</a></td>
                    <td>
                        Dates and times are rendered using the regular textfield widget, instead 
                        of using a more specific date or time specific widget. Note that this is 
                        not mandated by the XForms specification.

                        <p>[RFE <a href="http://tinyurl.com/4n7xc">1078712</a>]</p>
                    </td>
                    &full;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice8.html#ui-secret">8.1.3 The secret Element</a></td>
                    <td/>
                    &full;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice8.html#ui-textarea">8.1.4 The textarea Element</a></td>
                    <td/>
                    &full;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice8.html#ui-output">8.1.5 The output Element</a></td>
                    <td>
                        The <code>value</code> attribute is not supported. The element cannot be 
                        embedded inside a <code>&lt;xforms:label></code>, 
                        <code>&lt;xforms:hint></code>, <code>&lt;xforms:help></code>, 
                        <code>&lt;xforms:alert></code>, and <code>&lt;xforms:message></code>. 
                        Instead, use the single node binding attriubutes available on those 
                        elements.
                        
                        <p>
                            [RFE <a href="http://tinyurl.com/3znzg">1078702</a>]<br/>
                            [RFE <a href="http://tinyurl.com/6atzf">1078703</a>]
                        </p>
                    </td>
                    &partial;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice8.html#ui-upload">8.1.6 The upload Element</a></td>
                    <td>
                        The <code>mediatype</code> attribute is not supported. You should only 
                        bind this control to datetypes <code>xs:anyURI</code>, 
                        <code>xs:base64Binary</code>, or <code>xs:hexBinay</code>, or 
                        types derived by restriction from them. Presentation Server does 
                        not enforce this contraint.
                            
                        <p>
                            [RFE <a href="http://tinyurl.com/4kfof">1078715</a>]<br/>
                            [RFE <a href="http://tinyurl.com/54bdd">1078721</a>]
                        </p>
                    </td>
                    &partial;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice8.html#ui-range">8.1.7 The range Element</a></td>
                    <td>
                        This control is not supported at this point.

                        <p>[RFE <a href="http://tinyurl.com/565jb">1078723</a>]</p>
                    </td>
                    &future;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice8.html#ui-button">8.1.8 The trigger Element</a></td>
                    <td>
                        This control is not supported at this point.

                        <p>[RFE <a href="http://tinyurl.com/3wo6d">1078725</a>]</p>
                    </td>
                    &future;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice8.html#ui-submit">8.1.9 The submit Element</a></td>
                    <td>
                        Presentation Server does not mandate the presence of the 
                        <code>submission</code> attribute.

                        <p>[RFE <a href="http://tinyurl.com/6urpm">1078726</a>]</p>
                    </td>
                    &partial;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice8.html#ui-selectMany">8.1.10 The select Element</a></td>
                    <td>
                        Open selection is not supported. The control does not indicate an 
                        out-of-range condition of the value in the instance have no 
                        corresponding choice item.
                        
                        <p>
                            [RFE <a href="http://tinyurl.com/4vfs8">1072228</a>]<br/>
                            [RFE <a href="http://tinyurl.com/5hcjp">1078733</a>]
                        </p>
                    </td>
                    &partial;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice8.html#ui-selectOne">8.1.11 The select1 Element</a></td>
                    <td>
                        Open selection is not supported.
                        
                        <p>[RFE <a href="http://tinyurl.com/3wo8b">1080089</a>]</p>
                    </td>
                    &partial;
                </tr>
                <tr>
                    <td rowspan="3"><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice8.html#ui-commonelem">8.2 Common Markup for Selection Controls</a></td>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice8.html#ui-common-elements-choices">8.2.1 The choices Element</a></td>
                    <td/>
                    &full;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice8.html#ui-common-elements-item">8.2.2 The item Element</a></td>
                    <td/>
                    &full;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice8.html#ui-common-choices-value">8.2.3 The value Element</a></td>
                    <td>
                        Presentation Server does not enforce that the value is valid according 
                        to the datatype bound to the selection control.

                        <p>[RFE <a href="http://tinyurl.com/4zt4n">1080092</a>]</p>
                    </td>
                    &partial;
                </tr>
                <tr>
                    <td rowspan="6"><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice8.html#ui-commonelems">8.3 Additional Elements</a></td>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice8.html#ui-commonelems-filename">8.3.1 The filename Element</a></td>
                    <td/>
                    &full;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice8.html#ui-commonelems-mediatype">8.3.2 The mediatype Element</a></td>
                    <td/>
                    &full;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice8.html#ui-commonelems-label">8.3.3 The label Element</a></td>
                    <td/>
                    &full;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice8.html#ui-commonelems-help">8.3.4 The help Element</a></td>
                    <td/>
                    &full;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice8.html#ui-commonelems-hint">8.3.5 The hint Element</a></td>
                    <td/>
                    &full;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice8.html#ui-common-elements-alert">8.3.6 The alert Element</a></td>
                    <td/>
                    &full;
                </tr>
                <tr>
                    <td rowspan="14"><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice9.html">9 XForms User Interface</a></td>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice9.html#id2631290">9.1 The XForms Group Module</a></td>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice9.html#ui-group">9.1.1 The group Element</a></td>
                    <td>
                        Labels on groups are ignored (i.e. no special rendering is provided).
                        
                        <p>[RFE <a href="http://tinyurl.com/3vdhe">1080099</a>]</p>
                    </td>
                    &full;
                </tr>
                <tr>    
                    <td rowspan="3"><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice9.html#id2631571">9.2 The XForms Switch Module</a></td>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice9.html#ui-conditional">9.2.1 The switch Element</a></td>
                    <td rowspan="3">[RFE <a href="http://tinyurl.com/5mkm9">1056474</a>]</td>
                    &future;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice9.html#ui-case">9.2.2 The case Element</a></td>
                    &future;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice9.html#action-toggle">9.2.3 The toggle Element</a></td>
                    &future;
                </tr>
                <tr>
                    <td rowspan="10"><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice9.html#id2632123">9.3 The XForms Repeat Module</a></td>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice9.html#ui-repeat">9.3.1 The repeat Element</a></td>
                    <td/>
                    &full;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice9.html#ui.repeat.via.attrs">9.3.2 Creating Repeating Structures Via Attributes</a></td>
                    <td>
                        Using attributes instead of elements to create repeating structures is not supported.

                        <p>[RFE <a href="http://tinyurl.com/5ye2o">1080102</a>]</p>
                    </td>
                    &future;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice9.html#ui-common-elements-itemset">9.3.3 The itemset Element</a></td>
                    <td/>
                    &full;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice9.html#ui-adv-copy">9.3.4 The copy Element</a></td>
                    <td>
                        The <code>&lt;xforms:copy></code> only copies simple content, not subtree of data

                        <p>[RFE <a href="http://tinyurl.com/7x5fj">1080107</a>]</p>
                    </td>
                    &partial;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice9.html#action-insert">9.3.5 The insert Element</a></td>
                    <td>
                        Nodes of type <code>xs:ID</code> are not modified to remain unique 
                        values in the instance after the insertion.

                        <p>[RFE <a href="http://tinyurl.com/4e4j5">1080113</a>]</p>
                    </td>
                    &partial;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice9.html#action-delete">9.3.6 The delete Element</a></td>
                    <td/>
                    &full;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice9.html#action-setRepeatCursor">9.3.7 The setindex Element</a></td>
                    <td>
                        The <code>setindex</code> action is not supported.
                        
                        <p>[RFE <a href="http://tinyurl.com/6heds">1080117</a>]</p>
                    </td>
                    &future;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice9.html#ui-repeat-processing">9.3.8 Repeat Processing</a></td>
                    <td/>
                    &full;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice9.html#ui-nested-repeats">9.3.9 Nested Repeats</a></td>
                    <td/>
                    &full;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice9.html#ui-repeat-ui">9.3.10 User Interface Interaction</a></td>
                    <td/>
                    &full;
                </tr>
                <tr>
                    <td rowspan="13"><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice10.html">10 XForms Actions</a></td>
                    <td rowspan="13"><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice10.html#id2634509">10.1 The XForms Action Module</a></td>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice10.html#action-action">10.1.1 The action Element</a></td>
                    <td>[RFE <a href="http://tinyurl.com/4acf5">1080124</a>]</td>
                    &future;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice10.html#action-dispatch">10.1.2 The dispatch Element</a></td>
                    <td>[RFE <a href="http://tinyurl.com/686py">1080125</a>]</td>
                    &future;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice10.html#action-rebuild">10.1.3 The rebuild Element</a></td>
                    <td>[RFE <a href="http://tinyurl.com/5qkah">1080126</a>]</td>
                    &future;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice10.html#action-recalculate">10.1.4 The recalculate Element</a></td>
                    <td>[RFE <a href="http://tinyurl.com/6fgfq">1080128</a>]</td>
                    &future;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice10.html#action-revalidate">10.1.5 The revalidate Element</a></td>
                    <td>[RFE <a href="http://tinyurl.com/3uk6j">1080129</a>]</td>
                    &future;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice10.html#action-refresh">10.1.6 The refresh Element</a></td>
                    <td>[RFE <a href="http://tinyurl.com/4c6l3">1080130</a>]</td>
                    &future;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice10.html#action-setfocus">10.1.7 The setfocus Element</a></td>
                    <td>[RFE <a href="http://tinyurl.com/4euux">1080131</a>]</td>
                    &future;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice10.html#action-load">10.1.8 The load Element</a></td>
                    <td>[RFE <a href="http://tinyurl.com/5zdgq">1080132</a>]</td>
                    &future;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice10.html#action-setvalue">10.1.9 The setvalue Element</a></td>
                    <td/>
                    &full;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice10.html#action-submit">10.1.10 The send Element</a></td>
                    <td>[RFE <a href="http://tinyurl.com/53r29">1080133</a>]</td>
                    &future;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice10.html#action-reset">10.1.11 The reset Element</a></td>
                    <td>[RFE <a href="http://tinyurl.com/6avxv">1080134</a>]</td>
                    &future;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice10.html#action-info">10.1.12 The message Element</a></td>
                    <td>
                        Only <code>modal</code> level is supported.
                        
                        [RFE <a href="http://tinyurl.com/6368n">1080143</a>]
                    </td>
                    &partial;
                </tr>
                <tr>
                    <td><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice10.html#action-repeat">10.1.13 Actions insert, delete and setindex</a></td>
                    <td/>
                    &full;
                </tr>
                <tr>
                    <td rowspan="9"><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice11.html">11 Submit</a></td>
                    <td colspan="2"><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice11.html#submit-event">11.1 The xforms-submit Event</a></td>
                    <td>[RFE <a href="http://tinyurl.com/4mx3h">1080151</a>]</td>
                    &future;
                </tr>
                <tr>
                    <td colspan="2"><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice11.html#submit-options">11.2 Submission Options</a></td>
                    <td/>
                    &full;
                </tr>
                <tr>
                    <td colspan="2"><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice11.html#serialize-xml">11.3 Serialization as application/xml</a></td>
                    <td rowspan="7">
                        <p>
                            The semantic for the <code>serialization</code> and <code>method</code> 
                            attribute in Presentation Server is different than the one described 
                            in the specification. In Presentation Server your code always receives 
                            the instance data submitted by the user as XML (in general as the 
                            input to a pipeline), regardless of the encoding or method used 
                            between the Web browser and the server.
                        </p>
                        <p>
                            By default the method is <code>get</code> and the serialization 
                            is <code>application/x-www.form-urlencoded</code>. In general, 
                            you might to change the method to <code>post</code> to bypass
                            URL length limitation of certain browsers, and you have to use the 
                            <code>multipart/form-data</code> if your form contains an upload 
                            control.
                        </p>
                    </td>
                    &partial;
                </tr>
                <tr>
                    <td colspan="2"><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice11.html#serialize-multipart">11.4 Serialization as multipart/related</a></td>
                    &partial;
                </tr>
                <tr>
                    <td colspan="2"><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice11.html#serialize-form-data">11.5 Serialization as multipart/form-data</a></td>
                    &partial;
                </tr>
                <tr>
                    <td colspan="2"><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice11.html#serialize-urlencode">11.6 Serialization as application/x-www-form-urlencoded</a></td>
                    &partial;
                </tr>
                <tr>
                    <td colspan="2"><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice11.html#send-post">11.7 The post, multipart-post, form-data-post, and urlencoded-post Submit Methods</a></td>
                    &partial;
                </tr>
                <tr>
                    <td colspan="2"><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice11.html#send-put">11.8 The put Submit Method</a></td>
                    &partial;
                </tr>
                <tr>
                    <td colspan="2"><a href="http://www.w3.org/TR/2003/REC-xforms-20031014/slice11.html#send-get">11.9 The get Submit Method</a></td>
                    &partial;
                </tr>
            </table>
        </section>
    </body>
</document>
