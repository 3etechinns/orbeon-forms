<!--
    Copyright (C) 2004 Orbeon, Inc.

    The Orbeon documentation is not distributed under the LGPL license. Use of the documentation is
    subject to the following terms:

    * Conversion to other formats is allowed, but the actual content may not be altered or edited
      in any way.

    * You may create printed copies for your own personal use.

    * For all other uses, such as selling printed copies or using (parts of) the manual in another
      publication, prior written agreement from Orbeon, Inc. is required.

    Please contact Orbeon at info@orbeon.com for more information.
-->
<document xmlns:p="http://www.orbeon.com/oxf/pipeline"
          xmlns:xforms="http://www.w3.org/2002/xforms"
          xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <header>
        <title>XSLT and JAXP Processors</title>
    </header>
    <body>
        <section>
            <title>Introduction</title>

            <p>
                <link href="http://www.w3.org/TR/xslt">XSLT</link> is a language
                for transforming XML documents into other XML documents. Presentation Server uses
                XSLT extensively as its main language to process XML
                documents.
            </p>

            <p>Presentation Server ships with multiple implementations of XSLT:</p>
            <ul>
                <li>Xalan 2.5.1 Interpreter</li>
                <li>Xalan 2.5.1 Compiler (XSLTC)</li>
                <li>Saxon 6.5.2 </li>
                <li>Saxon 8.1.1 (supporting a large subset of XSLT 2.0)</li>
            </ul>

            <p>Additionally, Presentation Server can use any Java API for XML Processing (JAXP)
            compliant transformer.</p>
        </section>
        <section>
            <title>Usage</title>

            <p>
                Instantiate the XSLT Processor with a
                <code>p:processor</code> declaration. The following URIs are supported:
            </p>


            <p>
                <table>
                    <tr>
                        <th>Processor Name</th>
                        <th>Language</th>
                        <th>Implementation</th>
                    </tr>
                    <tr>
                        <td>oxf:xslt</td>
                        <td>XSLT 2.0</td>
                        <td>Saxon 8.1.1</td>
                    </tr>
                    <tr>
                        <td>oxf:xalan</td>
                        <td>XSLT 1.0</td>
                        <td>Xalan 2.5.1 Interpreter</td>
                    </tr>
                    <tr>
                        <td>oxf:xsltc</td>
                        <td>XSLT 1.0</td>
                        <td>Xalan 2.5.1 Compiler</td>
                    </tr>
                    <tr>
                        <td>oxf:saxon</td>
                        <td>XSLT 1.0</td>
                        <td>Saxon 6.5.2</td>
                    </tr>
                    <tr>
                        <td>oxf:saxon8</td>
                        <td>XSLT 2.0</td>
                        <td>Saxon 8.1.1</td>
                    </tr>
                    <tr>
                        <td>oxf:generic-xslt-1.0</td>
                        <td>XSLT 1.0</td>
                        <td>Any JAXP (TrAX) XSLT 1.0 transformer</td>
                    </tr>
                    <tr>
                        <td>oxf:generic-xslt-2.0</td>
                        <td>XSLT 2.0</td>
                        <td>Any JAXP (TrAX) XSLT 2.0 transformer</td>
                    </tr>
                    <tr>
                        <td>oxf:xslt-1.0</td>
                        <td>XSLT 1.0</td>
                        <td>Default JAXP (TrAX) XSLT 1.0 transformer (currently Xalan)</td>
                    </tr>
                    <tr>
                        <td>oxf:xslt-2.0</td>
                        <td>XSLT 2.0</td>
                        <td>Default JAXP (TrAX) XSLT 2.0 transformer (currently Saxon 8)</td>
                    </tr>
                    <tr>
                        <td>oxf:trax</td>
                        <td>Any</td>
                        <td>Any JAXP (TrAX) transformer</td>
                    </tr>
                </table>
            </p>
            <p>
                <table ca="|p{0.2\textwidth}|p{0.4\textwidth}|">
                    <tr>
                        <th>transformer input</th>
                        <td>
                            An input containing a specific concrete <link
                            href="http://java.sun.com/j2se/1.4.2/docs/api/javax/xml/transform/TransformerFactory.html">
                            <code>TransformerFactory</code></link> class.
                        </td>
                    </tr>
                    <tr>
                        <th>config input</th>
                        <td>The stylesheet</td>
                    </tr>
                    <tr>
                        <th>data input</th>
                        <td>The document to which the stylesheet is applied</td>
                    </tr>
                    <tr>
                        <th>data output</th>
                        <td>The result of the transformation</td>
                    </tr>
                    <tr>
                        <th>user-defined inputs</th>
                        <td>The processor may support user-defined inputs</td>
                    </tr>
                </table>
            </p>

            <section>
                <title>Transformer Input</title>
                <p>
                    The <code>transformer</code> is mandatory only when using the
                    <code>oxf:generic-xslt-1.0</code>, <code>oxf:generic-xslt-2.0</code> or the
                    <code>oxf:trax</code> processor URI. It is implied otherwise.
                </p>

                <p>
                    This input points to a specific concrete subclass of
                    <link
                        href="http://java.sun.com/j2se/1.4.2/docs/api/javax/xml/transform/TransformerFactory.html">
                        <code>TransformerFactory</code>
                    </link>. For example, you can use the TrAX transformer to interface
                    Presentation Server with a new hypothetical transformer (MyTrans):


                    <xml-source>
                        <p:processor name="oxf:trax">
                            <p:input name="transformer">
                                <config>
                                    <class>com.mytrans.TransformerFactoryImpl</class>
                                </config>
                            </p:input>
                            <p:input name="config">
                                <mytrans>
                                    ...
                                </mytrans>
                            </p:input>
                            <p:input name="data">
                                <document>
                                    ...
                                </document>
                            </p:input>
                            <p:output name="data" id="mytrans"/>
                        </p:processor>
                    </xml-source>

                </p>

            </section>

            <section>
                <title>Config Input</title>
                <p> The configuration input contains a stylesheet.  The
                    following example shows a simple XSLT stylesheet:
                </p>
                <xml-source>
                    <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
                        <xsl:template match="/">
                            <new-root>
                                <xsl:value-of select="/root/a"/>
                                <xsl:value-of select="/root/b"/>
                            </new-root>
                        </xsl:template>
                    </xsl:stylesheet>
                </xml-source>
            </section>
            <section>
                <title>Data Input</title>
                <p>
                    The data input contains the source XML document. The example below works with
                    the stylesheet shown above:
                </p>
                <xml-source>
                    <root>
                        <a>a</a>
                        <b>b</b>
                    </root>
                </xml-source>
            </section>
            <anchor id="user-defined"/>
            <section>
                <title>User-Defined Inputs</title>
                <p>
                    XSLT transformers support reading <a
                    href="reference-xpl-pipelines#optional">optional user-defined inputs</a> through
                    the XSLT and XPath <code>document()</code> and <code>doc()</code> functions. For
                    example:
                </p>
                <xml-source>
                    <p:processor name="oxf:xslt">
                        <p:input name="config">
                            <address-book xsl:version="2.0">
                                <xsl:variable name="document-1" select="doc('file:/document-1.xml')"/>
                                <xsl:variable name="document-2" select="doc('input:my-input')"/>
                                <comment> ... </comment>
                            </address-book>
                        </p:input>
                        <p:input name="data" href="#some-id"/>
                        <p:input name="my-input" href="#some-other-id"/>
                        <p:output name="data" id="address-book"/>
                    </p:processor>
                </xml-source>
                <p>
                    In this example, the XPath expression <code>doc('file:/document-1.xml')</code>
                    instructs the XSLT transformer to read the document stored at
                    <code>oxf:/document-1.xml</code> and make it accessible through the variable
                    named <code>document-1</code>. This is standard XSLT and XPath 2.0.
                </p>
                <p>
                    The second variable, <code>document-2</code>, is assigned using a similar XPath
                    expression, but it uses a URI with a particular syntax: it starts with the
                    scheme <code>input:</code>. This instructs the XSLT transformer to read the
                    processor input called <code>my-input</code>. This input is connected to the
                    XSLT processor with <code>&lt;p:input name="my-input"
                    href="#some-other-id"/></code>. In this case, it is up to the user of the XSLT
                    processor to connect additional inputs as she sees fit, as long as their names
                    don't conflit with mandatory input and output names.
                </p>
            </section>
            <section>
                <title>Data Output</title>
                <p>
                    The data output produces the result of the transformation. The following XML is
                    the result of the above transformation:
                </p>
                <xml-source>
                    <new-root>ab</new-root>
                </xml-source>
            </section>
        </section>
        <section>
            <title>Passing Parameters to XSLT Stylesheets</title>
            <p>
                XSLT supports <code>xsl:param</code> elements at the top level of a stylesheet. They
                allow passing parameters to the stylesheet, without modifying the stylesheet
                itself. With API such as JAXP, a programmer can associate values to those
                parameters, making them available to the stylesheet during execution.
            </p>
            <p>
                XPL does not have a particular mechanism to set such stylesheet parameters, but a
                very simple workaround allows setting them. Assume you have a stylesheet with a
                <code>start</code> parameter, in a file called <code>my-stylesheet.xsl</code>:
            </p>
            <xml-source>
                <xsl:transform>
                    <xsl:param name="start" select="'a1'"/>
                    <comment>...</comment>
                </xsl:transform>
            </xml-source>
            <p>
                To set the <code>start</code> parameter with XPL, simply encapsulate the
                <code>my-stylesheet.xsl</code> stylesheet as follows:
            </p>
            <xml-source>
                <p:processor name="oxf:xslt">
                    <p:input name="data" href="#stylesheet-input"/>
                    <p:input name="config">
                        <xsl:stylesheet version="2.0">
                            <xsl:import href="my-stylesheet.xsl"/>
                            <xsl:param name="start" select="'a2'"/>
                        </xsl:stylesheet>
                    </p:input>
                    <p:output name="data" id="stylesheet-output"/>
                </p:processor>
            </xml-source>
            <p>
                The rules of XSLT's <code>import</code> statement will make sure that the imported
                stylesheet, <code>my-stylesheet.xsl</code>, receives the <code>start</code>
                parameter with the value "a2", as overridden in the importing stylesheet. Of course,
                the value does not have to be static, it can be computed dynamically as well.
            </p>
        </section>
        <section>
            <title>Streaming Transformations for XML (STX)</title>

            <p>
                <link href="http://stx.sourceforge.net/">Streaming
                    Transformations for XML (STX)</link> is a one-pass transformation
                language for XML documents that builds on the Simple API for XML (SAX). STX is
                intended as a high-speed, low memory consumption alternative to XSLT. Since it does
                not require the construction of an in-memory tree, it is suitable for use in
                resource constrained scenarios.
            </p>

            <p>
                Presentation Server uses <link href="http://joost.sourceforge.net/">Joost</link> to
                implement a STX transformer. Its usage is similar to an XSLT transformer, using the
                processor URI <code>oxf:stx</code>. This <link href="../examples/stx">example</link>
                demonstrates a simple STX transformation.
            </p>

            <xml-source>
                <p:processor name="oxf:stx">
                    <!-- This example comes straight from the Joost distribution -->
                    <p:input name="data" href="#source"/>
                    <p:input name="config">
                        <stx:transform xmlns:stx="http://stx.sourceforge.net/2002/ns" version="1.0"
                            pass-through="all" strip-space="yes">
                        </stx:transform>
                    </p:input>
                    <p:input name="data" href="#document"/>
                    <p:output name="data" id="result"/>
                </p:processor>
            </xml-source>

        </section>
    </body>
</document>
