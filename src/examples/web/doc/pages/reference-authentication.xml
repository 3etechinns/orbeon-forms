<!--
    Copyright (C) 2004 Orbeon, Inc.

    The Orbeon documentation is not distributed under the LGPL license. Use of the documentation is
    subject to the following terms:

    * Conversion to other formats is allowed, but the actual content may not be altered or edited
      in any way.

    * You may create printed copies for your own personal use.

    * For all other uses, such as selling printed copies or using (parts of) the manual in another
      publication, prior written agreement from Orbeon, Inc. is required.

    Please contact Orbeon at info@orbeon.com for more information.
-->
<document xmlns:p="http://www.orbeon.com/oxf/pipeline" xmlns:xforms="http://www.w3.org/2002/xforms">
    <header>
        <title>Authentication</title>
    </header>
    <body>
        <section>
            <title>Introduction</title>
            <p>
                Most Web applications require some sort of authentication,
                either just to access an "administrative" section, or for the
                whole application. OXF Web applications use the standard
                authentication mechanism provided by your J2EE application
                server. This section provides an overview of the standard
                J2EE authentication mechanism.
            </p>
        </section>
        <section>
            <title>Restricting Access using web.xml</title>
            <p>Access control is provided by adding three sections to the

                <code>web.xml</code> file:
            </p>
            <ul>
                <li>
                    <p>In <code>&lt;security-constraint&gt;</code> you define
                    which role (with <code>&lt;role-name&gt;</code>) is
                    required to access which part of the application (with
                    <code>&lt;url-pattern&gt;</code>).</p>

                    <xml-source>
                        <security-constraint>
                            <web-resource-collection>
                                <web-resource-name>Administration</web-resource-name>
                                <url-pattern>/admin</url-pattern>
                                <url-pattern>/users</url-pattern>
                            </web-resource-collection>
                            <auth-constraint>
                                <role-name>administrator</role-name>
                            </auth-constraint>
                        </security-constraint>
                    </xml-source>
                </li>
                <li>
                    <p>In <code>&lt;login-config&gt;</code> you define how the
                    user will authenticate himself. In other words, what method
                    is used to get the user name and password. This can be done
                    either with a form in an HTML page or with standard HTTP
                    authentication. The names of those methods are:
                    <code>FORM</code> and <code>BASIC</code>. In the example
                    below, the form mechanism is demonstrated.
                    <code>&lt;form-login-page&gt;</code> must point to a page
                    with an HTML form where:</p>

                    <ul>
                        <li>The form action is set to
                            <code>j_security_check</code>.
                        </li>
                        <li>The name of the field used to get the username is
                            <code>j_username</code>.
                        </li>
                        <li>The name of the field used to get the password is
                            <code>j_password</code>.
                        </li>
                    </ul>
                    <xml-source>
                        <login-config>
                            <auth-method>FORM</auth-method>
                            <form-login-config>
                                <form-login-page>/login</form-login-page>
                                <form-error-page>/login-error</form-error-page>
                            </form-login-config>
                        </login-config>
                    </xml-source>
                </li>
                <li>
                    <p>In <code>&lt;login-config&gt;</code> the
                    security roles used in
                    <code>&lt;security-constraint&gt;</code> section are declared. </p>
                    <xml-source>
                        <security-role>
                            <role-name>administrator</role-name>
                        </security-role>
                    </xml-source>
                </li>
            </ul>
        </section>
        <section>
            <title>Mapping Roles to Users</title>
            <p>In the <code>web.xml</code> file, the example declared that to
            access the page <code>/admin</code> the user needs to have the
            <code>administrator</code> role. But how do you declare users and how
            are those users mapped to roles? This is application server
            dependent, so you won't find an exact answer to this question in the
            OXF User Guide and you should refer to your application server
            documentation. </p>
            <p>Usually the process is straightforward. For example, with Tomcat
            using the memory realm, you can declare the users and their
            role in <code>conf/tomcat-users.xml</code>: </p>
            <xml-source>
                <tomcat-users>
                    <user name="root" password="olleh" roles="administrator"/>
                    <user name="jdoh" password="olleh" roles="administrator"/>
                </tomcat-users>
            </xml-source>
            <p>For more information on how to setup users and assign roles to
            users, see your application server documentation. Links are provided below for Tomcat and WebLogic.</p>
            <ul>
                <li>
                    <link href="http://jakarta.apache.org/tomcat/tomcat-4.0-doc/realm-howto.html">Tomcat 4.0</link>
                </li>
                <li>
                    <link href="http://jakarta.apache.org/tomcat/tomcat-4.1-doc/realm-howto.html">Tomcat 4.1</link>
                </li>
                <li>
                    <link href="http://e-docs.bea.com/wls/docs61/webapp/security.html">WebLogic 6.1</link>
                </li>
                <li>
                    <link href="http://e-docs.bea.com/wls/docs70/webapp/security.html">WebLogic 7.0</link>
                </li>
            </ul>
        </section>
        <section>
            <title>Accessing Security Information From the Application</title>
            <p>The RequestSecurityGenerator
            is used to extracts information about the currently logged user from the HTTP
            request. For more information, see the
            <link href="processors-generators#N101C6">RequestSecurityGenerator</link>
            documentation.</p>
        </section>
        <section>
            <title>Logout</title>
            <p>In order to log the current user out, the SessionInvalidator processor must
            be used:</p>
            <xml-source>
                <p:processor name="oxf:session-invalidator"/>
            </xml-source>
            <p>The SessionInvalidator does not take any configuration. It must
            be included in a pipeline or branch of pipeline executed when the
            action of logging out the user is requested.</p>
        </section>
    </body>
</document>
