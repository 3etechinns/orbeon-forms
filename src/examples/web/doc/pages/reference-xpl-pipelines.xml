<!--
    Copyright (C) 2004 Orbeon, Inc.

    The Orbeon documentation is not distributed under the LGPL license. Use of the documentation is
    subject to the following terms:

    * Conversion to other formats is allowed, but the actual content may not be altered or edited
      in any way.

    * You may create printed copies for your own personal use.

    * For all other uses, such as selling printed copies or using (parts of) the manual in another
      publication, prior written agreement from Orbeon, Inc. is required.

    Please contact Orbeon at info@orbeon.com for more information.
-->
<document xmlns:p="http://www.orbeon.com/oxf/pipeline" xmlns:xforms="http://www.w3.org/2002/xforms">
    <header>
        <title>XPL and Pipelines</title>
    </header>
    <body>
        <section>
            <title>Introduction</title>
            <p>
                This section describes the XML Pipeline Definition Language (XPL) used by OXF. The
                XPL interpreter is actually itself implemented as an XML processor, the Pipeline
                processor. For an introduction to pipelines, see <link
                href="OXF Tutorial.pdf">OXF Tutorial</link>.
            </p>
        </section>
        <section>
            <title>Namespace</title>
            <p>
                All the elements defined by XPL must be in the namespace with a URI:
                <code>http://www.orbeon.com/oxf/pipeline</code>. For consistency, XPL elements
                should use the <code>p</code> prefix. This document we will assumes that this prefix
                is used.
            </p>
        </section>
        <section>
            <title>&lt;p:config&gt; element</title>
            <p>
                The root element of a XPL document (<code>config</code>) defines:
            </p>
            <ul>
                <li>
                    Zero or more input or output parameters to the pipeline with <link
                    href="#param"> <code>&lt;p:param&gt;</code> </link>
                </li>
                <li>
                    The list of statements that need to executed for this pipeline. A statement
                    defines either a processor with its connections to other processors in the
                    pipeline using <link href="#processor"> <code>&lt;p:processor&gt;</code>
                    </link>, or a condition using <link href="#choose">
                    <code>&lt;p:choose&gt;</code></link>.
                </li>
            </ul>
            <p>
                The &lt;p:config&gt; element and its content are defined in the Relax NG schema
                with:
            </p>
            <xml-source>
                <start>
                    <ref name="config"/>
                </start>
                <define name="config">
                    <element name="p:config">
                        <optional>
                            <attribute name="id"/>
                        </optional>
                        <ref name="param"/>
                        <ref name="statement"/>
                    </element>
                </define>
                <define name="statement">
                    <interleave>
                        <zeroOrMore>
                            <ref name="processor"/>
                        </zeroOrMore>
                        <zeroOrMore>
                            <ref name="choose"/>
                        </zeroOrMore>
                    </interleave>
                </define>
            </xml-source>
        </section>
        <anchor id="param"/>
        <section>
            <title>&lt;p:param&gt; element</title>
            <p>
                The <code>&lt;p:param&gt;</code> element defines what the inputs and outputs of the
                pipeline are. Each input and output has a name. There cannot be two inputs with the
                same name or two outputs with the same name, but it is possible to have an output
                and an input with the same name. Every input name defines an id that can be later
                referenced with the <link href="#href">href attribute</link> such as when connecting
                processors. The output names can be referenced with the <code>ref</code> attribute
                on <link href="#processor"> <code>&lt;p:output&gt;</code> </link>.
            </p>
            <img print-format="pdf" src="pages/reference-xpl-pipelines-param.png"/>
            <p>
                The inputs and outputs of the above pipeline are declared in the XPL document
                below:
            </p>
            <xml-source>
                <p:config>
                    <p:param type="input" name="data"/>
                    <p:param type="input" name="foo"/>
                    <p:param type="output" name="bar"/>
                    <p:param type="output" name="data"/>
                </p:config>
            </xml-source>
            <p>
                The <code> &lt;p:param&gt; </code> element and its content are defined in the Relax
                NG schema with:
            </p>
            <xml-source>
                <define name="param">
                    <zeroOrMore>
                        <element name="p:param">
                            <interleave>
                                <attribute name="name"/>
                                <attribute name="type"/>
                            </interleave>
                        </element>
                    </zeroOrMore>
                </define>
            </xml-source>
        </section>

        <anchor id="processor"/>
        <section>
            <title>&lt;p:processor&gt; element</title>
            <p>
                The <code>&lt;p:processor&gt;</code> element places a processor in the pipeline and
                connects it to other processors, pipeline inputs, or pipeline outputs.
            </p>
            <ul>
                <li>
                    <p>
                        The kind of processor created is specified with the <code>name</code>
                        attribute, which is an XML qualified name. A qualified name is composed of
                        two parts:
                    </p>
                    <ul>
                        <li><b>A prefix:</b> The prefix is mapped to a URI defining a namespace.</li>
                        <li><b>A local name:</b> This name is a name in the namespace defined by the prefix.</li>
                    </ul>
                    <p>
                        This mechanism allows grouping related processors in a namespace. For
                        example, all the basic OXF processors are grouped in the
                        <code>http://www.orbeon.com/oxf/processors</code> namespace. This namespace
                        is typically mapped to the <code>oxf</code> prefix. Processors are then
                        referred to using names such as <code>oxf:xslt</code> or
                        <code>oxf:scope-serializer</code>.
                    </p>
                    <p>
                        The name maps to a processor factory. Processor factories are registered
                        through the <code>processors.xml</code> file described in <link
                        href="integration-packaging">Packaging and Deployment</link>.
                    </p>
                    <note>
                        For backward compatibility, the <code>uri</code> attribute is still supported.
                    </note>
                </li>
                <li><p>
                    The <code>&lt;p:input&gt;</code> element connects the input of the processor to
                    an inline document in the <code>&lt;p:input&gt;</code> element or to another
                    document referenced with the <code>href</code> attribute.
                </p></li>
                <li><p>
                    The <code>&lt;p:output&gt;</code> element defines an <code>id</code>
                    corresponding to that output with the <code>id</code> attribute or connects the
                    output to a processor output with the <code>ref</code> attribute.
                </p></li>
                <li><p>
                    Optionally, <code>&lt;p:input&gt;</code> and <code>&lt;p:output&gt;</code> can
                    have a <code>schema-href</code> or <code>schema-uri</code> attribute. Those
                    attributes specify a schema that is used by the Pipeline processor to validate
                    the corresponding input or output. <code>schema-href</code> references a
                    document using the <link href="#href"> <code>href</code></link> syntax.
                    <code>schema-uri</code> specifies the URI of a schema that is mapped to a
                    specific schema in the <link href="reference-properties">OXF properties
                    file</link>.
                </p></li>
                <li><p>
                    Optionally, <code>&lt;p:input&gt;</code> and <code>&lt;p:output&gt;</code> can
                    have a <code>debug</code> attribute. When this attribute is present, the
                    document that passes through that input or output is logged with Log4J. This is
                    useful during development to see the XML going through the pipeline.
                </p></li>
            </ul>
            <p>
                The following example feeds an XSLT processor with an inline document and an
                external stylesheet.
            </p>
            <xml-source>
                <p:processor name="oxf:xslt">
                    <p:input name="config" href="stylesheet.xsl"/>
                    <p:input name="data" schema-href="oxf:/address-book-schema.xml">
                        <address-book>
                            <card>
                                <name>John Smith</name>
                                <email>js@example.com</email>
                            </card>
                            <card>
                                <name>Fred Bloggs</name>
                                <email>fb@example.net</email>
                            </card>
                        </address-book>
                    </p:input>
                    <p:output name="data" id="address-book"/>
                </p:processor>
            </xml-source>
            <p>
                The &lt;p:processor&gt; element and its content are defined in the Relax NG schema
                with:
            </p>
            <xml-source>
                <define name="processor">
                    <element name="p:processor">
                        <attribute name="name"/>
                        <interleave>
                            <zeroOrMore>
                                <element name="p:input">
                                    <attribute name="name"/>
                                    <ref name="debug"/>
                                    <ref name="schemas"/>
                                    <optional>
                                        <choice>
                                            <attribute name="href"/>
                                            <ref name="anyElement"/>
                                        </choice>
                                    </optional>
                                </element>
                            </zeroOrMore>
                            <zeroOrMore>
                                <element name="p:output">
                                    <attribute name="name"/>
                                    <ref name="schemas"/>
                                    <ref name="debug"/>
                                    <choice>
                                        <attribute name="id"/>
                                        <attribute name="ref"/>
                                    </choice>
                                </element>
                            </zeroOrMore>
                        </interleave>
                    </element>
                </define>
            </xml-source>
        </section>
        <anchor id="choose"/>
        <section>
            <title>&lt;p:choose&gt; element</title>
            <p>
                The <code>&lt;p:choose&gt;</code> element can be used to execute different
                processors depending on a specific condition. The general syntax for this is very
                close to XSLT:
            </p>
            <xml-source>
                <p:choose href="#condition-document">
                    <p:when test="first-condition">...</p:when>
                    <p:when test="second-condition">...</p:when>
                    <p:otherwise>...</p:otherwise>
                </p:choose>
            </xml-source>
            <p>
                The conditions are expressed in XPath and operate on the XML document specified by
                the <code>href</code> attribute on <code>p:choose</code>. Each branch can contain
                regular processor declarations as well as nested conditions.
            </p>
            <p>
                Outputs declared in a branch are subject to the following conditions:
            </p>
            <ul>
                <li>
                    An output id cannot override an output id in scope before the corresponding
                    <code>choose</code> element
                </li>
                <li>
                    The scope of an output <code>id</code> is local to the branch if it is
                    connected inside that branch
                </li>

                <li>
                    The set of output ids not connected inside a branch become visible to
                    processors declared after the corresponding <code>choose</code> element
                </li>
                <li>
                    The set of output ids not connected inside the branch must be consistent among
                    all branches
                </li>
            </ul>
            <p>
                The last condition means that if a branch has two non-connected outputs such as
                output1 and output2, then all other branches must declare the same outputs. On the
                other hand, inputs in branches do not have to refer to the same outputs.
            </p>
            <p>
                The <code>&lt;p:choose&gt;</code> element and its content are defined in the Relax
                NG schema with:
            </p>
            <xml-source>
                <define name="choose">
                    <element name="p:choose">
                        <attribute name="href"/>
                        <oneOrMore>
                            <element name="p:when">
                                <attribute name="test"/>
                                <ref name="statement"/>
                            </element>
                        </oneOrMore>
                        <optional>
                            <element name="p:otherwise">
                                <ref name="statement"/>
                            </element>
                        </optional>
                    </element>
                </define>
            </xml-source>
        </section>
        <anchor id="for-each"/>
        <section>
            <title>&lt;p:for-each&gt; element</title>
            <p>
                With <code>&lt;for-each&gt;</code> you can execute processors multiple times based
                on the content of a document. Consider this example: an XML document contains
                information about employees, each described in an <code>emp</code> element. This
                document is stored in a file called <code>company.xml</code>:
            </p>
            <xml-source>
                <company>
                    <emp>
                        <firstname>John</firstname>
                        <lastname>Smith</lastname>
                    </emp>
                    <emp>
                        <firstname>Judy</firstname>
                        <lastname>Matthews</lastname>
                    </emp>
                    <emp>
                        <firstname>Gloria</firstname>
                        <lastname>Schwartz</lastname>
                    </emp>
                </company>
            </xml-source>
            <p>
                You want to apply a stylesheet (stored in <code>transform-employee.xsl</code>) to
                each employee. You can do this with the following pipeline:
            </p>
            <xml-source>
                <p:config xmlns:p="http://www.orbeon.com/oxf/pipeline">
                    <p:for-each href="company.xml" select="/company/emp" root="new-company" id="company-out">
                        <p:processor name="oxf:xslt">
                            <p:input name="data" href="current()"/>
                            <p:input name="config" href="transform-employee.xsl"/>
                            <p:output name="data" ref="company-out"/>
                        </p:processor>
                    </p:for-each>
                    <comment>The id "company-out" can now be referenced by other</comment>
                    <comment>processor in the pipeline.</comment>
                </p:config>
            </xml-source>
            <p>
                This diagram describes how the iteration is done in the above example:
            </p>
            <img print-format="pdf" src="pages/reference-xpl-pipelines-for-each.png"/>
            <ul>
                <li>
                    In a <code>&lt;for-each&gt;</code> you can have multiple processors connected
                    together, <code>&lt;choose&gt;</code> statements and nested
                    <code>&lt;for-each&gt;</code>, just like outside of a
                    <code>&lt;for-each&gt;</code>.
                </li>
                <li>
                    The output of a processor (or other <code>&lt;for-each&gt;</code>) inside the
                    <code>&lt;for-each&gt;</code> must be "connected to the for-each" using a
                    <code>ref="..."</code> attribute. The value in the <code>ref</code> attribute
                    must match the value of the <code>&lt;for-each&gt;</code> <code>id</code>
                    attribute.
                </li>
                <li>
                    You access the current part of the XML document being iterated with
                    <code>current()</code> in an href expression. If you have nested
                    <code>&lt;for-each&gt;</code>, <code>current()</code> applies to the
                    <code>&lt;for-each&gt;</code> that directly includes the <code>current()</code>
                    expression.
                </li>
                <li>
                    The processor inside a <code>&lt;for-each&gt;</code> can access ids declared
                    before the <code>&lt;for-each&gt;</code> statement.
                </li>
                <li>
                    The aggregated document (the "output of the <code>&lt;for-each&gt;</code>") is
                    available in the rest of the pipeline with the <code>id</code> declared in the
                    <code>id</code> attribute. Alternatively, you can directly connect the output
                    of the <code>&lt;for-each&gt;</code> to an output of the current pipeline with a
                    <code>ref</code> attribute (as in the processor <code>&lt;output&gt;</code>
                    element). If the <code>ref</code> attribute is used (instead of
                    <code>id</code>), then the value of the <code>ref</code> must be referenced
                    (instead of the value of the <code>id</code> attribute). When both the
                    <code>id</code> and <code>ref</code> attributes are used, the value of the
                    <code>id</code> attribute must be referenced.
                </li>
                <li>
                    The <code>&lt;for-each&gt;</code> can have optional attributes:
                    <code>input-debug</code>, <code>input-schema-href</code>,
                    <code>input-schema-uri</code>, <code>output-debug</code>,
                    <code>output-schema-href</code> and <code>output-schema-uri</code>. The
                    attributes starting with "<code>input</code>" (respectively
                    "<code>output</code>") work as the similar attributes, just without the prefix,
                    on the <code>&lt;input&gt;</code> element (respectively
                    <code>&lt;output&gt;</code> element). The attributes starting with
                    "<code>input</code>" apply to the document referenced by the <code>href</code>
                    expression. The attributes starting with "<code>output</code>" apply to the
                    output of the <code>&lt;for-each&gt;</code>.
                </li>
            </ul>
        </section>
        <anchor id="href"/>
        <section>
            <title>href attribute</title>
            <p>
                The <code>href</code> attribute is used to:
            </p>
            <ul>
                <li>Reference external documents</li>
                <li>Refer outputs of other processors</li>
                <li>Aggregate documents using the aggregate() function</li>
                <li>Select part of a document using XPointer</li>
            </ul>
            <p>
                The complete syntax of the <code>href</code> attribute is
                described below in a Backus Nauer Form (BNF)-like syntax:
            </p>
            <source>
    href              ::= ( local_reference | uri | aggregation ) [ xpointer ]
    local_reference   ::= "#" id
    aggregation       ::= "aggregate(" root_element_name "," agg_parameter ")"
    root_element_name ::= "'"  name "'"
    agg_parameter     ::= href [ "," agg_parameter ]
    xpointer          ::= "#xpointer(" xpath_expression ")"</source>
            <section>
                <title>URI</title>
                <p>
                    The URI syntax is defined in RFC 2396. A URI is used to references an external
                    document. A URI can be:
                </p>
                <ul>
                    <li>
                        Absolute, if a protocol is specified. For instance
                        <code>file:/dir/file.xml</code>.
                    </li>
                    <li>
                        Relative, if no protocol is specified. For instance
                        <code>../file.xml</code>. The document is loaded relatively to the URL of
                        the XPL document where the <code>href</code> is declared, as specified in
                        RFC 1808.
                    </li>
                </ul>
            </section>
            <section>
                <title>Aggregation</title>
                <p>
                    Multiple documents can be aggregated with the <code>aggregate()</code> function.
                    The name of the root element that will contain the aggregated document is
                    specified in the first argument. The documents to aggregate are specified in the
                    following arguments. There is no restriction on the number of documents that
                    can be aggregated.
                </p>
                <p>
                    For example, you have a document (with output id
                    <code>first</code>):
                </p>
                <xml-source>
                    <employee>John</employee>
                </xml-source>
                <p>And a second document (with output id
                    <code>second</code>):</p>
                <xml-source>
                    <employee>Marc</employee>
                </xml-source>
                <p>
                    Those two documents can be aggregated using <code>aggregate('employees',
                    #first,
                    #second)</code>. This produces the following document:
                </p>
                <xml-source>
                    <employees>
                        <employee>John</employee>
                        <employee>Marc</employee>
                    </employees>
                </xml-source>
            </section>
            <section>
                <title>XPointer</title>
                <p>
                    The XPointer syntax is used to select parts of a document. For example, if you
                    have a document in a file called <code>company.xml</code>:
                </p>
                <xml-source>
                    <company>
                        <name>Orbeon</name>
                        <site>
                            <web>http://www.orbeon.com/</web>
                            <ftp>ftp://ftp.orbeon.com/</ftp>
                        </site>
                    </company>
                </xml-source>
                <p>
                    The expression <code>company.xml#xpointer(/company/site)</code> produces the
                    document:
                </p>
                <xml-source>
                    <site>
                        <web>http://www.orbeon.com/</web>
                        <ftp>ftp://ftp.orbeon.com/</ftp>
                    </site>
                </xml-source>
            </section>
            <section>
                <title>Multiple References to an Identifier</title>
                <p>
                    The same id may be referenced multiple times in the same XPL document. For
                    example, the <code>id doc</code> is referenced by two processors in the
                    following example:
                </p>
                <xml-source>
                    <p:config xmlns:p="http://www.orbeon.com/oxf/pipeline">
                        <p:processor uri="A">
                            <p:output name="data" id="doc"/>
                        </p:processor>
                        <p:processor uri="B">
                            <p:input name="data" href="#doc"/>
                        </p:processor>
                        <p:processor uri="C">
                            <p:input name="data" href="#doc"/>
                        </p:processor>
                    </p:config>
                </xml-source>
                <p>
                    The document seen by B and C are identical. This situation can be graphically
                    represented as:
                </p>
                <img print-format="pdf" src="pages/reference-xpl-pipelines-tee.png"/>
            </section>
        </section>
    </body>
</document>
