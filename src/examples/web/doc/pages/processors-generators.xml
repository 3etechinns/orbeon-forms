<!--
    Copyright (C) 2004 Orbeon, Inc.

    The Orbeon documentation is not distributed under the LGPL license. Use of the documentation is
    subject to the following terms:

    * Conversion to other formats is allowed, but the actual content may not be altered or edited
      in any way.

    * You may create printed copies for your own personal use.

    * For all other uses, such as selling printed copies or using (parts of) the manual in another
      publication, prior written agreement from Orbeon, Inc. is required.

    Please contact Orbeon at info@orbeon.com for more information.
-->
<document xmlns:p="http://www.orbeon.com/oxf/pipeline" xmlns:xforms="http://www.w3.org/2002/xforms" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <header>
        <title>Other Generators</title>
    </header>
    <body>
        <section>
            <title>Introduction</title>
            <p>
                Generators are a special category of processors that have no XML data inputs, only
                outputs. They are generally used at the top of an XML pipeline to generate XML data
                from a Java object or other non-XML source. Presentation Server provides several
                generators as described below. See also the <a
                href="processors-generators-url">URL</a> and <a
                href="processors-generators-request">Request</a> generators.
            </p>
        </section>
        <anchor id="scope-generator"/>
        <section>
            <title>Scope Generator</title>
            <p>
                The Scope generator can retrieve documents from the application, session and request
                scopes. It works together with the <a
                href="processors-serializers#scope-serializer">Scope serializer</a>.
            </p>
            <p>
                The Scope generator has a <code>config</code> input in the following format:
            </p>
            <xml-source>
                <config>
                    <key>cart</key>
                    <scope>application|session|request</scope>
                </config>
            </xml-source>
            <table>
                <tr>
                    <th>key</th>
                    <td>
                        The <code>&lt;key></code> element contains a string used to identify
                        the document. The same key must be used to store and retrieve a
                        document.
                    </td>
                </tr>
                <tr>
                    <th>scope</th>
                    <td>
                        The <code>&lt;scope></code> element specifies in what scope the document is
                        to be retrieved from. The available scopes are:

                        <ul>
                            <li>
                                <b>application</b> - The application scope starts when the Web
                                application is deployed. It ends when the Web application is
                                undeployed. The application scope provides an efficient storage for
                                data that does not need to be persisted and that is common for all
                                users. It is typically used to cache information (e.g. configuration
                                data for the application read from a database).
                            </li>
                            <li>
                                <b>session</b> - The session scope is attached to a given user of
                                the Web application. It is typically used to store information that
                                does not need to be persisted and is specific to a given user. It is
                                typically used to cache the user's profile.
                            </li>
                            <li>
                                <b>request</b> - The request scope starts when an HTTP request is
                                sent to the server. It ends when the corresponding HTTP response is
                                sent back to the client. The request scope can be used to integrate
                                a Presentation Server application with legacy J2EE servlets.
                            </li>
                        </ul>
                    </td>
                </tr>
            </table>
            <p>
                In addition to the <code>config</code> input, the Scope generator has a
                <code>data</code> output for the document retrieved. When the Scope generator cannot
                find any document in scope for the given key, it returns a "null document":
            </p>
            <xml-source>
                <null xsi:nil="true"/>
            </xml-source>
            <note>
                The Session generator, previously used, is now deprecated. Use the Scope generator
                with session scope instead.
            </note>
        </section>
        <anchor id="BeanGenerator"/>
        <section>
            <title>Bean Generator</title>
            <p>
                The Bean generator serializes objects in the HTTP request or session to XML. If an
                object is a W3C Document (<code>org.w3c.dom.Document</code>), the XML for this
                document is sent as-is. Otherwise, the object is assumed to be a JavaBean and is
                serialized to XML with <link href="http://castor.exolab.org">Castor XML</link>.
                This generator takes two inputs:
            </p>
            <section>
                <title>Configuration</title>
                <p>
                    The configuration input describes which bean to serialize, and two optional
                    sources. The sources can be <code>request</code>, <code>session</code> or both.
                    If both are specified, they are tried in order. In the example below, the
                    request is searched for the <code>guess</code> bean. If not found, the session
                    is tried.
                </p>
                <xml-source>
                    <p:input name="config">
                        <config>
                            <attribute>guess</attribute>
                            <source>request</source>
                            <source>session</source>
                        </config>
                    </p:input>
                </xml-source>
                <p>Here is the RelaxNG schema:</p>
                <xml-source>
                    <element name="config"
                        datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"
                        xmlns="http://relaxng.org/ns/structure/1.0">

                        <interleave>

                            <oneOrMore>
                                <element name="attribute">
                                    <data type="string"/>
                                </element>
                            </oneOrMore>

                            <interleave>
                                <optional>
                                    <element name="source">
                                        <value>request</value>
                                    </element>
                                </optional>
                                <optional>
                                    <element name="source">
                                        <value>session</value>
                                    </element>
                                </optional>
                            </interleave>

                        </interleave>

                    </element>
                </xml-source>
            </section>
            <section>
                <title>Mapping Input</title>
                <p>
                    This input specifies the Castor mapping file. See <link
                    href="http://castor.exolab.org/xml-mapping.html">Castor Documentation</link>
                    for more information on the mapping file. In most instances, the default mapping
                    is sufficient:
                </p>
                <xml-source>
                    <p:input name="mapping">
                        <mapping/>
                    </p:input>
                </xml-source>
            </section>
            <section>
                <title>Output</title>
                <p>
                    The output document contains a <code>beans</code> root node. Each serialized
                    bean is a child of the root node. The example above generates the following
                    document:
                </p>
                <xml-source>
                    <beans>
                        <guess useraguess="0">
                            <message>Hello</message>
                        </guess>
                    </beans>
                </xml-source>
            </section>
        </section>
        <anchor id="servletinclude"/>
        <section>
            <title>Servlet Include Generator</title>
            <p>
                The Servlet Include generator, using the <a
                href="http://jakarta.apache.org/tomcat/tomcat-4.1-doc/servletapi/javax/servlet/RequestDispatcher.html">RequestDispatcher</a>,
                calls and parses the result of another servlet running in the same Java virtual
                machine. The servlet can generate either XML or HTML. The generator automatically
                detects HTML and uses HTMLTidy to clean and parse the stream as XML.
            </p>
            <note>
                This generator works only in a servlet environment. It is not supported in portlets.
            </note>
            <section>
                <title>Configuration</title>
                <p>
                    The <code>config</code> input describes the servlet to call, and optionally
                    configures the HTMLTidy process. You can specify the servlet either by name or
                    path, and optionally specify a context path. The RelaxNG schema for this input
                    is the following:
                </p>
                <xml-source>
                    <element name="config" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"
                        xmlns="http://relaxng.org/ns/structure/1.0">
                        <interleave>
                            <choice>
                                <element name="servlet-name">
                                    <data type="string"/>
                                </element>
                                <element name="path">
                                    <data type="string"/>
                                </element>
                            </choice>
                            <optional>
                                <element name="context-uripath">
                                    <data type="string"/>
                                </element>
                            </optional>
                            <optional>
                                <element name="tidy-options">
                                    <interleave>
                                        <optional>
                                            <element name="show-warnings">
                                                <choice>
                                                    <value>true</value>
                                                    <value>false</value>
                                                </choice>
                                            </element>
                                            <optional>
                                                <element name="quiet">
                                                    <choice>
                                                        <value>true</value>
                                                        <value>false</value>
                                                    </choice>
                                                </element>
                                            </optional>
                                        </optional>
                                    </interleave>
                                </element>
                            </optional>
                        </interleave>
                    </element>
                </xml-source>
            </section>
            <section>
                <title>Data Output</title>
                <p>
                    The data output contains the result in the servlet include call.
                </p>
            </section>
            <section>
                <title>Example</title>
                <p>
                    This generator calls the <code>reports</code> servlet in the
                    <code>/admin</code> context path. Since this servlet is generating HTML, it's
                    better to have verbose error reporting from HTMLTidy.
                </p>
                <xml-source>
                    <p:processor name="oxf:servlet-include">
                        <p:input name="config">
                            <config>
                                <servlet-name>reports</servlet-name>
                                <context-path>/admin</context-path>
                                <tidy-options>
                                    <show-warnings>true</show-warnings>
                                    <quiet>false</quiet>
                                </tidy-options>
                            </config>
                        </p:input>
                        <p:output name="data" id="#report"/>
                    </p:processor>
                </xml-source>
            </section>
        </section>
        <anchor id="exception-generator"/>
        <section>
            <title>Exception Generator</title>
            <p>
                The Exception generator is usually used in an <link
               href="reference-error-pipeline">error pipeline</link>. It serializes an exception
               into XML. The following shows an XML stream resulting from an exception.
            </p>
            <xml-source>
                <exceptions>
                    <exception>
                        <type>class org.orbeon.oxf.common.OXFException</type>
                        <message>Cannot read from file /doc/pages/test</message>
                        <stack-trace>stack trace</stack-trace>
                    </exception>
                    <exception>more exceptions</exception>
                </exceptions>
            </xml-source>
            <p>
                A typical error pipeline should include an Exception generator followed by one or
                more transformation(s), and an HTML serializer.
            </p>
            <xml-source>
                <p:processor name="oxf:exception">
                    <p:output name="data" id="exception"/>
                </p:processor>
            </xml-source>
        </section>
    </body>
</document>
