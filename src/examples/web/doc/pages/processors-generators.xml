<!--
    Copyright (C) 2004 Orbeon, Inc.

    The Orbeon documentation is not distributed under the LGPL license. Use of the documentation is
    subject to the following terms:

    * Conversion to other formats is allowed, but the actual content may not be altered or edited
      in any way.

    * You may create printed copies for your own personal use.

    * For all other uses, such as selling printed copies or using (parts of) the manual in another
      publication, prior written agreement from Orbeon, Inc. is required.

    Please contact Orbeon at info@orbeon.com for more information.
-->
<document xmlns:p="http://www.orbeon.com/oxf/pipeline" xmlns:xforms="http://www.w3.org/2002/xforms" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <header>
        <title>Generators</title>
    </header>
    <body>
        <section>
            <title>Introduction</title>
            <p>
                Generators are a special type of processors in that they have no XML data inputs,
                only outputs. They are generally used at the top of an XML pipeline to generate XML
                data from a Java object or other non-XML source. Presentation Server provides
                several generators as described below.
            </p>
        </section>
        <anchor id="RequestGenerator"/>
        <section>
            <title>Request Generator</title>
            <p>
                This generator streams XML from the current HTTP request. It can serialize request
                attributes including headers, parameters, query strings, user and server
                information.
            </p>
            <note>
                The Request generator can be used as the first component in a Web application
                pipeline. It is recommended to use the <a href="reference-controller">Page Flow
                Controller</a> and XForms whenever possible, but there are cases where additional
                data from the request may be necessary.
            </note>
            <section>
                <title>Configuration</title>
                <p>
                    The Request generator takes a mandatory configuration to select which request
                    attribute to display. This configuration consists of a series of
                    <code>include</code> and <code>exclude</code> elements containing XPath expressions
                    selecting a number of element from the request tree. Those expressions can be as
                    complex as any regular XPath 1.0 expression that returns a single node or a
                    node-set. However, it is recommended to keep those expressions as simple as
                    possible. One known limitation is that it is not possible to test on the
                    <code>value</code> element of uploaded files, as well as the content of the request
                    body.
                </p>
                <p>
                    Sample Configuration:
                </p>
                <xml-source>
                    <config>
                        <include>/request/path-info</include>
                        <include>/request/headers</include>
                        <include>/request/parameters/parameter[starts-with(name, 'document-id')]</include>
                        <exclude>/request/parameters/parameter[name = 'document-id-dummy']</exclude>
                    </config>
                </xml-source>
                <p>
                    The full attribute tree is:
                </p>
                <xml-source>
                    <request>
                        <content-length>-1</content-length>
                        <parameters>
                            <parameter>
                                <name>id</name>
                                <value>12</value>
                            </parameter>
                            <parameter>
                                <name>print</name>
                                <value>false</value>
                            </parameter>
                        </parameters>
                        <body/>
                        <protocol>HTTP/1.1</protocol>
                        <remote-addr>127.0.0.1</remote-addr>
                        <remote-host>localhost</remote-host>
                        <scheme>http</scheme>
                        <server-name>localhost</server-name>
                        <server-port>8080</server-port>
                        <secure>false</secure>
                        <context-path>/oxf</context-path>
                        <headers>
                            <header>
                                <name>host</name>
                                <value>localhost:8080</value>
                            </header>
                            <header>
                                <name>user-agent</name>
                                <value>Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.1) Gecko/20020826</value>
                            </header>
                            <header>
                                <name>accept-language</name>
                                <value>en-us, en;q=0.50</value>
                            </header>
                            <header>
                                <name>accept-encoding</name>
                                <value>gzip, deflate, compress;q=0.9</value>
                            </header>
                            <header>
                                <name>accept-charset</name>
                                <value>ISO-8859-1, utf-8;q=0.66, *;q=0.66</value>
                            </header>
                            <header>
                                <name>keep-alive</name>
                                <value>300</value>
                            </header>
                            <header>
                                <name>connection</name>
                                <value>keep-alive</value>
                            </header>
                            <header>
                                <name>referer</name>
                                <value>http://localhost:8080/oxf/</value>
                            </header>
                            <header>
                                <name>cookie</name>
                                <value>JSESSIONID=DA6E64FC1E6DFF0499B5D6F46A32186A</value>
                            </header>
                        </headers>
                        <method>GET</method>
                        <path-info>/doc/home-welcome</path-info>
                        <request-path>/doc/home-welcome</request-path>
                        <path-translated>C:\orbeon\projects\OXF\build\oxf-war\doc\home-welcome</path-translated>
                        <requested-session-id>DA6E64FC1E6DFF0499B5D6F46A32186A</requested-session-id>
                        <request-uri>/oxf/doc/home-welcome</request-uri>
                        <servlet-path/>
                    </request>
                </xml-source>
                <note>
                    Presentation Server adds a request attribute: the <code>request-path</code>. This
                    attribute is defined as a concatenation of the <code>servlet-path</code> and the
                    <code>path-info</code>. This is useful because both original attributes are
                    frequently mixed up and often change depending on the application server or its
                    configuration.
                </note>
                <warning>
                    This generator excludes all attributes by default. To obtain the whole attributes
                    tree (as shown in the example above), you must explicitly include
                    <code>/request</code>:
                    <xml-source border="false">
                        <p:processor name="oxf:request">
                            <p:input name="config">
                                <config>
                                    <include>/request</include>
                                </config>
                            </p:input>
                            <p:output name="data" id="request"/>
                        </p:processor>
                    </xml-source>
                </warning>
            </section>
            <section>
                <title>Request Body</title>
                <p>
                    When the request includes <code>/request/body</code>, the Request generator
                    retrieves the body of the request sent to the application server. The content of
                    the body is made available as the following data types:
                </p>
                <ul>
                    <li>If the attribute <code>stream-type</code> on the <code>config</code> element
                    is set to <code>xs:anyURI</code>, an URI is returned as the value of the
                    <code>/request/body</code> element.</li>

                    <li>If the attribute <code>stream-type</code> on the <code>config</code> element
                    is set to <code>xs:base64Binary</code>, the content of the request encoded as
                    Base64 is returned as the value of the <code>/request/body</code> element.</li>

                    <li>Otherwise, the content of the <code>/request/body</code> is set as either
                    <code>xs:anyURI</code> if the request body is large, or
                    <code>xs:base64Binary</code> if the request body is small.</li>
                </ul>
                <p>
                    Examples of configuration:
                </p>
                <xml-source>
                    <config stream-type="xs:anyURI">
                        <include>/request/body</include>
                    </config>
                </xml-source>
                <xml-source>
                    <config stream-type="xs:base64Binary">
                        <include>/request/body</include>
                    </config>
                </xml-source>
                <p>
                    The resulting data type is always set on the body element, for example:
                </p>
                <xml-source>
                    <request>
                        <body xsi:type="xs:anyURI">file:/C:/Tomcat/temp/upload_00000005.tmp</body>
                    </request>
                </xml-source>
                <warning>
                    Reading the request body is incompatible with reading HTML forms posted with the
                    <code>multipart/form-data</code> encoding, typically used when uploading files.
                    In such a case, you should read either only the request body, or only the
                    request parameters.
                </warning>
            </section>
            <section>
                <title>Uploaded Files</title>
                <p>
                    Uploaded files are stored into <code>parameter</code> elements, like any other
                    form parameter. The rules for the data type used are the same as for the request
                    body (see above): the data type depends on the <code>stream-type</code>
                    attribute and the size of the uploaded files.
                </p>
                <p>
                    The <code>parameter</code> element for an uploaded file contains the following
                    elements in addition to the <code>name</code> and <code>value</code> elements
                    use for other parameters:
                </p>
                <ul>
                    <li><code>filename</code>: stores the file name sent by the user agent</li>
                    <li><code>content-type</code>: store the media type sent by the user agent</li>
                    <li><code>content-length</code>: stores the actual size in bytes of the uploaded data</li>
                </ul>
                <p>
                    A resulting uploaded file may look as follows:
                </p>
                <xml-source>
                    <parameters>
                        <name>upload-form-element-name</name>
                        <filename>photo.jpg</filename>
                        <content-type>image/jpeg</content-type>
                        <content-length>2345</content-length>
                        <value xsi:type="xs:anyURI">file:/C:/Tomcat/temp/upload_00000005.tmp</value>
                    </parameters>
                </xml-source>
            </section>

            <warning>
                The URL stored as the value of the upload or request body is temporary and only
                valid for the duration of the current request. It is only accessible from the server
                side, and will not be accessible from a client such as a web browser. It is not
                guaranteed to be a <code>file:</code> URL, only that it can be read with
                Presentation Server's URL generator.
            </warning>
        </section>

        <anchor id="ExceptionGenerator"/>
        <section>
            <title>Exception Generator</title>
            <p>
                The Exception generator is usually used in an <link
                href="reference-error-pipeline">error pipeline</link>. It serializes an exception
                into XML. The following shows an XML stream resulting from an exception.
            </p>
            <xml-source>
                <exceptions>
                    <exception>
                        <type>class org.orbeon.oxf.common.OXFException</type>
                        <message>Cannot read from file /doc/pages/test</message>
                        <stack-trace>stack trace</stack-trace>
                    </exception>
                    <exception>more exceptions</exception>
                </exceptions>
            </xml-source>
            <p>
                A typical error pipeline should include an Exception generator followed by one or
                more transformation(s), and an HTMLSerializer.</p>


            <xml-source>
                <p:processor name="oxf:exception">
                    <p:output name="data" id="exception"/>
                </p:processor>
            </xml-source>
        </section>

        <anchor id="StrutsActionFormGenerator"/>
        <section>
            <title>Struts Action Form Generator</title>

            <warning>This processor is deprecated as of version 1.5.2. The
                Struts integration uses the
                <link
                    href="#BeanGenerator">BeanGenerator</link> and
                <link
                    href="#StrutsActionErrorsGenerator">StrutsActionErrorsGenerator</link>.
            </warning>

            <p>
                The Struts Action Form generator allows Presentation Server to be used with the
                <fork href="http://jakarta.apache.org/struts/">Jakarta Struts</fork> framework. In
                this configuration, Struts is used for the back-end, generating beans that are
                serialized by this generator. One or more Presentation Server pipeline(s) are called
                to generate the front-end views. See <link href="model2x-struts">Using Presentation
                Server with Struts</link> for more information.
            </p>
            <xml-source>
                <p:processor name="oxf:struts">
                    <p:output name="data" id="struts"/>
                </p:processor>
            </xml-source>
        </section>

        <anchor id="BeanGenerator"/>
        <section>
            <title>Bean Generator</title>

            <p>
                The Bean generator serializes objects in the HTTP request or session to XML. If an
                object is a W3C Document (<code>org.w3c.dom.Document</code>), the XML for this
                document is sent as-is. Otherwise, the object is assumed to be a JavaBean and is
                serialized to XML with <link href="http://castor.exolab.org">Castor XML</link>.
                This generator takes two inputs:
            </p>

            <section>
                <title>Configuration Input</title>

                <p>
                    The configuration input describes which bean to serialize, and two optional
                    sources. The sources can be <code>request</code>, <code>session</code> or both.
                    If both are specified, they are tried in order. In the example below, the
                    request is searched for the <code>guess</code> bean. If not found, the session
                    is tried.
                </p>

                <xml-source>
                    <p:input name="config">
                        <config>
                            <attribute>guess</attribute>
                            <source>request</source>
                            <source>session</source>
                        </config>
                    </p:input>
                </xml-source>

                <p>Here is the RelaxNG schema:</p>
                <xml-source>
                    <element name="config"
                        datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"
                        xmlns="http://relaxng.org/ns/structure/1.0">

                        <interleave>

                            <oneOrMore>
                                <element name="attribute">
                                    <data type="string"/>
                                </element>
                            </oneOrMore>

                            <interleave>
                                <optional>
                                    <element name="source">
                                        <value>request</value>
                                    </element>
                                </optional>
                                <optional>
                                    <element name="source">
                                        <value>session</value>
                                    </element>
                                </optional>
                            </interleave>

                        </interleave>

                    </element>
                </xml-source>
            </section>

            <section>
                <title>Mapping Input</title>

                <p>
                    This input specifies the Castor mapping file. See <link
                    href="http://castor.exolab.org/xml-mapping.html">Castor Documentation</link>
                    for more information on the mapping file. In most instances, the default mapping
                    is sufficient:
                </p>

                <xml-source>
                    <p:input name="mapping">
                        <mapping/>
                    </p:input>
                </xml-source>
            </section>

            <section>
                <title>Output</title>

                <p>
                    The output document contains a <code>beans</code> root node. Each serialized
                    bean is a child of the root node. The example above generates the following
                    document:
                </p>

                <xml-source>
                    <beans>
                        <guess useraguess="0">
                            <message>Hello</message>
                        </guess>
                    </beans>
                </xml-source>

            </section>

        </section>

        <anchor id="StrutsActionErrorsGenerator"/>
        <section>
            <title>Struts ActionErrors Generator</title>

            <p>
                The Struts ActionErrors generator looks in the request for a Struts ActionErrors
                instance. Struts stores this object whenever an ActionForm's validate() method
                returns a non-null value. This generator takes no configuration and its output looks
                like the following:</p>

            <xml-source>
                <errors>
                    <error property="errors.header">The following errors where found:</error>
                    <error property="userGuess">You entered 110. The number must be between 0 and 100</error>
                    <error property="errors.footer">Please try again.</error>
                </errors>
            </xml-source>

            <note>
                This generator uses the Struts application resources if available.
            </note>
        </section>

        <anchor id="URLGenerator"/>
        <section>
            <title>URL Generator</title>
            <p>
                The URL generator fetches a document from a URL and produces an XML output
                document. Common protocols such as <code>http</code>, <code>ftp</code>, and
                <code>file</code> are supported as well as the Presentation Server resource protocol
                (<code>oxf</code>). See the <link href="reference-resource-managers">Resource
                Managers</link> for more information about the <code>oxf</code> protocol.
            </p>
            <section>
                <title>Content Type</title>
                <p>
                    The URL generator operates in several modes depending on the content type of
                    the source document. The content type is determined according to the following
                    priorities:
                </p>
                <ol>
                    <li>
                        Use the content type in the <code>content-type</code> element if
                        <code>force-content-type</code> is set to <code>true</code>.
                    </li>
                    <li>
                        Use the content type set by the connection (for example, the content type
                        sent with the document by an HTTP server), if any. In particular when using
                        the <code>oxf</code> or <code>file</code> protocol, the connection content
                        type is never available. When using the <code>http</code> protocol, the
                        connection content type may or may not be available depending on the
                        configuration of the HTTP server.
                    </li>
                    <li>
                        Use the content type in the <code>content-type</code> element, if
                        specified.
                    </li>
                    <li>
                        Use <code>text/xml</code>.
                    </li>
                </ol>
            </section>
            <section>
                <title>XML Mode</title>
                <p>
                    The XML mode is selected when the content type is <code>text/xml</code>
                    according to the selection algorithm above. The generator fetches the specified
                    URL and parses the XML document. If the <code>validating</code> option is set
                    to <code>true</code>, a validating parser is used, otherwise a non-validating
                    parser is used. Using a validating parser allows to validate a document with a
                    DTD.
                </p>
                <p>
                    Example:
                </p>
                <xml-source>
                    <p:processor name="oxf:url-generator">
                        <p:input name="config">
                            <config>
                                <url>oxf:/urlgen/note.xml</url>
                                <content-type>text/xml</content-type>
                                <validating>true</validating>
                            </config>
                        </p:input>
                        <p:output name="data" id="xml"/>
                    </p:processor>
                </xml-source>
                <note>
                    The URL must point to a well-formed XML document. If it doesn't, an exception
                    will be raised.
                </note>
            </section>
            <section>
                <title>HTML Mode</title>
                <p>
                    The HTML mode is selected when the content type is <code>text/html</code>
                    according to the selection algorithm above. In this mode, the URL generator
                    uses <link href="http://tidy.sourceforge.net/">HTML Tidy</link> to transform
                    HTML into XML. This feature is useful to later extract information from HTML
                    using XPath.
                </p>
                <p>
                    Examples:
                </p>
                <xml-source>
                    <p:processor name="oxf:url-generator">
                        <p:input name="config">
                            <config>
                                <url>http://www.cnn.com</url>
                                <content-type>text/html</content-type>
                            </config>
                        </p:input>
                        <p:output name="data" id="html"/>
                    </p:processor>
                </xml-source>
                <xml-source>
                    <p:processor name="oxf:url-generator">
                        <p:input name="config">
                            <config>
                                <url>oxf:/html/example.html</url>
                                <content-type>text/html</content-type>
                                <force-content-type>true</force-content-type>
                            </config>
                        </p:input>
                        <p:output name="data" id="html"/>
                    </p:processor>
                </xml-source>
                <note>
                    Tidy has some tolerance for malformed HTML, but it is
                    encouraged to access well-formed HTML whenever possible.
                </note>
            </section>
            <section>
                <title>Encoding</title>
                <p>
                    When reading XML documents, the preferred method of determining the character
                    encoding is to leave the XML parser auto detect the encoding as per the XML
                    specification. In some rare instances, it may be necessary to override the
                    encoding. For this purpose, the <code>force-encoding</code> and
                    <code>encoding</code> elements can be used to override this default behavior,
                    for example:
                </p>
                <xml-source>
                    <p:processor name="oxf:url-generator">
                        <p:input name="config">
                            <config>
                                <url>oxf:/urlgen/note.xml</url><li>iso-8859-1</li>
                                <content-type>text/xml</content-type>
                                <encoding>iso-8859-1</encoding>
                                <force-encoding>true</force-encoding>
                            </config>
                        </p:input>
                        <p:output name="data" id="xml"/>
                    </p:processor>
                </xml-source>
                <p>
                    This use is discouraged, and should be reserved for cases where it is known that
                    a document specifies an incorrect encoding and it is not possible to modify the
                    document. Note that it does not make sense in the case of XML to use an
                    <code>encoding</code> element without <code>force-encoding</code> set to
                    <code>true</code>, because the XML parser will always select an encoding, be it
                    the default <code>utf-8</code>, and the <code>encoding</code> element will be
                    ignored.
                </p>
                <p>
                    When reading HTML documents, the following selection algorithm applies:
                </p>
                <ol>
                    <li>
                        Use the encoding in the <code>encoding</code> element if
                        <code>force-encoding</code> is set to <code>true</code>.
                    </li>
                    <li>
                        Use the encoding set by the connection (for example, the encoding sent with
                        the document by an HTTP server), if any. In particular when using the
                        <code>oxf</code> or <code>file</code> protocol, the connection encoding is
                        never available. When using the <code>http</code> protocol, the connection
                        encoding may or may not be available, and is usually specified along with
                        the content type in the <code>content-type</code> header, for example:
                        <code>content-type: text/html; charset=iso-8859-1</code>
                    </li>
                    <li>
                        Use the content type in the <code>content-type</code> element, if
                        specified.
                    </li>
                    <li>
                        Use <code>iso-8859-1</code>.
                    </li>
                </ol>
                <p>
                    Example:
                </p>
                <xml-source>
                    <p:processor name="oxf:url-generator">
                        <p:input name="config">
                            <config>
                                <url>http://www.cnn.com</url>
                                <content-type>text/html</content-type>
                                <encoding>iso-8859-1</encoding>
                            </config>
                        </p:input>
                        <p:output name="data" id="html"/>
                    </p:processor>
                </xml-source>
                <p>
                    In this version, only the following encodings are supported for HTML documents:
                </p>
                <ul>
                    <li>iso-8859-1</li>
                    <li>utf-8</li>
                </ul>
                <p>
                    Also note that use of the HTML <code>&lt;meta></code> tag to specify the
                    encoding from within an HTML document is not supported either.
                </p>
            </section>
            <a name="http-headers"/>
            <section>
                <title>HTTP Headers</title>
                <p>
                    When retrieving a document from an HTTP server, you can optionally specify the
                    headers sent to the server by adding one or more <code>header</code> elements,
                    as illustrated in the example below:
                </p>
                <xml-source>
                    <p:processor name="oxf:url-generator">
                        <p:input name="config">
                            <config>
                                <url>http://www.cnn.com</url>
                                <content-type>text/html</content-type>
                                <header>
                                    <name>User-Agent</name>
                                    <value>Mozilla/5.0</value>
                                </header>
                                <header>
                                    <name>Accept-Language</name>
                                    <value>en-us,fr-fr</value>
                                </header>
                            </config>
                        </p:input>
                        <p:output name="data" id="html"/>
                    </p:processor>
                </xml-source>
            </section>
            <section>
                <title>Cache Control</title>
                <p>
                    It is possible to configure whether the URL generator caches documents locally
                    in the Presentation Server cache. By default, it does. To disable caching, use
                    the <code>cache-control/use-local-cache</code> element, for example:
                </p>
                <xml-source>
                    <p:processor name="oxf:url-generator">
                        <p:input name="config">
                            <config>
                                <url>http://www.cnn.com</url>
                                <content-type>text/html</content-type>
                                <cache-control>
                                    <use-local-cache>false</use-local-cache>
                                </cache-control>
                            </config>
                        </p:input>
                        <p:output name="data" id="html"/>
                    </p:processor>
                </xml-source>
                <p>
                    Using the local cache causes the URL generator to check if the document is in
                    the Presentation Server cache first. If it is, its validity is checked with the
                    protocol handler (looking at the last modified date for files, the
                    <code>last-modified</code> header for http, etc.). If the cached document is
                    valid, it is used. Otherwise, it is fetched and put in the cache.
                </p>
                <p>
                    When the local cache is disabled, the document is never revalidated and always
                    fetched.
                </p>
            </section>
        </section>

        <anchor id="SessionGenerator"/>
        <section>
            <title>Session Generator</title>
            <p>
                The Session generator outputs the XML document stored in the HTTP session, under
                the specified key. If no document is stored under the specified key, this generator
                will send a null document with key as root element.
            </p>
            <warning>
                The XML document must be stored with the
                <link
                    href="processors-serializers#SessionSerializer">SessionSerializer</link>
                in the session
            </warning>

            <xml-source>
                <p:processor name="oxf:session-generator">
                    <p:input name="config">
                        <key>cart</key>
                    </p:input>
                    <p:output name="data" id="session"/>
                </p:processor>
            </xml-source>
            <p>If the session doesn't contain a document under
                the
                <code>cart</code> key, the following document is
                generated:
            </p>
            <xml-source>
                <cart xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:nil="true"/>
            </xml-source>
        </section>

        <anchor id="RequestSecurityGenerator"/>
        <section>
            <title>Request Security Generator</title>
            <p>
                The Request Security generator extracts information about the currently logged user
                from the HTTP request. Its optional configuration contains a list of roles the
                application developer is interested in. Only those roles will be listed in the
                generator's output if the role is present. For instance, the output of the request
                security generator could be:
            </p>
            <xml-source>
                <request-security>
                    <auth-type>FORM</auth-type>
                    <secure>true</secure>
                    <remote-user>scott</remote-user>
                    <role>user</role>
                </request-security>
            </xml-source>

            <p>
                The
                <code>auth-type</code> element contains either
                <code>BASIC</code>,
                <code>FORM</code>,
                <code>CLIENT_CERT</code>, or
                <code>DIGEST</code>. The
                <code>secure</code> element is true if the request was made
                using a secure channel, such as HTTPS. See the
                <link
                    href="http://jakarta.apache.org/tomcat/tomcat-4.1-doc/servletapi/index.html">Servlet
                    API</link> for more information.
            </p>
            <xml-source>
                <p:processor name="oxf:request-security">
                    <p:input name="config">
                        <config>
                            <role>user</role>
                            <role>admin</role>
                        </config>
                    </p:input>
                    <p:output name="data" id="request-security"/>
                </p:processor>
            </xml-source>
        </section>

        <anchor id="servletinclude"/>
        <section>
            <title>Servlet Include Generator</title>
            <p>
                The Servlet Include generator, using the <a
                href="http://jakarta.apache.org/tomcat/tomcat-4.1-doc/servletapi/javax/servlet/RequestDispatcher.html">RequestDispatcher</a>,
                calls and parses the result of another servlet running in the same Java virtual
                machine. The servlet can generate either XML or HTML. The generator automatically
                detects HTML and uses HTMLTidy to clean and parse the stream as XML.
            </p>
            <note>
                This generator works only in a servlet environment. It is not supported in portlets.
            </note>
            <section>
                <title>Config Input</title>
                <p>
                    The <code>config</code> input describes the servlet to call, and optionally
                    configures the HTMLTidy process. You can specify the servlet either by name or
                    path, and optionally specify a context path. The RelaxNG schema for this input
                    is the following:
                </p>
                <xml-source>
                    <element name="config" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"
                        xmlns="http://relaxng.org/ns/structure/1.0">
                        <interleave>
                            <choice>
                                <element name="servlet-name">
                                    <data type="string"/>
                                </element>
                                <element name="path">
                                    <data type="string"/>
                                </element>
                            </choice>
                            <optional>
                                <element name="context-uripath">
                                    <data type="string"/>
                                </element>
                            </optional>
                            <optional>
                                <element name="tidy-options">
                                    <interleave>
                                        <optional>
                                            <element name="show-warnings">
                                                <choice>
                                                    <value>true</value>
                                                    <value>false</value>
                                                </choice>
                                            </element>
                                            <optional>
                                                <element name="quiet">
                                                    <choice>
                                                        <value>true</value>
                                                        <value>false</value>
                                                    </choice>
                                                </element>
                                            </optional>
                                        </optional>
                                    </interleave>
                                </element>
                            </optional>
                        </interleave>
                    </element>
                </xml-source>
            </section>
            <section>
                <title>Data Output</title>
                <p>
                    The data output contains the result in the servlet include call.
                </p>
            </section>
            <section>
                <title>Example</title>
                <p>
                    This generator calls the <code>reports</code> servlet in the
                    <code>/admin</code> context path. Since this servlet is generating HTML, it's
                    better to have verbose error reporting from HTMLTidy.
                </p>
                <xml-source>
                    <p:processor name="oxf:servlet-include">
                        <p:input name="config">
                            <config>
                                <servlet-name>reports</servlet-name>
                                <context-path>/admin</context-path>
                                <tidy-options>
                                    <show-warnings>true</show-warnings>
                                    <quiet>false</quiet>
                                </tidy-options>
                            </config>
                        </p:input>
                        <p:output name="data" id="#report"/>
                    </p:processor>
                </xml-source>
            </section>
        </section>
    </body>
</document>
