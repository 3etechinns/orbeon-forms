<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
    Copyright (C) 2004 Orbeon, Inc.

    The Orbeon documentation is not distributed under the LGPL license. Use of the documentation is
    subject to the following terms:

    * Conversion to other formats is allowed, but the actual content may not be altered or edited
      in any way.

    * You may create printed copies for your own personal use.

    * For all other uses, such as selling printed copies or using (parts of) the manual in another
      publication, prior written agreement from Orbeon, Inc. is required.

    Please contact Orbeon at info@orbeon.com for more information.
-->
<document xmlns:p="http://www.orbeon.com/oxf/pipeline" xmlns:xforms="http://www.w3.org/2002/xforms" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xxforms="http://orbeon.org/oxf/xml/xforms" xmlns:oxf="http://www.orbeon.com/oxf/processors" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <header>
        <title>Changes</title>
    </header>
    <body>
        <section>
            <title>New in Version 2.6.x</title>
            <section>
                <title>eXist Native XML Database</title>
                <p>
                    Presentation Server ships with the latest stable version of eXist
                    (eXist-1.0b2-build-1107). This fixes the issue of connecting to an external
                    eXist instance. Here is an example <code>datasource.xml</code> to connect to a
                    standalone eXist:
                </p>
                <xml-source>
                    <datasource>
                        <comment> Specify the driver for the eXist database </comment>
                        <driver-class-name>org.exist.xmldb.DatabaseImpl</driver-class-name>
                        <comment> Example of URL for a non-embedded use </comment>
                        <uri>xmldb:exist://localhost:8080/exist/xmlrpc</uri>
                    </datasource>
                </xml-source>
            </section>
            <section>
                <title>SQL Processor</title>
                <p>
                    The SQL processor now supports external datasource definitions using the
                    optional <code>datasource</code> input. Those directly refer to connections
                    without using JNDI names mapped by the container. This allows examples to work
                    out of the box. This is an example of datasource definition:
                </p>
                <xml-source>
                    <datasource>
                        <comment> Specify the driver for the database </comment>
                        <driver-class-name>org.hsqldb.jdbcDriver</driver-class-name>
                        <comment> This causes the use of the embedded database </comment>
                        <uri>jdbc:hsqldb:file:orbeondb</uri>
                        <comment> Optional username and password </comment>
                        <username>sa</username>
                        <password></password>
                    </datasource>
                </xml-source>
                <p>
                    Presentation Server ships with a recent version of HSQLDB (version 1.7.2.8).
                </p>
                <p>
                    The SQL processor now supports reading <code>BINARY</code>, <code>VARBINARY
                    </code>and <code>LONGVARBINARY</code> columns in addition to <code>BLOB</code>.
                </p>
                <p>
                    The SQL processor's <code>data</code> input and output are now optional. This
                    removes the need for "dummy" input content or Null serializers with the SQL
                    processor.
                </p>
            </section>
            <section>
                <title>Examples</title>
                <p>
                    All the examples using the SQL processor now work out of the box without
                    configuring datasources at the application server or servlet container level.
                    This includes the following examples:
                </p>
                <ul>
                    <li>Address Book</li>
                    <li>Employees</li>
                    <li>Data in multiple formats</li>
                    <li>XForms Upload</li>
                    <li>Email</li>
                </ul>
            </section>
            <section>
                <title>Saxon Upgraded to Version 8.1.1</title>
                <p>
                    TODO
                </p>
            </section>
            <section>
                <title>XPath Improvements</title>
                <p>
                    TODO
                </p>
            </section>
            <section>
                <title>JBoss Support</title>
                <p>
                    TODO
                </p>
            </section>
            <section>
                <title>XForms</title>
                <section>
                    <title>xxforms:hidden Extension Control</title>
                    <p>
                        The XForms extension control <code>xxforms:hidden</code> is supported again
                        and documented.
                    </p>
                </section>
                <section>
                    <title>Other XForms Improvements</title>
                    <p>
                        TODO
                    </p>
                </section>
            </section>
            <section>
                <title>URL generator</title>
                <section>
                    <title>Relative URLs</title>
                    <p>
                        The <a href="processors-generators-url">URL generator</a> now supports
                        URLs relative to the location where the generator is used, instead of just
                        absolute URLs.
                    </p>
                </section>
                <section>
                    <title>XInclude Dependencies</title>
                    <p>
                        The <a href="processors-generators-url">URL generator</a> also deals
                        correctly with XInclude dependencies. For example, if a file called
                        <code>file1.xml</code> includes a file called <code>file2.xml</code>, which in
                        turn includes a file called <code>file3.xml</code>, and you modify
                        <code>file3.xml</code>, then <code>file1.xml</code> is re-read automatically.
                        Of course, this works with other dependency scenarios as well!
                    </p>
                </section>
            </section>
            <section>
                <title>User-Defined Processor Inputs</title>
                <p>
                    User-defined processor inputs, used by several processors including the XSLT
                    processor and the Email processor, are now documented (<a
                    href="reference-xpl-pipelines#optional">XPL documentation</a>, <a
                    href="processors-xslt#user-defined">XSLT documentation</a>). The URI schemes to
                    access user-defined inputs and outputs are now <code>input:</code> and
                    <code>output:</code>, to avoid confusion with the <code>oxf:</code> scheme used
                    for the Presentation Server resource manager sandbox.
                </p>
            </section>
            <section>
                <title>Error Processor</title>
                <p>
                    The error processor now follows the same configuration mechanism as the main
                    processor. The following property names have been deprecated:
                </p>
                <ul>
                    <li><code>oxf.servlet.error.processor.uri</code></li>
                    <li><code>oxf.servlet.error.input.*</code></li>
                </ul>
                <p>
                    The new names are as follows:
                </p>
                <ul>
                    <li><code>oxf.error-processor.name</code></li>
                    <li><code>oxf.error-processor.input.*</code></li>
                </ul>
                <p>
                    Visit <a href="integration-packaging#error-processor">Packaging and
                    Deployment</a> for more information on configuring the error processor, as well
                    as <a href="reference-error-pipeline">Error Pipeline</a> for information about
                    creating an error pipeline.
                </p>
            </section>
        </section>
        <section>
            <title>New in Version 2.6</title>
            <section>
                <a name="2.6-xforms"/>
                <title>XForms</title>
                <section>
                    <title>XForms Upload</title>
                    <p>
                        The XForms Upload control has been fixed. It comes with an <a
                        href="/goto-example/xforms-upload">example</a> and is documented in the <a
                        href="/doc/reference-xforms#upload">XForms reference documentation</a>.
                    </p>
                </section>
                <section>
                    <title>XForms Conditionals</title>
                    <p>
                       Two new extension controls provide a mechanism to selectively enable markup and other XForms controls depending of
                       the values stored in the XForms instance. The syntax is modeled after the XSLT language:
                       <code>if</code> and <code>choose/when/otherwise</code>. See the <a href="reference-xforms#conditionals">XForms Conditionals</a>
                       documentation for more information.
                    </p>
                </section>
                <section>
                    <title>Itemset Support</title>
                    <p>
                        The XForms element <code>&lt;itemset></code> is now supported. You can use it
                        in conjunction with XForms selection controls
                        (<code>&lt;xforms:select</code> and <code>&lt;xforms:select1></code>) when
                        you want the list of items the end-user has to pick from to come from the
                        instance, instead of being listed in view. For more details, see the <a
                        href=" reference-xforms#xforms-controls">XForms controls</a> documentation
                        and the <a href="../goto-example/xforms-selection">Selection Controls</a>
                        example.
                    </p>
                </section>
                <section>
                    <title>Support for ref Attribute on Label, Alert, Help, and Hint</title>
                    <p>
                        You can now use the <code>ref</code> attribute on
                        <code>&lt;xforms:label></code>, <code>&lt;xforms:alert></code>,
                        <code>&lt;xforms:help></code>, and <code>&lt;xforms:hint></code> to have the
                        displayed message come from the instance instead of being specified in the
                        view. For more details, see the <a
                        href="reference-xforms#label-alert-help-hint">Label, Alert, Help, and
                        Hint</a> documentation.
                    </p>
                </section>
                <section>
                    <title>Support for ref Attribute on Submit Controls</title>
                    <p>
                        You can now bind a submit control (<code>&lt;xforms:submit></code>) to a
                        node in the instance with the <code>ref</code> attribute. If you do so, the
                        submit control will only be displayed if the node it is bound to is
                        relevant. This way you can define in the XForms model rules that specify
                        when a submit control is to be displayed.
                    </p>
                </section>
            </section>
            <a name="2.6-binary"/>
            <section>
                <title>Standard Representation of Binary and Text Documents</title>
                <p>
                    In Presentation Server <a href="reference-xpl-pipelines">XPL and pipelines</a>
                    only deal with XML documents. In order to handle non-XML data such as binary and
                    text documents in pipelines, Presentation Server defines <a
                    href="reference-formats">two standard XML document formats</a> to embed binary
                    and text documents within an XML infoset. This solution has the benefit of
                    keeping XPL simple by limiting it to pure XML infosets, while allowing XPL to
                    conveniently manipulate any binary and text document.
                </p>
                <p>
                    These document formats are widely used by processors such as the <a
                    href="processors-generators-url">URL generator</a>, the <a
                    href="processors-serializers-http">HTTP serializer</a>, the <a
                    href="processors-messaging#email-processor">Email processor</a>, and <a
                    href="processors-converters">converters</a>.
                </p>
            </section>
            <a name="2.6-body"/>
            <section>
                <title>Improved Request Body and Uploaded Files Support</title>
                <p>
                    It was possible in the past with the <a
                    href="processors-generators-request">Request generator</a> to obtain
                    the request body, which was automatically parsed as XML. This behavior has now
                    been changed. It is instead possible to obtain the request body as
                    <code>xs:anyURI</code> or <code>xs:base64Binary</code> (<a
                    href="reference-formats#binary-documents">standard binary document format</a>).
                    Parsing may then be done using the <a
                    href="processors-generators-url">URL generator</a>. In addition, the
                    body can now be read several times. This change brings consistency with the
                    handling of uploaded files, and the support for binary files thoughout
                    Presentation Server.
                </p>
                <p>
                    In a related change, the <a
                    href="processors-generators-request">Request generator</a> now
                    supports specifying whether uploaded files or the request body must be generated
                    as <code>xs:anyURI</code> or <code>xs:base64Binary</code>.
                </p>
            </section>
            <a name="2.6-url"/>
            <section>
                <title>URL Generator</title>
                <section>
                    <title>Binary Mode</title>
                    <p>
                        The <a href="processors-generators-url">URL generator</a> now
                        supports streaming binary files encoded with Base64. The <a
                        href="/goto-example/xforms-upload">XForms Upload example</a>, among others,
                        illustrates this capability.
                    </p>
                </section>
                <section>
                    <title>Text Mode</title>
                    <p>
                        The <a href="processors-generators-url">URL generator</a> now
                        supports reading text files. The <a
                        href="/goto-example/employees">Employees example</a> illustrates this
                        capability.
                    </p>
                </section>
                <section>
                    <title>XML Content Type</title>
                    <p>
                        The <a href="processors-generators-url">URL generator</a> now
                        correctly detects as XML the following content types:
                    </p>
                    <ul>
                        <li><code>application/xml</code>, the recommended content type for XML</li>
                        <li><code>text/xml</code>, the now deprecated content type for XML</li>
                        <li>content types ending with <code>+xml</code> such as <code>image/svg+xml</code></li>
                    </ul>
                </section>
            </section>
            <a name="2.6-serializer"/>
            <section>
                <title>Serializers</title>
                <section>
                    <title>New Serializer Architecture</title>
                    <p>
                        The pre-2.6 serializer architecture did not clearly separate the following
                        concerns:
                    </p>
                    <ul>
                        <li>Conversion of XML documents to a character or byte stream.</li>
                        <li>
                            Sending a character or text stream to a particular destination, such as
                            a web browser through HTTP, or a file on disk.
                        </li>
                    </ul>
                    <p>
                        The new architecture introduces <a
                        href="processors-converters">converters</a> in charge of the first task, and
                        plain <a href="processors-serializers">serializers</a> in charge of the
                        second task. It relies on the <a href="reference-formats">standard
                        representation</a> for binary and texts documents.
                    </p>
                    <p>
                        Backward compatibility for existing serializers is kept, but it is
                        recommended to use the new converters and serializers whenever possible.
                    </p>
                </section>
                <section>
                    <title>HTTP Serializer</title>
                    <p>
                        A new serializer, the <a href="processors-serializers-http">HTTP
                        serializer</a>, supports decoding of binary or text data, and sending the
                        resulting stream to an HTTP client. The <a
                        href="/goto-example/xforms-upload">XForms Upload example</a> illustrates
                        this capability. The HTTP serializer can be used for example in conjunction
                        with <a href="processors-converters">converters</a> and the URL generator.
                    </p>
                    <p>
                        The <a href="processors-serializers-http">HTTP serializer</a>
                        uses the recommended <code>application/xml</code> content type by default
                        rather than <code>text/xml</code>.
                    </p>
                </section>
                <section>
                    <title>New Configuration Parameters</title>
                    <p>
                        The <code>omit-xml-declaration</code> and <code>standalone</code>
                        configuration parameters of the <a
                        href="processors-converters#xml-converter">XML converter</a> are now
                        documented. The <code>cache-control/use-local-cache</code> configuration
                        parameter of the <a href="processors-serializers-http">HTTP
                        serializer</a> is now documented.
                    </p>
                </section>
            </section>
            <a name="2.6-examples"/>
            <section>
                <title>Examples</title>
                <section>
                    <title>BizDoc Application Changes</title>
                    <p>
                        The data access layer of the BizDoc application has been refactored to support
                        the following backends:
                    </p>
                    <ul>
                        <li>
                            <b>XML databases:</b> XML documents are accessed through the XML:DB
                            processors. Currently, the backend assumes the built-in open source eXist
                            database.
                        </li>
                        <li>
                            <b>SQL databases:</b> XML documents are accessed as a text or native XML
                            format.
                        </li>
                    </ul>
                    <p>
                        It is now possible to visualize each document as XML from the user interface.
                    </p>
                </section>
                <section>
                    <title>New "Employees" Example</title>
                    <p>
                        The new <a href="/goto-example/employees">Employees example application</a>
                        illustrates the following aspects of Presentation Server:
                    </p>
                    <ul>
                        <li>CRUD operations, paging and sorting with a SQL backend</li>
                        <li>XForms controls and validation with XML Schema</li>
                        <li>XForms upload control</li>
                        <li>Reading plain text files</li>
                        <li>Using the Java processor</li>
                        <li>Exporting Comma-Separated Values (CSV) files</li>
                        <li>Exporting and importing Excel files</li>
                        <li>Calling and implementing Web Service</li>
                        <li>Authentication (login / logout) and roles</li>
                        <li>LDAP access</li>
                    </ul>
                </section>
            </section>
            <a name="2.6-pageflow"/>
            <section>
                <title>Page Flow</title>
                <p>
                    XSLT views in <a href="reference-controller">Page Flow</a> can now access the
                    XForms instance using <code>document('input:instance')</code> or
                    <code>doc('input:instance')</code>. In the past, it was often necessary for the
                    model to aggregate its output with the XForms instance to make both documents
                    accessible from the view.
                </p>
            </section>
            <a name="2.6-email"/>
            <section>
                <title>Email Processor</title>
                <p>
                    The <a href="processors-messaging#email-processor">Email processor</a> features the
                    following improvements:
                </p>
                <ul>
                    <li>
                        <b>Multipart hierarchy:</b> it is possible to have multiple levels of
                        multipart messages.
                    </li>
                    <li>
                        <b>Binary attachments:</b> binary files such as images and PDF files can be
                        attached to an email.
                    </li>
                    <li>
                        <b>Dynamic attachments:</b> attachments can be generated dynamically. It is
                        for example possible to attach a dynamically generated chart or PDF file.
                    </li>
                    <li>
                        <b>Character encoding:</b> character encoding can be specified for text content.
                    </li>
                </ul>
                <p>
                    In addition, property naming has been revisted. The <code>test-smtp-host</code>
                    and <code>test-to</code> replace the deprecated <code>host</code> and
                    <code>forceto</code> properties.
                </p>
            </section>
            <a name="2.6-custom"/>
            <section>
                <title>Custom Processors</title>
                <p>
                    There is a new facility to declare custom processors that does not involve
                    modifying the original <code>processors.xml</code> file. To do this, create a
                    file called <code>oxf:/config/custom-processors.xml</code>. Its format is the
                    same as the original <code>processors.xml</code>.
                </p>
                <p>
                    The <code>Processor</code> API has been enhanced to provide access to the inputs
                    and outputs actually connected (as opposed to just those that have been
                    declared). This provides access to optional inputs and outputs. Please refer to
                    the Javadoc for the <code>Processor</code> class for more information, as well
                    as the <code>ListInputs</code> unit test.
                </p>
            </section>
            <a name="2.6-webdav"/>
            <section>
                <title>WebDAV Resource Manager</title>
                <p>
                    A <a href="reference-resource-managers#webdav">WebDAV resource manager</a> is
                    now included. It supports basic authentication.
                </p>
            </section>
            <a name="2.6-java5"/>
            <section>
                <title>J2SE 5.0 Support</title>
                <p>
                    The source code of Presentation Server now compiles with Java 5.
                </p>
            </section>
        </section>
        <section>
            <title>Version 2.5</title>
            <p>
                Changes in version 2.5 are listed in a <a href="home-changes-25">separate
                document</a>.
            </p>
        </section>
        <section>
            <title>Version 2.2 and Earlier</title>
            <p>
                Changes in version 2.2 and earlier are listed in a <a
                href="home-changes-older">separate document</a>.
            </p>
        </section>
    </body>
</document>
