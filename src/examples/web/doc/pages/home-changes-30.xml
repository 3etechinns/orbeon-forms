<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
    Copyright (C) 2004 Orbeon, Inc.

    The Orbeon documentation is not distributed under the LGPL license. Use of the documentation is
    subject to the following terms:

    * Conversion to other formats is allowed, but the actual content may not be altered or edited
      in any way.

    * You may create printed copies for your own personal use.

    * For all other uses, such as selling printed copies or using (parts of) the manual in another
      publication, prior written agreement from Orbeon, Inc. is required.

    Please contact Orbeon at info@orbeon.com for more information.
-->
<document xmlns:p="http://www.orbeon.com/oxf/pipeline" xmlns:xforms="http://www.w3.org/2002/xforms"
        xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xxforms="http://orbeon.org/oxf/xml/xforms"
        xmlns:oxf="http://www.orbeon.com/oxf/processors" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <header>
        <title>Changes in Version 3.0 BETA</title>
    </header>
    <body>
        <section>
            <title>Introduction</title>
            <p>
                Welcome to OPS 3.0 BETA!
            </p>
            <p>
                OPS 3.0 features an XForms engine much improved over OPS 2.8's, significant
                improvements in the Page Flow Controller, and much more!
            </p>
            <p>
                The purpose of the OPS 3.0 BETA is to provide you with a first glimpse of the OPS
                3.0 functionality, while OPS developers keep ironing out the last bugs and finishing
                up the documentation! During the beta period, we are looking for as much feedback as
                possible related to all the aspects of the OPS 3.0 BETA release.
            </p>
            <p>
                Please use the <a href="http://forge.objectweb.org/mail/?group_id=168">ops-users
                mailing-list</a> for feedback about OPS 3.0 BETA.
            </p>
        </section>
        <section>
            <title>Known Limitations of OPS 3.0 BETA (nightly build)</title>
            <p>
                The following limitations are known:
            </p>
            <ul>
                <li>
                    <p>
                        Initial generation of an XForms page may have poor performance.
                    </p>
                </li>
                <li>
                    <p>
                        Image and link appearances are not supported for the
                        <code>xforms:submit</code> and <code>xforms:trigger</code> controls.
                    </p>
                </li>
                <li>
                    <p>
                        The <code>xforms:message</code> action is not implemented.
                    </p>
                </li>
                <li>
                    <p>
                        Not all the OPS examples have been updated to reflect the new XForms engine
                        capabilities.
                    </p>
                </li>
                <li>
                    <p>
                        The OPS reference XForms documentation has not yet been updated to reflect
                        all the changes in OPS 3.0. Please refer to the "XForms NG" examples for
                        details.
                    </p>
                </li>
                <li>
                    <p>
                        The OPS reference XForms compliance matrix has not yet been updated to
                        reflect all the changes in OPS 3.0.
                    </p>
                </li>
                <li>
                    <p>
                        Migration documentation from 2.8 to 3.0 is not complete yet.
                    </p>
                </li>
                <li>
                    <p>
                        The OPS Tutorial has not been updated for 3.0.
                    </p>
                </li>
                <li>
                    <p>
                        The OPS Blog example is not complete.
                    </p>
                </li>
                <li>
                    <p>
                        The Ajax-based XForms engine currently works with Mozilla Firefox and
                        Microsoft Internet Explorer 6. Support for Opera and Safari is planned.
                    </p>
                </li>
                <li>
                    <p>
                        This release has only been tested with Tomcat.
                    </p>
                </li>
                <li>
                    <p>
                        The PDF version of the User Guide does not have page numbers.
                    </p>
                </li>
            </ul>
        </section>
        <section>
            <title>Known Limitations of OPS 3.0</title>
            <p>
                The following limitations are known:
            </p>
            <ul>
                <li>
                    <p>
                        XForms upload controls only work within forms that are submitted with a
                        reference to a submission element with <code>replace="all"</code>. The value
                        of XForms upload controls is ignored when forms are submitted with
                        <code>replace="instance"</code> or <code>replace="none"</code>.
                    </p>
                </li>
                <li>
                    <p>
                        At most one XML schema is allowed on a particular XForms model.
                    </p>
                </li>
            </ul>
        </section>
        <section>
            <title>XForms</title>
            <section>
                <title>New Features</title>
                <img src="/images/xforms-powered-86x31.png" style="border: 0px; float: right"/>
                <p>
                    The OPS XForms engine introduces a big step towards supporting all of the XForms
                    1.0 specification. The main changes are described below. Please also visit the
                    new XForms examples, in particular the <a
                    href="/goto-example/xforms-controls">XForms Controls</a>, the <a
                    href="/goto-example/bizdoc2">BizDoc NG</a> example, and the <a
                    href="/goto-example/xforms-sandbox">XForms Sandbox</a> example.
                </p>
                <ul>
                    <li>
                        <p>
                            <b>Ajax-based engine.</b> The XForms engine is now based on Ajax
                            technologies. This makes the XForms engine much more responsive to user
                            interaction than with OPS 2.8.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>Standard XHTML integration.</b> The XForms engine works on standard XHTML
                            + XForms documents, without the need for a separately described XForms model
                            as was the case with OPS 2.8. XForms models are simply included in the
                            XHTML page view under the <code>&lt;xhtml:head&gt;</code> element, as
                            recommended by XForms 1.0. In this mode, you don't use the
                            <code>xforms</code> attribute on the PFC <code>&lt;page&gt;</code>
                            elements. The <code>xforms</code> attribute is still supported for backward
                            compatibility, but its use triggers the use of the legacy OPS 2.8 XForms
                            engine.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>XForms event model.</b> The XForms engine supports the XForms event
                            model, most XForms events and all XForms actions.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>Multiple XForms models and instances.</b> The XForms engine supports
                            multiple models and multiple instances within models. The
                            <code>instance()</code> function is supported.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>XForms switch module.</b> The XForms engine fully supports the XForms
                            switch module.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>XForms repeat module.</b> The XForms engine supports correctly the
                            current index in repeated sections, including the <code>index()</code>
                            function.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>XForms submission.</b> The XForms engine supports submitting forms as
                            <code>application/xml</code>, including to external applications. Support
                            for <code>replace="instance"</code>, <code>replace="all"</code>, and
                            <code>replace="none"</code> is included.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>XForms Range control.</b> The XForms engine supports a subset of the
                            functionality of the XForms Range (or slider) control.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>Extension functions.</b> The XForms engine supports the
                            <code>xxforms:call-xpl()</code> extension function to call arbitrary XPL
                            programs from XForms.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>Dynamic XForms models.</b> The new XForms engine and PFC improvements
                            now allow to easily generate XForms models based on XML submissions. With
                            OPS 2.8, this was much more difficult as this had to be done in a dynamic
                            XForms model pipeline, which did not have access to an XML submission.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>Simplified theme.</b> The default theme and XForms make more use of CSS
                            so that configuration of your own theme is easier.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>XForms sandbox.</b> The new <a
                            href="/goto-example/xforms-sandbox">XForms Sandbox</a> example allows
                            you to easily try your own XForms examples. Just write and XHTML +
                            XForms example, upload it, and watch the results!
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>Other changes.</b> The XForms engine supports the <code>value</code>
                            attribute on <code>xforms:output</code>, handles inheritance of model item
                            properties, and includes numerous bug fixes.
                        </p>
                    </li>
                    <li>
                        <p>
                            TODO: document (X)HTML attributes supported on XForms elements: id, class,
                            navindex, accesskey, plus tabindex, style, and how to handle other
                            attributes (xhtml:*).
                        </p>
                    </li>
                </ul>
                <p>
                    TODO: link to updated XForms conformance map.
                </p>
            </section>
            <section>
                <title>Incompatible changes</title>
                <ul>
                    <li>
                        <p>
                            XSLT views now must always use <code>doc('input:instance')</code> to access
                            a submitted XML instance instead of expecting the instance on their main
                            input.
                        </p>
                    </li>
                    <li>
                        <p>
                            With OPS 2.8 if your XForms instance was:
                        </p>
                        <xml-source>
                            <credit-card>
                                <type>visa</type>
                                ...
                            </credit-card>
                        </xml-source>
                        <p>
                            and your first XForms element under the <code>&lt;xhtml:body&gt;</code>
                            element was:
                        </p>
                        <xml-source>
                            <xforms:group ref="credit-card"/>
                        </xml-source>
                        <p>
                            then <code>credit-card</code> would evaluate against the <i>document
                            node</i> of the unique XForms instance. The above code worked, but this
                            behavior was incorrect. The XPath evaluation context for top-level XForms
                            controls has to be the root <i>element</i> of the default XForms instance
                            instead. This means that the code above must be changed in one of two ways:
                        </p>
                        <xml-source>
                            <xforms:group ref="/credit-card"/>
                        </xml-source>
                        <p>
                            or:
                        </p>
                        <xml-source>
                            <xforms:group ref="."/>
                        </xml-source>
                        <p>
                            If you already use absolute XPath expressions for your top-level XForms
                            controls, no change is necessary.
                        </p>
                    </li>
                    <li>
                        <p>
                            With OPS 2.8, the "required" model item property did not apply at all to
                            elements validated with XML schemas. If for example a value was of type
                            <code>xs:string</code> but missing and required, it was marked as valid
                            (which was correct) but submission would pass. With OPS 3.0, nodes
                            which are "valid", "required" and empty will cause submission to fail.
                            Be sure to check your types and "required" model item properties.
                        </p>
                    </li>
                </ul>
            </section>
            <section>
                <title>Migrating to the OPS 3.0 XForms Engine</title>
                <warning>
                    <p>
                        By default, your applications written against OPS 2.8 will use the legacy
                        2.8 XForms engine in OPS 3.0. With OPS 3.0, you use XForms in the way you
                        expect when combining XForms with XHTML, in that you do not declare an
                        XForms model separately from your XHTML page.
                    </p>
                </warning>
                <p>
                    In order to leverage most of the new features of XForms 3.0, it is necessary to
                    migrate your forms. This is a list of tasks to accomplish and possible caveats:
                </p>
                <ul>
                    <li>
                        <p>
                            For a given <code>&lt;page&gt;</code> element:if your OPS 2.8 XForms
                            model is static (which is usually the case), copy it under your XHTML
                            page view's <code>xhtml:head</code> element. Then remove the
                            <code>xforms</code> attribute from the <code>&lt;page&gt;</code>
                            element. You can then remove the file containing your XForms model.
                        </p>
                        <p>
                            Another possibility is to keep your XForms model file, and to XInclude
                            that file in your XHTML page view under the <code>xhtml:head</code>
                            element. Here again, you must remove the <code>xforms</code> attribute
                            from the <code>&lt;page&gt;</code> element.
                        </p>
                    </li>
                    <!--
                    <li>
                        <p>
                            With OPS 2.8,
                        </p>
                    </li>
                    -->
                    <li>
                        <p>
                            TODO: xforms:submission and xforms:submit (id, action, method).
                        </p>
                    </li>
                    <li>
                        <p>
                            TODO: handling submissions: there are no longer roundtrips which are
                            visible to the PFC for xforms:repeat, etc.
                        </p>
                    </li>
                    <li>
                        <p>
                            TODO: instance validation (remove from PFC, do it with XForms).
                            Question of custom instance validation.
                        </p>
                    </li>
                    <li>
                        <p>
                            TODO: converting dynamic XForms models.
                        </p>
                    </li>
                    <li>
                        <p>
                            TODO: using events.
                        </p>
                    </li>
                    <li>
                        <p>
                            TODO: more?
                        </p>
                    </li>
                </ul>
            </section>
        </section>
        <section>
            <title>Page Flow</title>
            <p>
                Several improvements have been added to the Page Flow Controller, some of them
                motivated by the new XForms engine. The PFC is now more generic and less tied to
                the built-in OPS XForms implementation. At the same time it plays better than before
                with XForms, including client-side XForms engines. The major PFC concepts found
                with OPS 2.8 have not changed and backward compatibility is kept. The main changes
                are the following:
            </p>
            <ul>
                <li>
                    <p>
                        <b>Documentation.</b> The <a href="reference-page-flow">PFC
                        documentation</a> has been reworked and greatly improved.
                    </p>
                </li>
                <li>
                    <p>
                        <b>Standard Epilogue.</b> The standard epilogue has been restructured into
                        three separate files so as to be easier to understand, modify, and extend.
                        It is <a href="reference-epilogue">fully documented</a>.
                    </p>
                </li>
                <li>
                    <p>
                        <b>Deprecation of the <code>xforms</code> attribute.</b> Using XForms with OPS
                        no longer implies using an <code>xforms</code> attribute on the
                        <code>&lt;page&gt;</code> element. Instead, XForms models are included in
                        the XHTML page view under the <code>&lt;xhtml:head&gt;</code> element, as
                        recommended by XForms 1.0. The <code>xforms</code> attribute is still
                        supported for backward compatibility, and triggers the use of the legacy OPS
                        2.8 XForms engine.
                    </p>
                </li>
                <li>
                    <p>
                        <b>New XML submission mechanism.</b> The PFC features a new generic XML
                        submission mechanism. Each page in the PFC, instead of supporting native
                        OPS XForms engine submissions, now supports generic XML submissions. You
                        submit XML by POST-ing content with an XML content-type (other types of XML
                        submissions can be added). XML submissions can be performed from external
                        applications (through Web Services, XML-RPC, etc.), client-side XForms
                        engines, the built-in OPS XForms engine, or by the PFC itself when
                        navigating between pages.
                    </p>
                </li>
                <li>
                    <p>
                        <b>Deprecation of the <code>&lt;param&gt;</code> element.</b> The PFC's
                        <code>&lt;param&gt;</code> element was used to set values into a submitted
                        XForms instance. A new, more flexible element,
                        <code>&lt;setvalue&gt;</code>, now performs the same task. The
                        <code>&lt;setvalue&gt;</code> element supports extracting information from
                        regular expressions applied to the request path, as well as extracting
                        request parameters. This allows for creating "clean", REST-like URLs in
                        your appliation. <code>param</code> is still supported for backward
                        compatibility.
                    </p>
                </li>
                <li>
                    <p>
                        <b>Generic XML submission transformations.</b> The PFC features a new
                        generic and extensible XML submission transformation mechanism. With OPS
                        2.8, XUpdate code had to be used to transform XML instances between pages.
                        XUpdate support in the PFC is now deprecated. Instead, XSLT or XQuery
                        should be used for that purpose. For more information, please refer to the
                        <a href="reference-page-flow#result-element"><code>&lt;result&gt;</code>
                        element section</a> of the PFC documentation.
                    </p>
                </li>
                <li>
                    <p>
                        <b>Accessing XML submissions.</b> XML submissions can be accessed from
                        actions, page models, and page views, through the <code>instance</code>
                        input. Users should not assume that XML submission are available from
                        the <code>data</code> inputs.
                    </p>
                </li>
                <li>
                    <p>
                        <b>Shorter page flows.</b> Because of the enhanced XForms support, in
                        particular, the XForms switch module and support for
                        <code>application/xml</code> submissions, page flows are typically shorter
                        to write. Compare for example the <a href="/goto-example/bizdoc">BizDoc
                        Classic</a> example with the <a href="/goto-example/bizdoc2">BizDoc NG</a>
                        example.
                    </p>
                </li>
                <li>
                    <p>
                        Tracing: TODO
                    </p>
                </li>
            </ul>
        </section>
        <section>
            <title>XSLT processor</title>
            <p>
                The following improvements have been made to the XSLT processor:
            </p>
            <ul>
                <li>
                    <p>
                        <b>Attributes input.</b> The <a href="/doc/processors-xslt">XSLT
                        processor</a> supports a new <code>attributes</code> input, which allows
                        setting JAXP TransformerFactory attributes.
                    </p>
                </li>
                <li>
                    <p>
                        <b>Safer defaults.</b> The default <a href="/doc/processors-xslt">XSLT
                        processor</a> (accessed with <code>oxf:xslt</code>, and configured in
                        <code>processors.xml</code>) no longer allows executing external functions.
                        To enable external functions, use <code>oxf:unsafe-xslt</code>, or configure
                        the XSLT processor's <code>attributes</code> input. This makes the XSLT
                        processor safer by default.
                    </p>
                </li>
                <li>
                    <p>
                        <b>Default implementation.</b> The default XSLT 1.0 processor
                        implementation, configured in <code>processors.xml</code>, is now Saxon 8
                        instead of Xalan. The default XSLT 2.0 implementation remains Saxon 8, as
                        was the case before.
                    </p>
                </li>
                <li>
                    <p>
                        <b>Deprecated behavior.</b> The <a href="/doc/processors-xslt">XSLT
                        processor</a> used to support a value of <code>DEFAULT</code> or
                        <code>interpreter</code> for the <code>transformer</code> input, for
                        backward compatibility. This is no longer supported. The
                        <code>transformer</code> must provide only a valid JAXP TransformerFactory
                        class name. Most users should not be affected by this change.
                    </p>
                </li>
            </ul>
            <note>
                <p>
                    These changes should not affect applications that used <code>oxf:xslt</code>
                    unless stylesheets use external functions. In this case, you have to use
                    <code>oxf:unsafe-xslt</code> instead.
                </p>
                <p>
                    If you were using <code>oxf:xslt-1.0</code> or were using XSLT 1.0 stylesheets
                    directly referenced from a page flow, and used Xalan-specific features, you
                    have to either convert your stylesheet to use Saxon features instead, or use
                    <code>oxf:xalan</code>.
                </p>
            </note>
            <p>
                TODO: document the fact that transformation is separate from serialization with
                OPS. See XML serializer.
            </p>
        </section>
        <section>
            <title>XQuery processor</title>
            <p>
                The XQuery processor has been updated:
            </p>
            <ul>
                <li>
                    <p>
                        <b>Default implementation.</b> The default implementation of the XQuery
                        processor is now Saxon 8.
                   </p>
                </li>
                <li>
                    <p>
                        <b>Safer defaults.</b> This processor is available with
                        <code>oxf:xquery</code> or <code>oxf:unsafe-xquery</code>. The former does
                        not allow calling external functions by default, while the latter does,
                        similar to the new behavior of the XSLT processor.
                    </p>
                </li>
                <li>
                    <p>
                        <b>Query format.</b> In addition to XQuery code embedded into XML, the
                        XQuery processor now supports in its <code>config</code> input a <a
                        href="reference-formats#text-documents">text document</a> of the form:
                    </p>
                    <xml-source>
                        <document xsi:type="xs:string" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                            xquery version "1.0";
                            ...
                        </document>
                    </xml-source>
                </li>
                <li>
                    <p>
                        <b>PFC integration.</b> XQuery can be used in the PFC to perform XML
                        submission transformations.
                    </p>
                </li>
            </ul>
        </section>
        <section>
            <title>XHTML Support</title>
            <p>
                XHTML is now much better supported:
            </p>
            <ul>
                <li>
                    <p>
                        <b>Simplified theme.</b> There is no need to remove the XHTML namespace
                        from XSLT, as was done before in <code>theme.xsl</code>. Your theme should
                        simply use the XHTML namespace.
                    </p>
                </li>
                <li>
                    <p>
                        <b>Switching between XHTML and HTML.</b> The standard epilogue illustrates
                        how to generate XHTML and HTML to different browsers.
                    </p>
                </li>
                <li>
                    <p>
                        <b>Using XHTML serialization.</b> The standard epilogue illustrates how to
                        to connect the XHTML serializer.
                    </p>
                </li>
            </ul>
            <note>
                <p>
                    In order to benefit from features such as XForms, you should make sure that
                    your page views generate XHTML. In particular, your XHTML elements must in the
                    XHTML namespace (<code>http://www.w3.org/1999/xhtml</code>).
                </p>
            </note>
        </section>
        <section>
            <title>XPL Profiling Support</title>
            <ul>
                <li>
                    A 'trace' API has been added.  The interface is 
                    <code>org.orbeon.oxf.pipeline.api.PipelineContext.Trace</code>
                </li>
                <li>
                    OPS ships with two implementations of <code>Trace</code>, 
                    <code>org.orbeon.oxf.processor.NetworkTrace</code> and 
                    <code>org.orbeon.oxf.processor.StdOutTrace</code>.  
                    <code>NetworkTrace</code> sends profiling information to Studio which the 
                    displays the data in the trace views.  <code>StdOutTrace</code> simply 
                    dumps profiling information to standard out.
                </li>
                <li>
                    <a href='reference-properties'>Properties</a> for configuring the tracing have 
                    been added.
                </li>
                <li>
                    Views for viewing profiling data have been added to Orbeon Studio.
                </li>
            </ul>
        </section>
        <section>
            <title>Other Changes</title>
            <p>
                The following changes are new in OPS 3.0 BETA:
            </p>
            <ul>
                <li>
                    <p>
                        <b>HTML Documentation.</b> The OPS User Guide in static HTML format, broken
                        OPS 2.8, is now working correctly. This format allows you to consult the
                        documentation offline without running OPS or without accessing the online
                        documentation.
                    </p>
                </li>
                <li>
                    <p>
                        <b>PDF Documentation.</b> The OPS User Guide in PDF version is back! You can
                        print this book for reference.
                    </p>
                </li>
                <li>
                    <p>
                        <b>OPS Blog example.</b> This <a href="/goto-example/blog">new example</a>
                        illustrates many of the capabilities of OPS, including:
                    </p>
                    <ul>
                        <li>Implementing XML-RPC services</li>
                        <li>Connecting to a native XML database</li>
                        <li>Using XForms</li>
                        <li>Producing XHTML, RSS and other formats from a single data source</li>
                        <li>Implementing configurable themes with XSLT</li>
                        <li>Creating "clean" URLs in a REST perspective</li>
                    </ul>
                </li>
                <li>
                    <p>
                        <b>Resource Manager.</b> The Flat File and <a
                        href="reference-resource-managers#filesystem">Filesystem</a> resource
                        managers have been merged. The Flat File resource manager is now deprecated,
                        and the Filesystem resource manager should be used instead. The Flat File
                        resource manager can still be used for backward compatibility. The main
                        difference between the two resource managers is that the Filesystem resource
                        manager can be configured with or without a sandbox.
                    </p>
                </li>
                <li>
                    <p>
                        <b>PDF Processors.</b> TODO
                    </p>
                </li>
                <li>
                    <p>
                        <b>Directory Scanner Processor.</b> The purpose of the <a
                        href="processors-directory-scanner">Directory Scanner</a> processor is to
                        analyse a directory structure in a filesystem and to produce an XML document
                        containing metadata about the files, such as name and size. It is possible
                        to specify which files and directories to include and exclude in the
                        scanning process. The Directory Scanner is also able to optionally retrieve
                        image metadata. Two new command-line examples illustrate the use of this
                        processor.
                    </p>
                </li>
                <li>
                    <p>
                        <b>Faster URL Rewriting.</b> In order to improve performance URL rewriting
                        has been re-implemented in Java. The new implemetation is accessed through
                        the new rewrite processors <code>oxf:xhtml-rewrite</code> and
                        <code>oxf:html-rewrite</code>.
                    </p>
                </li>
                <li>
                    <p>
                        <b>Disabled Validation</b>. Previously the data <code>input</code> of the
                        <code>oxf:xforms-output</code> processor and the <code>config</code> input
                        of the <code>oxf:portlet-include</code> processor were validated unless one
                        turned off all input parameter validation in OPS. However we found that
                        validation of these two inputs came with at significant price and
                        consequently these inputs are no longer validated by default. To enable the
                        validation one must specify the appropriate schema URI with the
                        <code>schema-uri</code> attribute. For the <code>data</code> input of
                        <code>oxf:xforms-output</code> the URI is
                        <code>http://www.w3.org/2002/xforms/controls</code> and for the
                        <code>config</code> input of <code>oxf:portlet-include</code> the URI is
                        <code>http://orbeon.org/oxf/xml/portlet-include</code>.
                    </p>
                </li>
                <li>
                    <p>
                        <b>Request Generator</b>. The Request Generator used to return a constructed
                        path for the <code>path-info</code> parameter. It now correctly returns the
                        Servlet API's path info. To get a complete path, use
                        <code>request-path</code> instead.
                    </p>
                </li>
                <li>
                    <p>
                        <b>JAR and WAR Names</b>. <code>orbeon.jar</code> has been renamed to
                        <code>ops.jar</code>, <code>cli-orbeon.jar</code> has been renamed to
                        <code>cli-ops.jar</code> and <code>orbeon.war</code> has been renamed to
                        <code>ops.war</code>.
                    </p>
                </li>
                <li>
                    <p>
                        <b>Delegation processor</b>. The <code>select</code> attribute on the
                        <code>operation</code> element is now documented. The default behavior when
                        <code>select</code> is not present has changed when calling document-style
                        web services. In that case, now the content of the SOAP body element is returned,
                        instead of the content of the first element contained by the SOAP body.
                    </p>
                </li>
                <li>
                    <p>
                        TODO
                    </p>
                </li>
            </ul>
        </section>
    </body>
</document>
