<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
    Copyright (C) 2004 Orbeon, Inc.

    The Orbeon documentation is not distributed under the LGPL license. Use of the documentation is
    subject to the following terms:

    * Conversion to other formats is allowed, but the actual content may not be altered or edited
      in any way.

    * You may create printed copies for your own personal use.

    * For all other uses, such as selling printed copies or using (parts of) the manual in another
      publication, prior written agreement from Orbeon, Inc. is required.

    Please contact Orbeon at info@orbeon.com for more information.
-->
<document xmlns:p="http://www.orbeon.com/oxf/pipeline"
          xmlns:xforms="http://www.w3.org/2002/xforms"
          xmlns:xxforms="http://orbeon.org/oxf/xml/xforms"
          xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:xhtml="http://www.w3.org/1999/xhtml"
          xmlns:ev="http://www.w3.org/2001/xml-events">
    <header>
        <title>XForms Reference</title>
    </header>
    <body>
        <section>
            <title>Scope</title>
            <p>
                Web applications use forms to collect data from users. Orbeon PresentationServer
                (OPS)'s form handling capabilities are based on <link
                href="http://www.w3.org/MarkUp/Forms/">XForms</link>, namely the <a
                href="http://www.w3.org/TR/xforms/">XForms 1.0 W3C Recommendation</a>. This section
                provides an introduction to XForms concepts and explains how to use XForms in your
                OPS application.
            </p>
            <warning>
                <p>
                    This page is a work in progress.
                </p>
            </warning>
        </section>
        <section>
            <title>Getting Started</title>
            <section>
                <title>The XForms Sandbox</title>
                <p>
                    The easiest way to get started with simple examples is to use the OPS XForms
                    Sandbox. This tool allows you to upload example XForms files from your web browser
                    and to see the results directly. You can access the XForms sandbox:
                </p>
                <ul>
                    <li>
                        <p>
                            <b>Online:</b> visit <a
                            href="http://www.orbeon.com/ops/goto-example/xforms-sandbox">this link</a>
                            to access the online public XForms Sandbox.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>Locally:</b> if this documentation is produced by your local installation
                            of OPS, visit <a href="/goto-example/xforms-sandbox">this link</a>.
                        </p>
                    </li>
                </ul>
                <p>
                    After submitting an XHTML + XForms file, the result, or errors, should display. Use
                    your browser's "Back" button to return to the main XForms Sandbox page, or use a
                    bookmark.
                </p>
            </section>
            <section>
                <title>Integrating XForms in OPS</title>
                <p>
                    TODO: past the sandbox, how to integrate XForms with OPS: single static page,
                    dynamic page, PFC and MVC, submissions, services, proxy mode, etc.
                </p>
            </section>
        </section>
        <section>
            <title>Programming With XForms 1.0</title>
            <section>
                <title></title>
                <p>
                    TODO
                </p>
                <p>

                </p>
            </section>
            <a name="repeat"/>
            <section>
                <title>Repeating with <code>xforms:repeat</code></title>
                <section>
                    <title>Basics</title>
                    <p>
                        TODO: basic idea, homogeneous collection (what's allowed and not), how to
                        handle last hidden element (plus question of validating that element), ways
                        of updating such a collection (insert, delete, submit replace="instance").
                    </p>
                    <p>
                        A very common requirement of user interfaces consists in repeating visual, such
                        as rows in a table, entries in a list, etc. Those repeated sections usually have
                        an homogeneous aspect: they all have the same or a very similar structure. For
                        example, multiple table rows will differ only in the particular content they
                        display in their cells. An example of this is an invoice made of lines with each
                        a description, unit price, and quantity.
                    </p>
                    <p>
                        XForms provides a very powerful mechanism to implement such repeated structures:
                        the <code>xforms:repeat</code> element. You use <code>xforms:repeat</code>
                        around XHTML elements or XForms controls. For example, to repeat a table row,
                        you write:
                    </p>
                    <xml-source show-namespaces="false">
                        <xforms:repeat>
                            <xhtml:tr>
                                ...
                            </xhtml:tr>
                        </xforms:repeat>
                    </xml-source>
                    <p>
                        This is not enough to be functional code: you need to indicate to the
                        <code>xforms:repeat</code> element how many repetitions must be performed. This
                        is done not by supplying a simple count value, but by binding the the element to
                        a node-set with the <code>node-set</code> attribute. Consider the following
                        XForms instance:
                    </p>
                    <xml-source>
                        <xforms:instance id="employees-instance">
                            <employees>
                                <employee>
                                    <first-name>Alice</first-name>
                                </employee>
                                <employee>
                                    <first-name>Bob</first-name>
                                </employee>
                                <employee>
                                    <first-name>Marie</first-name>
                                </employee>
                            </employees>
                        </xforms:instance>
                    </xml-source>
                    <p>
                        Assuming you want to produce one table row per employee, add the following
                        <code>nodeset</code> attribute:
                    </p>
                    <xml-source show-namespaces="false">
                        <xforms:repeat nodeset="instance('employees-instance')/employee">
                            <xhtml:tr>
                                ...
                            </xhtml:tr>
                        </xforms:repeat>
                    </xml-source>
                    <p>
                        This produces automatically three <code>xhtml:tr</code> rows. Note that we
                        explicitly use the XForms <code>instance()</code> function, but you may not have
                        to do so if that instance is already in scope. Then you display in each row the
                        content of the <code>first-name</code> element for each employee:
                    </p>
                    <xml-source show-namespaces="false">
                        <xforms:repeat nodeset="instance('employees-instance')/employee">
                            <xhtml:tr>
                                <xhtml:td>
                                    <xforms:output ref="first-name"/>
                                </xhtml:td>
                            </xhtml:tr>
                        </xforms:repeat>
                    </xml-source>
                    <p>
                        This works because for each iteration, the <i>context node</i> for the
                        <code>ref</code> attribute changes: during the first iteration, the context node
                        is the first <code>employee</code> element of the XForms instance; during the
                        second iteration, the second <code>employee</code> element, and so on.
                    </p>
                    <note>
                        The <code>nodeset</code> attribute of <code>xforms:repeat</code> must point
                        to a so-called <i>homogeneous collection</i>. Such a collection must consist
                        of contiguous XML elements with same name and same namespace. XForms does
                        not predict what happens if the node-set is not homogenous.
                    </note>
                    <p>
                        TODO: screenshots.
                    </p>
                </section>
                <section>
                    <title>Repeat Index</title>
                    <p>
                        TODO
                    </p>
                </section>
                <section>
                    <title>Deleting Rows with the <code>xforms:delete</code> action</title>
                    <p>
                        <code>xforms:repeat</code> may be used purely for display purposes, but it
                        can also be used for interactively editing repeated data. This includes
                        allowing the user to delete and insert rows. Two XForms actions are used
                        for this purpose: <code>xforms:delete</code> and <code>xforms:insert</code>.
                    </p>
                    <p>
                        <code>xforms:delete</code> is provided with a <code>nodeset</code> attribute
                        pointing to the homogenous collection into which the insertion must take
                        place. It also has an <code>at</code> attribute, which contains an XPath
                        expression returning the index of the element to delete. The following
                        deletes the last element of the collection:
                    </p>
                    <xml-source show-namespaces="false">
                        <comment> This deletes the last element of the collection </comment>
                        <xforms:delete nodeset="employees" at="last()"/>
                        <comment> This deletes the first element of the collection </comment>
                        <xforms:delete nodeset="employees" at="1"/>
                        <comment> This deletes the currently selected element of the collection (assuming the repeat id 'employee-repeat') </comment>
                        <xforms:delete nodeset="employees" at="index('employee-repeat')"/>
                    </xml-source>
                </section>
                <section>
                    <title>Inserting Rows with the <code>xforms:insert</code> action</title>
                    <p>
                        <code>xforms:insert</code> is provided with a <code>nodeset</code> attribute
                        pointing to the homogenous collection into which the insertion must take
                        place. <code>xforms:insert</code> then considers the <i>last</i> element of
                        that collection (and all its content if any) as a <i>template</i> for the
                        new element to insert: it duplicates it and inserts it into the homogenous
                        collection at a position you specify. The last element of an homogeneous
                        collection therefore always acts as a <i>template</i> for insertions:
                    </p>
                    <xml-source show-namespaces="false">
                        <comment> This inserts a copy of the template before the last element of the collection </comment>
                        <xforms:insert nodeset="employees" at="last()" position="before"/>
                        <comment> This inserts a copy of the template after the last element of the collection </comment>
                        <xforms:insert nodeset="employees" at="last()" position="after"/>
                        <comment> This inserts a copy of the template before the first element of the collection </comment>
                        <xforms:insert nodeset="employees" at="1" position="before"/>
                        <comment> This inserts a copy of the template after the first element of the collection </comment>
                        <xforms:insert nodeset="employees" at="1" position="after"/>
                        <xforms:insert nodeset="employees" at="last()" position="after"/>
                        <comment> This inserts a copy of the template before the currently selected element of the collection </comment>
                        <xforms:insert nodeset="employees" at="index('employee-repeat')" position="before"/>
                        <comment> This inserts a copy of the template after the currently selected element of the collection </comment>
                        <xforms:insert nodeset="employees" at="index('employee-repeat')" position="after"/>
                    </xml-source>
                    <p>
                        The <code>at</code> attribute contains an XPath expression returning the
                        index of the element before or after which the insertion must be performed.
                        The <code>position</code> element contains either <code>after</code> or
                        <code>before</code>, and specifies whether the insertion is performed before
                        or after the element specified by the <code>at</code> attribute.
                    </p>
                    <p>
                        It is important to note that while it is possible to delete the last element
                        of an homogeneous collection, it becomes them impossible to insert a new
                        element into that collection with XForms 1.0, since there is no longer a
                        template element available in this case (save for using an XML submission
                        with <code>replace="instance"</code>). This means that in general you design
                        your collections so that there always at least one element in it.
                    </p>
                    <p>
                        In case you want the user interface to visually appear empty empty when
                        there is "no more" elements in the collection, you can use the tip provided
                        below, which can be used in most situations. The idea is to consider that
                        the last element of the collection is never displayed, but always used as a
                        template for <code>xforms:insert</code>:
                    </p>
                    <xml-source>
                        <xforms:instance id="employees-instance">
                            <employees>
                                <employee>
                                    <first-name>Alice</first-name>
                                </employee>
                                <employee>
                                    <first-name>Bob</first-name>
                                </employee>
                                <employee>
                                    <first-name>Marie</first-name>
                                </employee>
                                <comment> This is a template used by xforms:insert </comment>
                                <employee>
                                    <first-name/>
                                </employee>
                            </employees>
                        </xforms:instance>
                    </xml-source>
                    <p>
                        You do not want to display that template, however. Therefore you use an
                        <code>xforms:repeat</code> element of the form:
                    </p>
                    <xml-source show-namespaces="false">
                        <xforms:repeat nodeset="instance('employees-instance')/employee[position() &amp;lt; last()]">
                            ...
                        </xforms:repeat>
                    </xml-source>
                    <p>
                        The <code>position() &amp;lt; last()</code> condition tells
                        <code>xforms:repeat</code> to consider all the elements of the collection
                        except the last one. This causes the repetition to display zero iteration
                        when there is one element in the collection, one iteration when there are
                        two, etc. The <code>xforms:insert</code> action, on the other hand, operates
                        on the entire collection including the last element, so that that element
                        can be duplicated:
                    </p>
                    <xml-source show-namespaces="false">
                        <xforms:insert nodeset="employees" at="..." position="..."/>
                    </xml-source>
                    <p>
                        Another solution involves using an <code>xforms:bind</code> element which
                        makes the last element of the collection non-relevant. This achieves the
                        same result, but requires extra code, so the tip above is usually
                        preferred.
                    </p>
                    <p>
                        Upon submission, some care must be taken with repeat template. For example,
                        if the <code>first-name</code> element above is required, and the template
                        contains an empty value as above, submission will fail.
                        <code>xforsm:bind</code> statements must then also exclude the last element
                        of the collection:
                    </p>
                    <xml-source show-namespaces="false">
                        <xforms:bind nodeset="employee[position() &amp;lt; last()]/first-name" required="true()"/>
                    </xml-source>
                    <note>
                        <p>
                            If you are dealing with an XML document format which requires
                            removing the last element of a collection, you have to post-process
                            your XForms instance to remove such extra elements, and pre-process
                            it to add such elements when initializing your XForms instance.
                        </p>
                    </note>
                </section>
                <section>
                    <title>Setting the Current Index with the <code>xforms:setindex</code> action</title>
                    <p>
                        TODO
                    </p>
                </section>
                <section>
                    <title>Events</title>
                    <p>
                        TODO
                    </p>
                </section>
                <section>
                    <title>Heterogeneous-Looking Repeated Section</title>
                    <p>
                        TODO: use of relevant, switch.
                    </p>
                </section>
                <section>
                    <title>Nested Repeats</title>
                    <p>
                        TODO
                    </p>
                </section>
            </section>
            <a name="submission"/>
            <section>
                <title>Submission</title>
                <p>
                    TODO
                </p>
                <p>
                    Two properties control some aspects of XForms submission in OPS:
                </p>
                <xml-source>
                    <property as="xs:boolean" name="oxf.xforms.optimize-post-all"                    value="true"/>
                </xml-source>
                <p>
                    If set to <code>true</code> (the default), OPS optimizes submissions with
                    <code>replace="all"</code> by sending the response of the submission directly to
                    the web browser. This however means that submission errors cannot be caught by
                    XForms event handlers after OPS has started connecting to the submission URL,
                    as should be the case following XForms 1.0. If set to <code>false</code>, OPS
                    buffers the reply so that errors can be handled as per XForms 1.0. However, this
                    solution is less efficient.
                </p>
                <xml-source>
                    <property as="xs:boolean" name="oxf.xforms.optimize-local-submission"            value="true"/>
                </xml-source>
                <p>
                    If set to <code>true</code> (the default), OPS optimizes "local" HTTP and HTTPS
                    submissions, i.e. submissions performed to a URL controlled by OPS itself, by
                    directly submitting using the Java Servlet API instead of actually using the
                    HTTP protocol for the submission. If set to <code>false</code>, OPS always
                    always uses the HTTP or HTTPS protocol, which is less efficient. If set to
                    <code>false</code>, it is possible to specify the <code>xxforms:post</code>
                    method instead of the <code>post</code> method on the
                    <code>xforms:submission</code> element to force an optimized local submission.
                </p>
            </section>
        </section>
        <section>
            <title>Formatting</title>
            <section>
                <title>Rationale</title>
                <p>
                    It is usually recommended to use native XML types within XForms instances, as
                    this guarantees interoperability and maintainability. For example, a date of
                    January 10, 2005 is stored in ISO format as: <code>2005-10-01</code>. However it
                    is often necessary to format such values on screen in a user-readable format,
                    like "January 10, 2005", "10 janvier 2005", or "10. Januar 2005".
                </p>
                <p>
                    OPS provides an extension attribute, <code>xxforms:format</code>, for that
                    purpose. <code>xxforms:format</code> must contain an XPath 2.0 expression, and
                    also supports the following XSLT 2.0 functions:
                </p>
                <ul>
                    <li><p><code>format-date()</code> (<a href="http://www.w3.org/TR/2005/WD-xslt20-20050915/#function-format-date">external documentation</a>)</p></li>
                    <li><p><code>format-dateTime()</code> (<a href="http://www.w3.org/TR/2005/WD-xslt20-20050915/#function-format-dateTime">external documentation</a>)</p></li>
                    <li><p><code>format-time()</code> (<a href="http://www.w3.org/TR/2005/WD-xslt20-20050915/#function-format-time">external documentation</a>)</p></li>
                    <li><p><code>format-number()</code> (<a href="http://www.w3.org/TR/2005/WD-xslt20-20050915/#function-format-number">external documentation</a>)</p></li>
                </ul>
                <p>
                    The XPath expression is evaluated by the XForms engine whenever the value bound
                    to the <code>xforms:input</code> control changes and needs to be updated on
                    screen. It is evaluated in the context of the instance node bound to the
                    control. This means that the current value of the control can be accessed with
                    "<code>.</code>". Often the value must be converted, for example to a date, in
                    which case the conversion can be done with XPath 2.0 type casts such as
                    <code>xs:date(.)</code>.
                </p>
            </section>
            <section>
                <title>xforms:input</title>
                <p>
                    When using <code>xforms:input</code> and a bound <code>xs:date</code> type, you
                    can control the formatting of the date using the <code>xxforms:format</code>
                    extension attribute on the <code>xforms:input</code> control. For example:
                </p>
                <xml-source show-namespaces="false">
                    <xforms:input ref="date" xxforms:format="format-date(xs:date(.), '[MNn] [D], [Y]', 'en', (), ())"/>
                </xml-source>
            </section>
            <section>
                <title>xforms:output</title>
                <p>
                    When using <code>xforms:output</code>, you can control the formatting of the
                    date using the <code>xxforms:format</code> extension attribute on the
                    <code>xforms:input</code> control.
                </p>
                <xml-source show-namespaces="false">
                    <xforms:output ref="date" xxforms:format="format-date(xs:date(.), '[MNn] [D], [Y]', 'en', (), ())"/>
                    <xforms:output ref="size" xxforms:format="format-number(., '###,##0')"/>
                </xml-source>
            </section>
            <section>
                <title>Default Formatting</title>
                <p>
                    For both <code>xforms:input</code> and <code>xforms:output</code>, if the bound
                    node is of type <code>xs:date</code>, <code>xs:dateTime</code> or
                    <code>xs:time</code>, and if no <code>xxforms:format</code> attribute is present
                    on the control, formatting is based on <a
                    href="reference-properties">properties</a>. If the properties are missing, a
                    built-in default formatting is used. The default properties, as well as the
                    built-in defaults, are as follows:
                </p>
                <xml-source>
                    <property as="xs:string"  name="oxf.xforms.format.date"                          value="if (. castable as xs:date) then format-date(xs:date(.), '[FNn] [MNn] [D], [Y]', 'en', (), ()) else ."/>
                    <property as="xs:string"  name="oxf.xforms.format.dateTime"                      value="if (. castable as xs:dateTime) then format-dateTime(xs:dateTime(.), '[FNn] [MNn] [D], [Y] [H01]:[m01]:[s01] UTC', 'en', (), ()) else ."/>
                    <property as="xs:string"  name="oxf.xforms.format.time"                          value="if (. castable as xs:time) then format-time(xs:time(.), '[H01]:[m01]:[s01] UTC', 'en', (), ()) else ."/>
                </xml-source>
                <p>
                    They produce results as follows:
                </p>
                <ul>
                    <li>
                        <p>
                            <code>2004-01-07</code> is displayed as <code>Wednesday January 7, 2004</code>
                        </p>
                    </li>
                    <li>
                        <p>
                            <code>2004-01-07T04:38:35.123</code> is displayed as <code>Wednesday January 7, 2004 04:38:35 UTC</code>
                        </p>
                    </li>
                    <li>
                        <p>
                            <code>04:38:35.123</code> is displayed as <code>04:38:35 UTC</code>
                        </p>
                    </li>
                </ul>
                <p>
                    Note that with the condition in the XPath expressions, a value which cannot be
                    converted to the appropriate type is simply displayed as is.
                </p>
            </section>
        </section>
        <a name="instance-initialization"/>
        <section>
            <title>XForms Instance Initialization</title>
            <section>
                <title>Rationale</title>
                <p>
                    An XForms page often needs to contain initial data when first loaded. The data
                    may come from a database, a form submitted on a previous page, etc. There are
                    several ways to achieve this with OPS.
                </p>
            </section>
            <section>
                <title>Page Flow Definitions</title>
                <p>
                    Within your page flow, you define a page model and either a static page view:
                </p>
                <xml-source>
                    <page id="..." path-info="..." model="my-page-model.xpl" view="my-page-view.xhtml"/>
                </xml-source>
                <p>
                    Or a dynamic XSLT page view:
                </p>
                <xml-source>
                    <page id="..." path-info="..." model="my-page-model.xpl" view="my-page-view.xsl"/>
                </xml-source>
                <p>
                    The page model is in charge of producing an XML document which is then going to
                    be used by the page view to initialize the XForms instance. As always with OPS,
                    the page model produces this document on its <code>data</code> output, and the
                    page view can access this document on its <code>data</code> input, as shown in
                    the following sections. This mechanism is described in details in the <a
                    href="reference-page-flow#page-model-page-view">PFC documentation</a>.
                </p>
            </section>
            <section>
                <title>Using XInclude</title>
                <p>
                    Following the MVC architecture, the PFC page model generates an XML document
                    which contains an XForms instance. A static PFC page view then includes this
                    instance using <code>xi:include</code>, as follows:
                </p>
                <xml-source show-namespaces="false">
                    <html xmlns:xforms="http://www.w3.org/2002/xforms"
                          xmlns:xi="http://www.w3.org/2001/XInclude-doc"
                          xmlns="http://www.w3.org/1999/xhtml">
                        <head>
                            <title>Summary</title>
                            <xforms:model>
                                <xforms:instance id="document-infos-instance">
                                    <comment xmlns=""> This is where the XML document produced by the page model is included </comment>
                                    <xi:include href="input:data"/>
                                </xforms:instance>
                                ...
                            </xforms:model>
                        </head>
                        <body>
                            ...
                        </body>
                    </html>
                </xml-source>
                <p>
                    The use of the URI <code>input:data</code> instructs XInclude processing to
                    dynamically include the <code>data</code> output of the page view, which is
                    produced on the <code>data</code> output of the page model. Note that it is
                    possible to use the <code>instance</code> input, which then refers to the
                    current XML submission.
                </p>
            </section>
            <section>
                <title>Using XSLT</title>
                <p>
                    It is also possible to use a dynamic XSLT page view to perform the inclusion of
                    the instance. XSLT is more flexible than XInclude, but less efficient at
                    runtime. This is an example:
                </p>
                <xml-source show-namespaces="false">
                    <html xmlns:xforms="http://www.w3.org/2002/xforms"
                          xmlns="http://www.w3.org/1999/xhtml"
                          xsl:version="2.0">
                        <head>
                            <title>Summary</title>
                            <xforms:model>
                                <xforms:instance id="document-infos-instance">
                                    <comment xmlns=""> This is where the XML document produced by the page model is included </comment>
                                    <xsl:copy-of select="doc('input:data')/*"/>
                                </xforms:instance>
                                ...
                            </xforms:model>
                        </head>
                        <body>
                            ...
                        </body>
                    </html>
                </xml-source>
                <p>
                    Note the use of <code>xsl:version="2.0"</code> on the root element of the
                    document, which instructs the PFC to process the page view as an XSLT
                    stylesheet.
                </p>
                <p>
                    The use of the XPath <code>doc()</code> function with a URI
                    <code>input:data</code> instructs XSLT processing to dynamically include the
                    <code>data</code> output of the page view, which is produced on the
                    <code>data</code> output of the page model.
                </p>
                <note>
                    It is possible to use XInclude instructions in a dynamic XSLT page view as well.
                    In this case, it is important to note that XInclude instructions are processed
                    before XSLT instructions, i.e. the result of XInclude instructions is an XSLT
                    stylesheet, which is then executed. [TODO: Figure showing XInclude -> XSLT
                    processing.]
                </note>
            </section>
        </section>
        <section>
            <title>XSLT or XForms?</title>
            <p>
                There are some similarities between XSLT and XForms. XSLT can be used to extract
                data from an XML document, format it, and output it with <code>xsl:value-of</code>.
                XForms can do the same using <code>xforms:output</code>.
            </p>
            <p>
                TODO
            </p>
        </section>
        <a name="relative-paths"/>
        <section>
            <title>Relative Paths</title>
            <section>
                <title>Rationale</title>
                <p>
                    XForms documents can refer to external resources using URIs in the following
                    circumstances:
                </p>
                <ul>
                    <li>
                        <p>
                            <b>External Instances.</b> The <code>xforms:instance</code> element can
                            have an <code>src</code> attribute linking to an external instance
                            definition.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>Submission.</b> The <code>xforms:submission</code> element must refer
                            to an <code>action</code> URI.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>Load Action.</b> The <code>xforms:load</code> action must refer to an
                            URI that must be loaded upon execution.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>Image Mediatype.</b> The <code>xforms:output</code> control may refer
                            to an image URI.
                        </p>
                    </li>
                    <li>
                        <p>
                            <b>Message, Label, Help, Hint, and Alert.</b>
                            <code>xforms:label</code>, <code>xforms:help</code>,
                            <code>xforms:hint</code>, and <code>xforms:alert</code> may use an
                            <code>src</code> attribute to refer to external content.
                        </p>
                        <note>
                            The XForms 1.1 draft of November 15, 2004 removes linking attributes
                            from actions and metadata elements and "the <code>src</code> attribute
                            is not available to XForms 1.1 <code>message</code>, <code>label</code>,
                            <code>help</code>, <code>hint</code>, <code>alert</code> elements."
                        </note>
                    </li>
                </ul>
                <p>
                    URIs are resolved relatively to a <i>base URI</i>. The base URI is, by default,
                    the external URL used to display the XForms page, with special handling of the
                    servlet context, if necessary. It is also possible to override this behavior by
                    adding <code>xml:base</code> attributes on <code>xforms:load</code> or any of
                    its ancestor elements.
                </p>
                <!--<p>-->
                    <!--As a general rule, for URLs relative to the :-->
                <!--</p>-->
                <!--<ul>-->
                    <!--<li>-->
                        <!--<p>-->
                            <!--Absolute URLs (starting with a protocol or scheme) are used as is.-->
                        <!--</p>-->
                    <!--</li>-->
                    <!--<li>-->
                        <!--<p>-->
                            <!--Absolute paths (starting with a "/") are relative-->
                        <!--</p>-->
                    <!--</li>-->
                    <!--<li>-->
                        <!--<p>-->
<!-- -->
                        <!--</p>-->
                    <!--</li>-->
                <!--</ul>-->
            </section>
            <a name="relative-paths-external-instances"/>
            <section>
                <title>External Instances</title>
                <p>
                    This is done with the <code>src</code> attribute on the
                    <code>xforms:instance</code> element, for example:
                </p>
                <xml-source show-namespaces="false">
                    <xforms:instance src="my-instance.xml"/>
                </xml-source>
                <p>
                    With a client-side implementation of XForms, it makes sense for the
                    <code>src</code> attribute to be relative to the base URI of the XForms page,
                    which is usually an <code>http:</code> URI.
                </p>
                <p>
                    With a server-side implementation, it may make more sense in general to
                    interpret the URI relative to the location of the source XForms page, which is
                    usually an <code>oxf:</code> URI.
                </p>
                <p>
                    TODO
                </p>
            </section>
            <a name="relative-paths-load-action"/>
            <section>
                <title>Load Action</title>
                <p>
                    The <code>xforms:load action</code> can refer to a resource to load either
                    through the <code>resource</code> attribute or using a single-node binding
                    retrieving the URI from an XForms instance. In both cases, the value of the URI
                    is resolved relatively to the base URI.
                </p>
                <p>
                    The following assumes that OPS runs in the <code>/ops</code> servlet context:
                </p>
                <table>
                    <tr>
                        <th>Base URI<br/>(External URL or <code>xml:base</code> attributes)</th>
                        <th>Initial URI<br/>(<code>resource</code> or Single-Node Binding)</th>
                        <th><code>show</code></th>
                        <th>Resolved URI</th>
                        <th>Comment</th>
                    </tr>
                    <tr>
                        <td rowspan="6">
                            <p>The following URI is loaded in a servlet:</p>
                            <p>
                                <code>http://example.org/ops/my-page</code>
                            </p>
                        </td>
                        <td rowspan="2"><code>http://orbeon.com/software/</code></td>
                        <td><code>replace</code></td>
                        <td rowspan="2"><code>http://orbeon.com/software/</code></td>
                        <td>
                            An absolute URL is left untouched. The new page replaces the existing
                            page.
                        </td>
                    </tr>
                    <tr>
                        <td><code>new</code></td>
                        <td>
                            An absolute URL is left untouched. A new window or tab opens for the new
                            page.
                        </td>
                    </tr>
                    <tr>
                        <td rowspan="2"><code>/my-new-page</code></td>
                        <td><code>replace</code></td>
                        <td rowspan="2"><code>http://example.org/ops/my-new-page</code></td>
                        <td>
                            Absolute paths resolve against the current servlet context. The new page
                            replaces the existing page.
                        </td>
                    </tr>
                    <tr>
                        <td><code>new</code></td>
                        <td>
                            Absolute paths resolve against the current servlet context. A new window
                            or tab opens for the new page.
                        </td>
                    </tr>
                    <tr>
                        <td rowspan="2"><code>admin/main-page</code></td>
                        <td><code>replace</code></td>
                        <td rowspan="2"><code>http://example.org/ops/admin/main-page</code></td>
                        <td>
                            The new page replaces the existing page.
                        </td>
                    </tr>
                    <tr>
                        <td><code>new</code></td>
                        <td>
                            A new window or tab opens for the new page.
                        </td>
                    </tr>
                    <tr>
                        <td rowspan="6">
                            <p>The following path is loaded in a portlet:</p>
                            <p>
                                <code>/my-example/my-page</code>
                            </p>
                        </td>
                        <td rowspan="2"><code>http://orbeon.com/software/</code></td>
                        <td><code>replace</code></td>
                        <td rowspan="2"><code>http://orbeon.com/software/</code></td>
                        <td>
                            This causes the application to load a page outside of the portlet,
                            replacing the entire portal.
                        </td>
                    </tr>
                    <tr>
                        <td><code>new</code></td>
                        <td>
                            This causes the application to load a page in a new window outside of
                            the portlet.
                        </td>
                    </tr>
                    <tr>
                        <td rowspan="2"><code>/my-new-page</code></td>
                        <td><code>replace</code></td>
                        <td rowspan="2"><code>/my-new-page</code></td>
                        <td rowspan="2">
                            The resulting path is loaded within the portlet.
                        </td>
                    </tr>
                    <tr>
                        <td><code>new</code></td>
                    </tr>
                    <tr>
                        <td rowspan="2"><code>admin/main-page</code></td>
                        <td><code>replace</code></td>
                        <td rowspan="2"><code>/my-example/admin/main-page</code></td>
                        <td rowspan="2">
                            The resulting path is loaded within the portlet.
                        </td>
                    </tr>
                    <tr>
                        <td><code>new</code></td>
                    </tr>
                </table>
            </section>
            <a name="relative-paths-image-mediatype"/>
            <section>
                <title>Image Mediatype for <code>xforms:output</code></title>
                <p>
                    When an <code>xforms:output</code> control refers to an image URI, as documented
                    <a href="#image-mediatype">below</a>, the resulting value is resolved
                    relatively to the base URI.
                </p>
            </section>
            <a name="relative-paths-submission"/>
            <section>
                <title>Submission</title>
                <p>
                    TODO
                </p>
            </section>
        </section>
        <section>
            <title>Labels, Hints, Alerts, Help Messages</title>
            <p>
                TODO: explain purpose, styling, content allowed (xforms:output), and when e.g.
                labels should not be used.
            </p>
        </section>
        <section>
            <title>XForms and Services</title>
            <section>
                <title>Introduction</title>
                <p>
                    XForms 1.0 allows an XForms page to perform submissions of XForms instances and
                    to handle a response. In most cases, both the submitted XForms instance and the
                    response are XML documents.
                </p>
                <note>
                    It is possible to submit an XForms instance with the HTTP GET method. In that
                    case, some information contained in the XML document is lost, as the structure
                    of the instance, attributes, and namespace prefixes among others, are not passed
                    to the submission.
                </note>
                <p>
                    The XForms submission featuer practically allows forms to call XML services.
                    Those services are accessible through an XML API, which means that a request is
                    performed by sending an XML document to the service, and a response consists of
                    an XML document as well.
                </p>
            </section>
            <section>
                <title>Calling Services</title>
                <p>
                    TODO
                </p>
            </section>
            <section>
                <title>Handling Responses</title>
                <p>
                    TODO
                </p>
            </section>
            <section>
                <title>Implementing Services with OPS</title>
                <p>
                    TODO
                </p>
            </section>
            <section>
                <title>Page Flow Controller (PFC) Best Practices</title>
                <p>
                    TODO
                </p>
            </section>
        </section>
        <section>
            <title>Extensions</title>
            <section>
                <title>Media Type for <code>xforms:output</code></title>
                <p>
                    In XForms 1.0, <code>xforms:output</code> is used to display text. However,
                    based on a proposal in a draft version of XForms 1.1, OPS supports a
                    <code>mediatype</code> attribute on that element.
                </p>
                <a name="image-mediatype"/>
                <section>
                    <title>Image Types</title>
                    <p>
                         When the following conditions are met for an <code>xforms:output</code>
                         control:
                    </p>
                    <ul>
                        <li>
                            <p>
                                The control has an optional <code>mediatype</code> attribute
                                referring to an image, such as <code>image/*</code> or
                                <code>image/jpeg</code>.
                            </p>
                        </li>
                       <li>
                            <p>
                                The value is provided to the <code>xforms:output</code> control with
                                the <code>value</code> attribute, or with a single-node binding to a
                                node without type or with an <code>xs:anyURI</code> type.
                            </p>
                        </li>
                   </ul>
                    <p>
                        The resulting value is interpreted as URI pointing to an image. The image is
                        loaded where the <code>xforms:output</code> is located. When a single-node
                        binding is used, it is possible to dynamically change the image pointed to.
                        For example:
                    </p>
                    <xml-source show-namespaces="false">
                        <xforms:output mediatype="image/*" value="'/images/moon.jpg'"/>
                    </xml-source>
                    <xml-source show-namespaces="false">
                        <xforms:model>
                            <xforms:instance>
                                <image-uri/>
                            </xforms:instance>
                            <xforms:bind nodeset="image-uri" type="xs:anyURI"/>
                        </xforms:model>
                        ...
                        <xforms:output mediatype="image/*" ref="image-uri"/>
                    </xml-source>
                    <note>
                        It is not yet possible to directly embed image data using the
                        <code>base64Binary</code> type.
                    </note>
                </section>
                <section>
                    <title>HTML Type</title>
                    <p>
                        TODO
                    </p>
                </section>
            </section>
            <section>
                <title>XPath Extension Functions</title>
                <p>
                    OPS implements some extension functions which can be used from XPath expressions
                    in XForms documents.
                </p>
                <section>
                    <title>XSLT 2.0 Extensions</title>
                    <p>
                        When using XPath 2.0, the following functions from XSLT 2.0 are also available:
                    </p>
                    <ul>
                        <li><p><code>format-date()</code> (<a href="http://www.w3.org/TR/2005/WD-xslt20-20050915/#function-format-date">external documentation</a>)</p></li>
                        <li><p><code>format-dateTime()</code> (<a href="http://www.w3.org/TR/2005/WD-xslt20-20050915/#function-format-dateTime">external documentation</a>)</p></li>
                        <li><p><code>format-time()</code> (<a href="http://www.w3.org/TR/2005/WD-xslt20-20050915/#function-format-time">external documentation</a>)</p></li>
                        <li><p><code>format-number()</code> (<a href="http://www.w3.org/TR/2005/WD-xslt20-20050915/#function-format-number">external documentation</a>)</p></li>
                    </ul>
                </section>
                <section>
                    <title>OPS Extensions</title>
                    <p>
                        The following functions are implemented:
                    </p>
                    <ul>
                        <li>
                            <p><code>xxforms:call-xpl()</code> TODO</p>
                        </li>
                    </ul>
                </section>
                <section>
                    <title>eXForms Extensions</title>
                    <p>
                        <a href="http://www.exforms.org/">eXForms</a> is a suggested set of
                        extensions to XForms 1.0, grouped into different modules. OPS supports the
                        <a href="http://www.exforms.org/mips.html"><code>exf:mip</code></a> module,
                        which includes the following functions:
                    </p>
                    <ul>
                        <li>
                            <p><code>exf:relevant()</code></p>
                        </li>
                        <li>
                            <p><code>exf:readonly()</code></p>
                        </li>
                        <li>
                            <p><code>exf:required()</code></p>
                        </li>
                    </ul>
                    <p>
                        eXForms functions live in the <code>http://www.exforms.org/exf/1-0</code>
                        namespace, usually bound to the prefix <code>exf</code>.
                    </p>
                </section>
            </section>
        </section>
        <a name="state-handling"/>
        <section>
            <title>State Handling</title>
            <section>
                <title>Rationale</title>
                <p>
                    The OPS XForms engine requires keeping processing state while operating on an
                    XForms page. Such state includes the current values of XForms instances,
                    selected repeated elements, and more. With OPS, XForms state information can be
                    handled in one of two ways:
                </p>
                <ul>
                    <li>
                        <p>
                            <b>Client-side:</b> in this case, static initial state information is
                            sent along with the initial HTML page, and dynamic state is exchanged
                            over the wire between the client browser and the OPS XForms server when
                            necessary.
                        </p>
                        <p>
                            Benefits of the approach:
                        </p>
                        <ul>
                            <li>
                                <p>
                                    The OPS server is entirely stateless. It only requires memory
                                    while processing a client request. It can be restarted without
                                    consequence for the XForms engine.
                                </p>
                            </li>
                            <li>
                                <p>
                                    State information does not expire as long as the user keeps the
                                    application page open in the web browser.
                                </p>
                            </li>
                        </ul>
                        <p>
                            Drawbacks of the approach:
                        </p>
                        <ul>
                            <li>
                                <p>
                                    Resulting HTML pages are larger. In particular, the size of
                                    state data grows when XForms instances grow, regardless of
                                    whether many XForms controls are bound to instance data.
                                </p>
                            </li>
                            <li>
                                <p>
                                    More data circulates between the client browser and the OPS
                                    XForms server.
                                </p>
                            </li>
                        </ul>
                        <note>
                            OPS compresses and encrypts XForms state information sent to the
                            client.
                        </note>
                    </li>
                    <li>
                        <p>
                            <b>Server-side:</b> in this case, state information is stored on the
                            server, in association with an application session. Only very little
                            state information circulates between client and server.
                        </p>
                        <p>
                            Benefits of the approach:
                        </p>
                        <ul>
                            <li>
                                <p>
                                    Resulting HTML page are smaller. HTML pages increase in size as
                                    more XForms controls are used, but they don't increase in size
                                    proportionally to the size of XForms instances. This means that
                                    very large XForms instances can be processed without impacting
                                    client-server performance.
                                </p>
                            </li>
                            <li>
                                <p>
                                    Small amounts of data circulate between the client browser and
                                    the OPS XForms server.
                                </p>
                            </li>
                        </ul>
                        <p>
                            Drawbacks of the approach:
                        </p>
                        <ul>
                            <li>
                                <p>
                                    The OPS server is stateful. It requires server memory to store
                                    state information in a session even when no request is being
                                    processed. The server must be configured to determine how much
                                    state information is kept in a session, how long session take to
                                    expire, etc.
                                </p>
                            </li>
                            <li>
                                <p>
                                    State information can expire if the server is restarted (in case
                                    session information is not restored), or when sessions expire,
                                    even if the client browser is still displaying the page.
                                    Expired state information causes an XForms page to no longer
                                    function until it is reloaded.
                                </p>
                                <note>
                                    With most servlet containers, it is possible to configure
                                    session handling to passivate sessions out of the application
                                    server memory to a persistent store. It is this way possible to
                                    partially alleviate the drawback above by making sure that a
                                    very large number of active but idle sessions can be kept, with
                                    a minimum impact on application server memory. It is this way
                                    also possible to make sure that sessions survive a servlet
                                    container restart.
                                </note>
                            </li>
                        </ul>
                        <note>
                            OPS ensures that it is possible to open multiple client browser windows
                            showing the same page within the same session.
                        </note>
                    </li>
                </ul>
            </section>
            <section>
                <title>Configuring State Handling</title>
                <p>
                    State handling can be configured globally for all pages, or locally for each
                    individual page served. Global configuration is performed in
                    <code>properties.xml</code> with the <code>oxf.xforms.state-handling</code>
                    property. When missing or set to <code>client</code>, state is stored
                    client-side. When set to <code>session</code>, state is stored server-side in a
                    session. For example:
                </p>
                <xml-source>
                    <comment> Store state in the session </comment>
                    <property as="xs:string"  name="oxf.xforms.state-handling"                       value="session"/>
                </xml-source>
                <p>
                    The global configuration can be overridden for each page by setting the
                    <code>xxforms:state-handling</code> attribute in the page. This attribute can be
                    set for example on the root element of the XHTML page, or on the first
                    <code>xforms:model</code> element. Only the first such attribute encountered by
                    the XForms engine is used:
                </p>
                <xml-source show-namespaces="false">
                    <xforms:model xxforms:state-handling="client">
                        ...
                    </xforms:model>
                </xml-source>
                <p>
                    When storing state in a session, the maximum size of the data to be stored for
                    each user can be selected using the <code>oxf.xforms.cache.session.size</code>
                    property. The size is specified in bytes:
                </p>
                <xml-source>
                    <comment> Allow a maximum of 500 KB of state information for each user </comment>
                    <property as="xs:integer" name="oxf.xforms.cache.session.size"                   value="500000"/>
                </xml-source>
                <p>
                    Whether state information is kept client-side or server-side, a property
                    controls whether the XForms engine should try to optimize state reconstruction
                    by using a cache. This property should usually be set to <code>true</code>:
                </p>
                <xml-source>
                    <comment> This should usually be set to "true" </comment>
                    <property as="xs:boolean" name="oxf.xforms.cache.document"                       value="true"/>
                </xml-source>
            </section>
            <section>
                <title>Handling the Browser's Back Button</title>
                <p>
                    TODO: Explain what OPS does and how different browsers behave.
                </p>
            </section>
            <section>
                <title>Configuring Session Handling</title>
                <p>
                    This section is relevant when XForm state is stored into a session.
                </p>
                <p>
                    TODO: Configuration tips: expiration (web.xml), passivation? (Tomcat).
                </p>
                <p>
                    Session passivation can be tightly controlled with Tomcat 5.5. Please refer to
                    the <a
                    href="http://tomcat.apache.org/tomcat-5.5-doc/config/manager.html">relevant
                    Tomcat documentation</a> for more information. Other servlet containers may have
                    similar relevant documentation.
                </p>
            </section>
        </section>
        <a name="javascript"/>
        <section>
            <title>Javascript Integration</title>
            <p>
                TODO: Describe how you can use your own Javascript to set values to XForms controls.
            </p>
        </section>
    </body>
</document>
