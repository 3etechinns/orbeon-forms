<!--
  Copyright (C) 2009 Orbeon, Inc.

  This program is free software; you can redistribute it and/or modify it under the terms of the
  GNU Lesser General Public License as published by the Free Software Foundation; either version
  2.1 of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  The full text of the license is available at http://www.gnu.org/copyleft/lesser.html
  -->
<xbl:xbl xmlns:xhtml="http://www.w3.org/1999/xhtml"
         xmlns:xforms="http://www.w3.org/2002/xforms"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:ev="http://www.w3.org/2001/xml-events"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xxi="http://orbeon.org/oxf/xml/xinclude"
         xmlns:xxforms="http://orbeon.org/oxf/xml/xforms"
         xmlns:fr="http://orbeon.org/oxf/xml/form-runner"
         xmlns:saxon="http://saxon.sf.net/"
         xmlns:xbl="http://www.w3.org/ns/xbl"
         xmlns:xxbl="http://orbeon.org/oxf/xml/xbl"
         xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
         xmlns:oxf="http://www.orbeon.com/oxf/processors">

    <xbl:binding id="fr-alert-dialog" element="fr|alert-dialog" xxbl:mode="">
        <xbl:resources>
            <xbl:style src="/xbl/orbeon/alert-dialog/alert-dialog.css"/>
        </xbl:resources>
        <xbl:handlers>
            <xbl:handler event="fr-show" phase="target">
                <xforms:setvalue if="event('message')" ref="message" value="event('message')"/>
                <xforms:setvalue if="event('context')" ref="context" value="event('context')"/>
                <xforms:setvalue if="event('positive-targetid')" ref="positive" value="event('positive-targetid')"/>
                <xforms:setvalue if="event('negative-targetid')" ref="negative" value="event('negative-targetid')"/>
                <xforms:setvalue if="event('neutral-targetid')" ref="neutral" value="event('neutral-targetid')"/>
                <xxforms:show dialog="dialog" xxbl:scope="inner"/>
            </xbl:handler>
        </xbl:handlers>
        <xbl:template xxbl:transform="oxf:unsafe-xslt">
            <xsl:transform version="2.0">
                <xsl:import href="oxf:/oxf/xslt/utils/xbl.xsl"/>

                <xsl:template match="/*">

                    <xsl:variable name="has-multiple-choices" select="count(fr:positive-choice | fr:negative-choice | fr:neutral-choice) > 1"/>

                    <!-- Once AVTs are supported: close="{exists(fr:neutral-choice) and not ($has-multiple-choices)}"  -->
                    <xxforms:dialog xxbl:scope="inner" id="dialog" level="modal" appearance="full" close="false"
                            class="xbl-fr-alert-dialog xbl-fr-alert-dialog-{if ($has-multiple-choices) then 'question' else 'info'}">

                        <xforms:model>
                            <xforms:instance>
                                <alert>
                                    <message/>
                                    <context/>
                                    <positive/>
                                    <negative/>
                                    <neutral/>
                                </alert>
                            </xforms:instance>
                        </xforms:model>

                        <xforms:var name="local" value="instance()"/>

                        <!-- Set the focus on the first button in the dialog. This is done:
                             a) For usability: so users can press enter to activate the button, or press tab to go to
                                the next button.
                             b) For accessibility, as JAWS only reads the content of the dialog if a form control
                                inside the dialog gets the focus.

                             Setting the focus could be done in XForms, but the code would be more complicated as:
                             a) The button would need to have an id, so it needs to be in the inner scope, while the
                                label inside the button needs to be in outer scope.
                             b) We need code to figure out what the id of the first button is, while in JavaScript we
                                can just refer to "the first button in the dialog".
                        -->
                        <xxforms:script ev:event="xxforms-dialog-open">
                            var buttons = this.getElementsByTagName("button");
                            if (buttons.length > 0) buttons[0].focus();
                        </xxforms:script>
                        <xforms:label xxbl:scope="outer"><xsl:copy-of select="fr:label/(@* | node())"/></xforms:label>
                        <xhtml:div class="xbl-fr-alert-dialog-message">
                            <xsl:choose>
                                <xsl:when test="fr:message">
                                    <!-- Use static message -->
                                    <xforms:output value="''" xxbl:scope="outer">
                                        <xforms:label><xsl:copy-of select="fr:message/(@* | node())"/></xforms:label>
                                    </xforms:output>
                                </xsl:when>
                                <xsl:otherwise>
                                    <!-- use dynamic message -->
                                    <xforms:output value="''"><xforms:label ref="$local/message"/></xforms:output>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xhtml:div>
                        <xhtml:div class="xbl-fr-alert-dialog-buttons">
                            <xforms:group appearance="xxforms:internal" xxbl:scope="outer">
                                <!-- Any button click closes the dialog and clears the local data -->
                                <xforms:action ev:event="DOMActivate">
                                    <xxforms:hide dialog="dialog" xxbl:scope="inner"/>
                                    <xforms:setvalue iterate="*" ref="." xxbl:scope="inner"/>
                                </xforms:action>
                                <xsl:variable name="buttons" as="element(xforms:trigger)*">
                                    <xsl:apply-templates/>
                                </xsl:variable>
                                <xsl:for-each select="$buttons">
                                    <xsl:variable name="is-primary" select="position() = last()"/>
                                    <xsl:copy>
                                        <xsl:if test="$is-primary">
                                            <xsl:attribute name="appearance">xxforms:primary</xsl:attribute>
                                        </xsl:if>
                                        <xsl:copy-of select="@* | node()"/>
                                    </xsl:copy>
                                </xsl:for-each>
                            </xforms:group>
                        </xhtml:div>
                    </xxforms:dialog>
                </xsl:template>

                <xsl:template match="fr:positive-choice">
                    <xsl:copy-of select="xforms:trigger(*, 'Yes', 'positive')"/>
                </xsl:template>

                <xsl:template match="fr:negative-choice">
                    <xsl:copy-of select="xforms:trigger(*, 'No', 'negative')"/>
                </xsl:template>

                <xsl:template match="fr:neutral-choice">
                    <xsl:copy-of select="xforms:trigger(*, 'OK', 'neutral')"/>
                </xsl:template>

                <xsl:function name="xforms:trigger" as="element(xforms:trigger)">
                    <xsl:param name="content" as="element()*"/>
                    <xsl:param name="default" as="xs:string"/>
                    <xsl:param name="handler" as="xs:string"/>
                    <xsl:variable name="fr-label" as="element(fr:label)?" select="$content/self::fr:label"/>
                    <xforms:trigger xxbl:scope="outer">
                        <xforms:label>
                            <xsl:if test="$handler = 'positive'"><xhtml:img src="/apps/fr/style/images/silk/tick.png" alt=""/></xsl:if>
                            <xsl:if test="$handler = 'negative'"><xhtml:img src="/apps/fr/style/images/silk/cross.png" alt=""/></xsl:if>
                            <xsl:choose>
                                <xsl:when test="exists($fr-label)">
                                    <xforms:output>
                                        <xsl:copy-of select="$fr-label/(@* | node())"/>
                                    </xforms:output>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:value-of select="$default"/>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xforms:label>
                        <xsl:copy-of select="$content except $fr-label"/>
                        <!-- If a custom target is provided, dispatch to it -->
                        <!-- NOTE: For now target must be an absolute or effective id -->
                        <xforms:action ev:event="DOMActivate">
                            <xforms:dispatch if="normalize-space($local/{$handler})" name="fr-{$handler}" targetid="{{$local/{$handler}}}" xxbl:scope="inner">
                                <xxforms:context name="context" value="$local/context"/>
                            </xforms:dispatch>
                        </xforms:action>
                    </xforms:trigger>
                </xsl:function>

                <xsl:template match="@*|node()" priority="-100"/>
            </xsl:transform>
        </xbl:template>
    </xbl:binding>

</xbl:xbl>