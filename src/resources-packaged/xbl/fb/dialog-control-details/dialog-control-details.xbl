<!--
  Copyright (C) 2011 Orbeon, Inc.

  This program is free software; you can redistribute it and/or modify it under the terms of the
  GNU Lesser General Public License as published by the Free Software Foundation; either version
  2.1 of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  See the GNU Lesser General Public License for more details.

  The full text of the license is available at http://www.gnu.org/copyleft/lesser.html
  -->
<xbl:xbl xmlns:xh="http://www.w3.org/1999/xhtml"
         xmlns:xf="http://www.w3.org/2002/xforms"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xxf="http://orbeon.org/oxf/xml/xforms"
         xmlns:fr="http://orbeon.org/oxf/xml/form-runner"
         xmlns:fb="http://orbeon.org/oxf/xml/form-builder"
         xmlns:saxon="http://saxon.sf.net/"
         xmlns:xbl="http://www.w3.org/ns/xbl"
         xmlns:xxbl="http://orbeon.org/oxf/xml/xbl"
         xmlns:frf="java:org.orbeon.oxf.fr.FormRunner"
         xmlns:fbf="java:org.orbeon.oxf.fb.FormBuilder"
         xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
         xmlns:oxf="http://www.orbeon.com/oxf/processors">

    <xbl:binding id="fb-dialog-control-details" element="fb|dialog-control-details" xxbl:mode="binding">
        <xbl:handlers>
            <!-- Read data upon dialog open -->
            <xbl:handler event="fb-show-dialog fb-load" phase="target" defaultAction="cancel">

                <xf:var name="form" value="xxf:binding('fb-dialog-control-details')"/>

                <xf:action type="xpath">fbf:selectTdForControlId($form, event('control-id'))</xf:action>

                <xf:setvalue iterate="*[not(*)]" ref="."/> <!-- Clear all local values -->

                <xf:setvalue ref="$i/original-control-name" value="fbf:controlNameFromId(event('control-id'))"/>
                <xf:setvalue ref="$i/control-name"          value="$i/original-control-name"/>

                <xf:setvalue ref="$i/control-names"         value="string-join(fbf:getAllControlNamesXPath($form), ' ')"/>

                <xf:var name="control"                      value="fbf:findControlByNameOrEmpty($form, $i/control-name)"/>
                <xf:var name="resources"                    value="frf:currentFormResources()"/>

                <!-- Split out classes -->
                <xf:var name="standard-classes"             value="$resources/dialog-control-details/options/item/value/string(), 'fr-attachment', 'fr-static-attachment'"/>
                <xf:var name="control-classes"              value="xxf:split($control/@class)"/>

                <xf:setvalue ref="$i/standard-classes"      value="string-join($control-classes[. = $standard-classes], ' ')"/>
                <xf:setvalue ref="$i/custom-classes"        value="string-join($control-classes[not(. = $standard-classes)], ' ')"/>

                <!-- Copy XBL control-details from xbl:binding in local instance -->
                <xf:delete ref="$i/fb:control-details"/>
                <xf:insert ref="$i/*" origin="fbf:bindingForControlElementOrEmpty($control)/fb:metadata/fb:control-details"/>

                <!-- Process the LHHA of each details control -->
                <!-- LATER: Use xxf:dynamic for custom properties. -->
                <xf:var name="current-language" value="$resources/@xml:lang/string() treat as xs:string"/>
                <xf:action iterate="$i/fb:control-details/*/(xf:label, xf:hint, xf:help, xf:alert)">
                    <xf:var name="lhha" value="."/>
                    <!-- If it has a lang attribute, only keep if matches the current language -->
                    <xf:delete if="exists($lhha/@lang) and $lhha/@lang != $current-language" ref="$lhha"/>
                    <!-- If it has a ref="$resources/...", evaluate it -->
                    <xf:action if="starts-with($lhha/@ref, '$resources/')">
                        <xf:var name="resource-path" value="substring-after($lhha/@ref, '$resources/')"/>
                        <xf:setvalue ref="$lhha" value="$resources/saxon:evaluate($resource-path)"/>
                        <xf:delete ref="$lhha/@ref"/>
                    </xf:action>
                </xf:action>

                <!-- Create elements for additional properties, populating their initial value from the control -->
                <xf:delete ref="$i/control-details/*"/>
                <xf:action iterate="$i/fb:control-details/*">
                    <xf:var name="position" value="position()"/>
                    <xf:var name="xforms-control" value="."/>
                    <xf:var name="control-ref" value="$control/saxon:eval(saxon:expression($xforms-control/@ref, $xforms-control/@ref))"/>
                    <xf:insert context="$i/control-details" ref="*" origin="xxf:element('control-detail', string($control-ref))"/>
                </xf:action>

                <!-- Clear default alert -->
                <xf:var name="default-alert" value="$i/default-alert"/>
                <xf:delete ref="$default-alert/node()"/>

                <xf:insert
                    context="$default-alert"
                    origin="fbf:readDefaultAlertAsXML($form, $i/control-name)"/>

                <!-- Clear validations -->
                <xf:var name="validations" value="$i/validations"/>
                <xf:delete ref="$validations/node()"/>

                <!-- Read required, datatype, and constraint validations -->
                <xf:insert
                    context="$validations"
                    origin="fbf:readValidationsAsXML($form, $i/control-name)"/>

                <!--  Insert an empty `formula` validation in the end to make it more discoverable by the user -->
                <xf:insert
                    if="empty($validations/validation[not(@type = ('required', 'datatype'))])"
                    ref="$validations/validation"
                    origin="instance('validation-constraint-template')"/>

                <!--  Read appearances -->
                <xf:dispatch
                    name="reload-appearances"
                    targetid="model">
                    <xf:property name="is-initial-load" value="true()"/>
                </xf:dispatch>

                <!--
                    Force required if the datatype implies it.

                    In general we want:

                        type == xs:* => required == true()

                    But we don't write over a custom required XPath expression, as that would be data loss. The
                    inconsistency will be resolved upon write, as, for a builtin type:

                        required == false() | customXPath => type == xf:*

                    NOTE: datatype validation uses true/false, and required validation uses true()/false()/customXPath.
                -->
                <xf:setvalue
                    if="$validations/validation[@type = 'datatype']/builtin-type-required = 'true'
                        and $validations/validation[@type = 'required']/required = 'false()'"
                    ref="$validations/validation[@type = 'required']/required"
                    value="'true()'"/>

                <!-- Read MIPs -->
                <xf:setvalue ref="$i/relevant"   value="fbf:readMipAsAttributeOnlyOrEmpty($form, $i/control-name, 'relevant')"/>
                <xf:setvalue ref="$i/readonly"   value="fbf:readMipAsAttributeOnlyOrEmpty($form, $i/control-name, 'readonly')"/>
                <xf:setvalue ref="$i/calculate"  value="fbf:readMipAsAttributeOnlyOrEmpty($form, $i/control-name, 'calculate')"/>
                <xf:setvalue ref="$i/default"    value="fbf:readMipAsAttributeOnlyOrEmpty($form, $i/control-name, 'default')"/>
                <xf:setvalue ref="$i/whitespace" value="fbf:readMipAsAttributeOnlyOrEmpty($form, $i/control-name, 'whitespace')"/>

                <!-- Read help -->
                <xf:setvalue
                    ref="$i/help"
                    value="fbf:getControlHelpOrEmpty($i/control-name)"/>
                <xf:setvalue
                    ref="$i/help/@isHTML"
                    value="if (fbf:isControlLHHAHTMLMediatype($form, $i/control-name, 'help')) then 'true' else ''"/>

                <!-- Set prev/next buttons -->
                <xf:setvalue
                    ref="$i/prev-control-id"
                    value="
                        fbf:findNextControlId(
                            $form,
                            $i/control-name,
                            'previous'
                        )"/>
                <xf:setvalue
                    ref="$i/next-control-id"
                    value="
                        fbf:findNextControlId(
                            $form,
                            $i/control-name,
                            'next'
                        )"/>

                <!-- Remove all namespace nodes on the root element and insert those from the external xf:bind. This
                     allows scoping namespaces for XPath expressions validated with xxf:xpath2. -->
                <xf:delete ref="$i/namespace::node()"/>
                <xf:insert context="$i" origin="fbf:findBindByNameOrEmpty($form, $i/control-name)/namespace::node()"/>

                <xf:setvalue
                    ref="instance('modified')"
                    value="false()"/>

                <xxf:show dialog="dialog"/>

                <!-- Tell custom settings to initialize -->
                <xf:dispatch name="fb-initialize" targetid="fb-custom-control-settings">
                    <xf:property name="form"                  value="$form/root()"/>
                    <xf:property name="form-instance"         value="fbf:formInstanceRoot($form)"/>
                    <xf:property name="metadata-instance"     value="fbf:metadataInstanceRoot($form)"/>
                    <xf:property name="original-control-id"   value="event('control-id')"/>
                    <xf:property name="original-control-name" value="$i/original-control-name"/>
                    <xf:property name="data-holders"          value="fbf:findDataHolders($form, $i/original-control-name)"/>
                </xf:dispatch>

            </xbl:handler>
            <!-- Save data upon close unless the sub-form is not valid. Do this upon capture phase so that we can
                 process values, including custom control settings, before the dialog is actually closed and becomes
                 non-relevant. -->
            <xbl:handler
                event="xxforms-dialog-close"
                observer="group-around-dialog"
                phase="capture"
                if="event('fb-save') and valid($i)">

                <xf:dispatch
                    name="fb-save"
                    targetid="fb-dialog-control-details"/>

            </xbl:handler>
            <xbl:handler event="fb-save" phase="target">

                <xf:var name="form" value="xxf:binding('fb-dialog-control-details')"/>

                <xf:action if="instance('modified') = true()">

                    <xf:var name="old-name" value="$i/original-control-name/string()"/>
                    <xf:var name="new-name" value="$i/control-name/string()"/>

                    <!-- Find reference to control -->
                    <xf:var name="control" value="fbf:findControlByNameOrEmpty($form, $old-name)"/>
                    <!-- Rename if needed -->
                    <xf:action type="xpath">
                        fbf:renameControlIfNeeded($form, $old-name, $new-name)
                    </xf:action>
                    <!-- Write classes -->
                    <xf:var name="classes" value="distinct-values((xxf:split($i/standard-classes), xxf:split($i/custom-classes)))"/>
                    <xf:delete if="count($classes) = 0" ref="$control/@class"/>
                    <xf:insert if="count($classes) > 0" context="$control" origin="xxf:attribute('class', string-join($classes, ' '))"/>
                    <!-- Update custom XBL properties -->
                    <xf:action iterate="$i/fb:control-details/*">
                        <xf:var name="position" value="position()"/>
                        <xf:var name="bound-node" value="$i/control-details/*[$position]"/>
                        <xf:var name="xforms-control" value="."/>
                        <xf:setvalue
                            ref="$control/saxon:eval(saxon:expression($xforms-control/@ref, $xforms-control/@ref))"
                            value="$bound-node"/>
                    </xf:action>

                    <xf:action type="xpath">
                        (: Write alerts and constraints :)
                        fbf:writeAlertsAndValidationsAsXML(
                            $form,
                            $i/control-name,
                            $i/appearances/@selection,
                            $i/default-alert/alert,
                            $i/validations/validation
                        ),
                        (: Write MIPs :)
                        for $mip in ('relevant', 'readonly', 'calculate', 'default', 'whitespace') return
                            fbf:updateMipAsAttributeOnly($form, $i/control-name, $mip, $i/*[name() = $mip]),
                        (: Write help :)
                        fbf:setControlHelp($i/control-name, $i/help),
                        fbf:setControlLHHAMediatype($form, $i/control-name, 'help', $i/help/@isHTML = 'true')
                    </xf:action>
                </xf:action>

                <!-- Tell custom settings to apply changes -->
                <xf:dispatch name="fb-apply" targetid="fb-custom-control-settings">
                    <xf:property name="form"                  value="$form/root()"/>
                    <xf:property name="form-instance"         value="fbf:formInstanceRoot($form)"/>
                    <xf:property name="metadata-instance"     value="fbf:metadataInstanceRoot($form)"/>
                    <xf:property name="control-name"          value="$i/control-name"/>
                    <xf:property name="data-holders"          value="fbf:findDataHolders($form, $i/control-name)"/>
                </xf:dispatch>

            </xbl:handler>
            <xbl:handler
                event="DOMActivate"
                observer="control-name-input control-custom-input save-button prev-button next-button">

                <xf:action if="valid($i)">
                    <xf:var
                        name="must-close"
                        value="not(event('xxf:targetid') = ('prev-button', 'next-button'))"/>

                    <xxf:hide if="$must-close" dialog="dialog">
                        <xf:property name="fb-save" value="true()"/>
                    </xxf:hide>

                    <xf:dispatch
                        if="not($must-close)"
                        name="fb-save"
                        targetid="fb-dialog-control-details"/>
                </xf:action>

                <!-- Mark all visited if the data is invalid -->
                <xxf:setvisited
                    if="not(valid($i))"
                    control="dialog"
                    recurse="true"/>

            </xbl:handler>
            <!-- Prev and Next buttons -->
            <xbl:handler event="DOMActivate" observer="prev-button next-button" if="valid($i)">

                <xf:var
                    name="new-control-id"
                    value="
                        $i/(
                            if (event('xxf:targetid') = 'prev-button') then
                                prev-control-id
                            else
                                next-control-id
                        )/string()"/>

                <xf:dispatch if="exists($new-control-id)" name="fb-load" targetid="fb-dialog-control-details">
                    <xf:property name="control-id" value="$new-control-id"/>
                </xf:dispatch>

            </xbl:handler>
            <!-- Close and cancel upon DOMActivate -->
            <xbl:handler event="DOMActivate" observer="cancel-button">
                <xxf:hide dialog="dialog">
                    <xf:property name="fb-save" value="false()"/>
                </xxf:hide>
            </xbl:handler>
        </xbl:handlers>
        <xbl:implementation>
            <xf:model id="model">

                <xf:action event="reload-appearances">

                    <xf:var name="appearances"        value="$i/appearances"/>
                    <xf:var name="is-initial-load"    value="event('is-initial-load') = true()"/>
                    <xf:var name="current-appearance" value="$appearances/@selection/string()"/>

                    <xf:delete ref="$appearances/node()"/>
                    <xf:insert
                        context="$appearances"
                        origin="
                            fbf:possibleAppearancesByControlNameAsXML(
                                xxf:binding('fb-dialog-control-details'),
                                $i/control-name,
                                $is-initial-load,
                                $i/validations/validation[@type = 'datatype']/builtin-type,
                                $current-appearance
                            )"/>
                    <!--  Assume there is only one active appearance at a given time for now. At the XForms level there
                          can be multiple appearances. We do have fr:character-counter which could wrap a control with an
                          appearance, for example we could have <xf:textarea appearance="fancy character-counter">, but we
                          don't have a concrete case yet. -->
                    <xf:setvalue
                        ref="$appearances/@selection"
                        value="($appearances/appearance[@current = 'true'], $appearances/appearance[1])[1]/value"/>
                </xf:action>

                <xf:instance id="i" xxf:exclude-result-prefixes="#all">
                    <local>
                        <original-control-name/>    <!-- So we can find back the control when saving if users change the name -->
                        <control-name/>             <!-- Possibly new name set by users -->
                        <standard-classes/>         <!-- fr-summary, fr-search... -->
                        <custom-classes/>           <!-- All custom classes except the standard ones -->
                        <control-names/>            <!-- All used control names in the form, to check that new name doesn't conflict with existing id -->
                        <control-details/>          <!-- Sub-elements contain additional properties for this control -->

                        <default-alert
                            global-default-alert-message=""
                            readonly-alert-message=""/>

                        <appearances selection=""/>
                        <validations/>

                        <relevant/>
                        <readonly/>
                        <calculate/>
                        <default/>
                        <whitespace/>

                        <help isHTML=""/>

                        <prev-control-id/>
                        <next-control-id/>
                    </local>
                </xf:instance>

                <xf:var name="i" value="instance()"/>

                <xf:instance id="modified">
                    <modified/>
                </xf:instance>

                <xf:setvalue
                    event="xforms-insert xforms-delete xxforms-replace xxforms-value-changed"
                    observer="i"
                    ref="instance('modified')"
                    value="true()"/>

                <xf:instance id="validation-constraint-template" xxf:exclude-result-prefixes="#all">
                    <validation id="" type="formula" level="error" default-alert="true">
                        <constraint expression="" argument=""/>
                        <alert message=""/>
                    </validation>
                </xf:instance>

                <xf:bind ref="control-name"
                    type="xs:NCName"
                    xxf:whitespace="trim"
                    readonly="false()"
                    constraint=". = $i/original-control-name or not(. = xxf:split($i/control-names))"/>

                <xf:bind ref="default-alert">
                    <xf:bind
                        ref="alert/@global"
                        type="xs:boolean"/>
                    <xf:bind
                        ref="alert/@message"
                        readonly="../@global = true()"/>
                    <xf:bind
                        ref="@global-default-alert-message"
                        calculate="xxf:r('detail.labels.alert', '|fr-fr-resources|')"/><!-- FIXME: This uses FB's current language, not the edited form's -->
                    <xf:bind
                        id="default-alert"
                        ref="if (alert/@global = true())
                             then @global-default-alert-message
                             else alert/@message"/>
                    <!-- Keep copy of default alert, whether default for control or global default -->
                    <xf:bind
                        ref="@readonly-alert-message"
                        calculate="bind('default-alert')"/>
                </xf:bind>

                <xf:bind ref="appearances/@selection" readonly="count(../appearance) le 1"/>

                <xf:var
                    name="string-constraints"
                    value="'max-length', 'min-length', 'length', 'pattern'"/>

                <xf:var
                    name="noargs-integer-constraints"
                    value="'non-negative', 'negative', 'non-positive', 'positive'"/>

                <xf:var
                    name="min-max-constraints"
                    value="'max-inclusive', 'max-exclusive', 'min-inclusive', 'min-exclusive'"/>

                <xf:var
                    name="integer-constraints"
                    value="$noargs-integer-constraints, 'total-digits', 'pattern', $min-max-constraints"/>

                <xf:var
                    name="decimal-constraints"
                    value="$integer-constraints, 'fraction-digits'"/>

                <xf:var
                    name="date-constraints"
                    value="$min-max-constraints"/>

                <xf:var
                    name="noargs-constraints"
                    value="'required', 'datatype', 'formula', $noargs-integer-constraints"/>

                <xf:bind ref="validations">

                    <!-- NOTE: There can be at most one required validation for now -->
                    <xf:bind ref="validation[@type = 'required']" name="required-validation"/>

                    <xf:bind ref="validation">
                        <xf:bind
                            ref="@type"
                            name="type"
                            readonly=". = ('required', 'datatype')"/>

                        <xf:bind
                            ref="@level"
                            name="level"
                            readonly="$type = ('required', 'datatype')"/>

                        <xf:bind
                            ref="@default-alert"
                            type="xs:boolean"
                            readonly="false()"
                            calculate="
                                (: No default alert for warning/info constraints :)
                                if (not($type = ('required', 'datatype')) and $level != 'error') then
                                    false()
                                else
                                    ."/>

                        <!-- Keep required in sync -->
                        <xf:bind
                            ref=".[@type = 'datatype']/builtin-type-required"
                            calculate="if ($required-validation/required = 'true()') then 'true' else 'false'"/>

                        <xf:bind
                            ref="constraint/@expression"
                            type="xxf:xpath2"
                            required="false()"
                            relevant="$type = 'formula'"/>

                        <xf:bind
                            ref="constraint/@argument"
                            type="xf:integer"
                            calculate="if ($type = $noargs-constraints) then '' else ."
                            readonly="false()"
                            required="not($type = $noargs-constraints)"
                            constraint=". ge 0"
                            relevant="not($type = $noargs-constraints)"/>

                        <xf:bind
                            ref="required"
                            type="xxf:xpath2"
                            required="true()"/>
                    </xf:bind>
                </xf:bind>

                <xf:bind
                    ref="relevant | readonly | default | calculate"
                    type="xxf:xpath2"
                    required="false()"/>

                <xf:bind
                    ref="prev-control-id, next-control-id"
                    readonly="xxf:is-blank()"/>

            </xf:model>
        </xbl:implementation>
        <xbl:template xxbl:transform="oxf:unsafe-xslt">
            <xf:group xsl:version="2.0" id="group-around-dialog">
                <!-- Bindings specified on control -->
                <!-- LATER: Use xxf:r(). Need to find solution for itemset resources. -->
                <xf:var name="resources">
                    <xxf:value value=". treat as element()" xxbl:scope="outer" xbl:attr="model context ref=resources-ref"/>
                </xf:var>

                <xxf:dialog id="dialog" level="modal" class="fb-dialog-control-details">
                    <xf:label ref="$resources/dialog-control-details/label"/>

                    <xf:var name="form" value="xxf:binding('fb-dialog-control-details')"/>

                    <!-- Figure out schema prefix if any -->
                    <xf:var name="schema"        value="fbf:findSchemaOrEmpty($form)"       as="xs:string?"/>
                    <xf:var name="schema-prefix" value="fbf:findSchemaPrefixOrEmpty($form)" as="xs:string?"/>

                    <xf:var
                        name="builtin-type"
                        value="$i/validations/validation[@type = 'datatype']/builtin-type/string()"/>

                    <fr:tabbable id="fb-tabbable">
                        <fr:tab id="base-tab">
                            <fr:label ref="$resources/dialog-control-details/tab-base/label"/>
                            <fr:grid id="fb-base-tab-grid">
                                <xh:tr>
                                    <xh:td>
                                        <!-- Control name -->
                                        <xf:input ref="$i/control-name" incremental="true" id="control-name-input">
                                            <xf:label ref="$resources/dialog-control-details/control-name/label"/>
                                            <xf:alert ref="$resources/dialog-control-details/control-name/alert"/>
                                            <xf:hint  ref="$resources/dialog-control-details/control-name/hint"/>
                                        </xf:input>

                                        <xf:var
                                            name="is-attachment"
                                            value="xxf:split($i/standard-classes) = 'fr-attachment'"/>

                                        <xf:var
                                            name="is-static-attachment"
                                            value="xxf:split($i/standard-classes) = 'fr-static-attachment'"/>

                                        <xf:var
                                            name="items-to-show"
                                            value="
                                                $resources/dialog-control-details/options/item[
                                                    (
                                                        $is-attachment or value != 'fr-email-attachment'
                                                    ) and not(
                                                        ($is-attachment or $is-static-attachment) and value = ('fr-email-recipient', 'fr-email-subject')
                                                    )
                                                ]
                                            "/>

                                        <!-- Options (predefined classes) -->
                                        <xf:select ref="$i/standard-classes" appearance="full">
                                            <xf:label ref="$resources/dialog-control-details/options/label"/>
                                            <xf:itemset ref="$items-to-show">
                                                <xf:label ref="label"/>
                                                <xf:value ref="value"/>
                                            </xf:itemset>
                                        </xf:select>

                                        <!-- Custom classes -->
                                        <xf:input ref="$i/custom-classes">
                                            <xf:label ref="$resources/classes/label"/>
                                        </xf:input>
                                    </xh:td>
                                    <xh:td>
                                        <!-- Appearances -->
                                        <xf:var
                                            name="toggle"
                                            value="
                                                count($i/appearances/appearance[xxf:is-blank(value)]) = 1
                                                and count($i/appearances/appearance[xxf:non-blank(value)]) = 1"/>

                                        <!-- Propose a choice between multiple items -->
                                        <xf:select1
                                                ref="$i/appearances/@selection[not($toggle) and count($i/appearances/appearance) gt 1]"
                                                appearance="full">
                                            <xf:label ref="$resources/dialog-control-details/control-appearance/label"/>
                                            <xf:itemset ref="$i/appearances/appearance">
                                                <!-- See https://github.com/orbeon/orbeon-forms/issues/2337 -->
                                                <xf:label xml:space="preserve">
                                                    <xh:img src="{{icon}}" alt="" width="16" height="16"/>
                                                    <xf:output value="label"/>
                                                </xf:label>
                                                <xf:value ref="value"/>
                                            </xf:itemset>
                                        </xf:select1>
                                        <!-- Simplified case where we just show a checkbox -->
                                        <xf:select ref="$i/appearances/@selection[$toggle]" appearance="full">
                                            <xf:label ref="$resources/dialog-control-details/control-appearance/label"/>
                                            <xf:itemset ref="$i/appearances/appearance[xxf:non-blank(value)]">
                                                <!-- See https://github.com/orbeon/orbeon-forms/issues/2337 -->
                                                <xf:label xml:space="preserve">
                                                    <xh:img src="{{icon}}" alt="" width="16" height="16"/>
                                                    <xf:output value="label"/>
                                                </xf:label>
                                                <xf:value ref="value"/>
                                            </xf:itemset>
                                        </xf:select>

                                        <!-- Properties specific to this control defined in the XBL metadata -->
                                        <xf:repeat ref="$i/fb:control-details/*" id="control-custom-input">
                                            <xf:var name="position" value="position()"/>
                                            <xf:var name="bound-node" value="$i/control-details/*[$position]"/>
                                            <xf:var name="xforms-control" value="."/>
                                            <xf:input ref="if ($xforms-control/self::xf:input) then $bound-node else ()">
                                                <xf:label ref="$xforms-control/xf:label"/>
                                                <xf:hint ref="$xforms-control/xf:hint" appearance="minimal"/>
                                                <xf:help ref="$xforms-control/xf:help"/>
                                                <xf:alert ref="$xforms-control/xf:alert"/>
                                            </xf:input>
                                        </xf:repeat>
                                    </xh:td>
                                </xh:tr>
                            </fr:grid>
                        </fr:tab>
                        <fr:tab id="validations-tab" context="validations">
                            <fr:label ref="$resources/dialog-control-details/tab-validations/label"/>
                            <fr:grid>
                                <xh:tr>
                                    <xh:td>
                                        <fr:checkbox-input ref="instance()/whitespace" selected-value="trim" deselected-value="">
                                            <xf:label value="xxf:r('dialog-control-details.whitespace.item.label', '|fr-form-resources|')"/>
                                        </fr:checkbox-input>
                                        <fr:checkbox-input ref="$i/default-alert/alert/@global">
                                            <xf:label ref="$resources/dialog-control-details/use-global-alert/label"/>
                                            <!-- Dynamic bind depends on this value, we must do an explicit RRR -->
                                            <xf:action event="xforms-value-changed">
                                                <xf:rebuild/><xf:recalculate/><xf:revalidate/>
                                            </xf:action>
                                        </fr:checkbox-input>
                                    </xh:td>
                                    <xh:td>
                                        <xf:input bind="default-alert">
                                            <xf:label ref="$resources/dialog-control-details/default-alert/label"/>
                                            <xf:hint  ref="$resources/dialog-control-details/default-hint/label"/>
                                        </xf:input>
                                    </xh:td>
                                </xh:tr>
                            </fr:grid>

                            <fr:grid
                                id="validations-grid"
                                ref="validation"
                                origin="instance('validation-constraint-template')"
                                repeat="true"
                                freeze="2">
                                <xh:tr>
                                    <xh:td>

                                        <xf:var
                                            name="validation-type"
                                            value="@type"/>

                                        <xf:var
                                            name="allowed-constraints"
                                            value="
                                                'formula',
                                                (
                                                    if ($builtin-type = ('string', 'email')) then
                                                        $string-constraints
                                                    else if ($builtin-type = 'integer') then
                                                        $integer-constraints
                                                    else if ($builtin-type = 'decimal') then
                                                        $decimal-constraints
                                                    else
                                                        ()
                                                ),
                                                $validation-type/string()
                                        "/>

                                        <xf:select1 ref="$validation-type" appearance="minimal">
                                            <xf:label ref="$resources/dialog-control-details/validation-type/label"/>
                                            <xf:itemset ref=".[. = 'required']">
                                                <xf:label ref="$resources/dialog-control-details/required/label"/>
                                                <xf:value>required</xf:value>
                                            </xf:itemset>
                                            <xf:itemset ref=".[. = 'datatype']">
                                                <xf:label ref="$resources/dialog-control-details/types/label"/>
                                                <xf:value>datatype</xf:value>
                                            </xf:itemset>
                                            <xf:itemset ref="$resources/dialog-control-details/constraint/item[@id = $allowed-constraints]">
                                                <xf:label ref="."/>
                                                <xf:value ref="@id"/>
                                            </xf:itemset>
                                        </xf:select1>
                                    </xh:td>
                                    <xh:td>
                                        <xf:group>
                                            <xf:label ref="$resources/dialog-control-details/validation-details/label"/>
                                            <xf:group ref=".[@type = 'required']/required">
                                                <xf:var name="required"      value="."/>
                                                <xf:var name="true-or-false" value="$required = ('true()', 'false()')"/>
                                                <xf:var name="items"         value="$resources/dialog-control-details/required/item"/>

                                                <xf:select1 ref="$required" appearance="full xxf:horizontal">
                                                    <!--  Place "No" first as that is the default -->
                                                    <xf:itemset ref="$items[@id = 1], $items[@id = (0, 2)]">
                                                        <xf:label ref="."/>
                                                        <!-- Tricky bits: map @id to XPath and handle case where we switch from
                                                             true() or false() to XPath -->
                                                        <xf:value ref="if (@id = 0)
                                                                       then 'true()'
                                                                       else if (@id = 1)
                                                                       then 'false()'
                                                                       else string($required[not($true-or-false)])"/>
                                                    </xf:itemset>
                                                </xf:select1>
                                                <xf:input id="required-xpath" ref="$required[not($true-or-false)]">
                                                    <xf:label ref="$resources/dialog-control-details/required/label"/>
                                                    <!-- When the control appears and its value is empty, it means that the
                                                         user just chose the "Formula" option. -->
                                                    <xf:setfocus
                                                        event="xforms-enabled"
                                                        if="xxf:is-blank()"
                                                        control="required-xpath"/>
                                                </xf:input>
                                            </xf:group>

                                            <!-- Built-in type -->
                                            <xf:group ref=".[@type = 'datatype']">
                                                <!--
                                                    - only keep "reasonable" types
                                                    - add supported type only if already present in the data
                                                -->
                                                <xf:var
                                                    name="supported"
                                                    value="'string', 'decimal', 'integer', 'dateTime', 'date', 'time', 'boolean', 'email', $builtin-type"/>

                                                <xf:select1 ref="builtin-type">
                                                    <!-- Only show label if there is a schema -->
                                                    <xf:label ref="$resources/dialog-control-details/builtin-type/label[exists($schema)]"/>
                                                    <!-- Add placeholder if there is a schema type -->
                                                    <xf:itemset ref=".[../schema-type != '']">
                                                        <xf:label ref="$resources/dialog-control-details/builtin-type/use-schema-type"/>
                                                        <xf:value/>
                                                    </xf:itemset>
                                                    <xf:itemset
                                                        ref="
                                                            $resources/dialog-control-details/builtin-type/choices//(
                                                                choices[
                                                                    exists(type[. = $supported])
                                                                ]
                                                                |
                                                                type[. = $supported]
                                                            )">
                                                        <xf:label ref="if (self::choices) then label else if (xxf:non-blank(@label)) then @label else ."/>
                                                        <xf:value ref="if (self::choices) then () else ."/>
                                                    </xf:itemset>
                                                    <xf:setvalue event="xforms-value-changed" if=". != ''" ref="../schema-type"/>
                                                    <!--  Update available appearances -->
                                                    <xf:dispatch
                                                        event="xforms-value-changed"
                                                        name="reload-appearances"
                                                        targetid="model">
                                                        <xf:property name="is-initial-load" value="false()"/>
                                                    </xf:dispatch>
                                                </xf:select1>
                                                <!-- Schema type selection if applicable -->
                                                <fr:dropdown-select1 ref="schema-type[exists($schema)]">
                                                    <xf:label ref="$resources/dialog-control-details/schema-type/label"/>
                                                    <!-- NOTE: Mark itemset as mutable as the schema may be updated -->
                                                    <xf:itemset ref="$schema/xs:simpleType">
                                                        <xf:label ref="string-join(($schema-prefix, @name), ':')"/>
                                                        <xf:value ref="string-join(($schema-prefix, @name), ':')"/>
                                                    </xf:itemset>
                                                    <xf:setvalue event="xforms-value-changed" if=". != ''" ref="../builtin-type"/>
                                                </fr:dropdown-select1>
                                            </xf:group>

                                            <!-- Formula or common constraint argument -->
                                            <xf:group ref=".[not(@type = ('required', 'datatype'))]">
                                                <xf:textarea ref="constraint/@expression">
                                                    <xf:label
                                                        class="xforms-hidden"
                                                        appearance="minimal"
                                                        ref="$resources/dialog-control-details/formula/label"/>
                                                    <xf:alert ref="$resources/dialog-control-details/formula/alert"/>
                                                </xf:textarea>
                                                <xf:input ref="constraint/@argument">
                                                    <xf:label appearance="minimal" ref="$resources/dialog-control-details/integer-argument/label"/>
                                                    <xf:alert ref="$resources/dialog-control-details/integer-argument/alert"/>
                                                </xf:input>
                                            </xf:group>
                                        </xf:group>

                                    </xh:td>
                                    <xh:td>
                                        <xf:select1 ref="@level">
                                            <xf:label ref="$resources/dialog-control-details/level/label"/>
                                            <xf:item>
                                                <xf:label>Error</xf:label>
                                                <xf:value>error</xf:value>
                                            </xf:item>
                                            <xf:item>
                                                <xf:label>Warning</xf:label>
                                                <xf:value>warning</xf:value>
                                            </xf:item>
                                            <xf:item>
                                                <xf:label>Info</xf:label>
                                                <xf:value>info</xf:value>
                                            </xf:item>
                                        </xf:select1>
                                    </xh:td>
                                    <xh:td>
                                        <xf:input
                                            ref="
                                                if (@default-alert = false() or @level != 'error') then
                                                    alert/@message
                                                else
                                                    $i/default-alert/@readonly-alert-message">
                                            <xf:label ref="$resources/dialog-control-details/alert/label"/>
                                        </xf:input>
                                        <xf:input ref=".[@level = 'error']/@default-alert">
                                            <xf:label ref="$resources/dialog-control-details/use-default-alert/label"/>
                                        </xf:input>
                                    </xh:td>
                                </xh:tr>
                            </fr:grid>
                        </fr:tab>
                        <fr:tab id="formulas-tab">
                            <fr:label ref="$resources/dialog-control-details/tab-formulas/label"/>
                            <fr:grid>
                                <xh:tr>
                                    <xh:td>
                                        <xf:textarea ref="calculate">
                                            <xf:label ref="$resources/dialog-control-details/calculate/label"/>
                                            <xf:alert ref="$resources/dialog-control-details/calculate/alert"/>
                                            <xf:hint  ref="$resources/dialog-control-details/calculate/hint" appearance="minimal"/>
                                        </xf:textarea>
                                    </xh:td>
                                    <xh:td>
                                        <xf:textarea ref="default">
                                            <xf:label ref="$resources/dialog-control-details/default/label"/>
                                            <xf:alert ref="$resources/dialog-control-details/default/alert"/>
                                            <xf:hint  ref="$resources/dialog-control-details/default/hint" appearance="minimal"/>
                                        </xf:textarea>
                                    </xh:td>
                                </xh:tr>
                                <xh:tr>
                                    <xh:td>
                                        <xf:textarea ref="relevant">
                                            <xf:label ref="$resources/dialog-control-details/visibility/label"/>
                                            <xf:alert ref="$resources/dialog-control-details/visibility/alert"/>
                                            <xf:hint  ref="$resources/dialog-control-details/visibility/hint" appearance="minimal"/>
                                        </xf:textarea>
                                    </xh:td>
                                    <xh:td>
                                        <xf:textarea ref="readonly">
                                            <xf:label ref="$resources/dialog-control-details/readonly/label"/>
                                            <xf:alert ref="$resources/dialog-control-details/readonly/alert"/>
                                            <xf:hint  ref="$resources/dialog-control-details/readonly/hint" appearance="minimal"/>
                                        </xf:textarea>
                                    </xh:td>
                                </xh:tr>
                            </fr:grid>
                        </fr:tab>
                        <fr:tab id="help-tab">
                            <fr:label ref="$resources/dialog-control-details/tab-help/label"/>
                            <fr:grid id="help-grid">
                                <xh:tr>
                                    <xh:td>
                                        <xf:select ref="help/@isHTML" appearance="full">
                                            <xf:item>
                                                <xf:value>true</xf:value>
                                                <xf:label ref="$resources/dialog-control-details/use-html"/>
                                            </xf:item>
                                        </xf:select>
                                        <!-- Help message -->
                                        <xf:var name="is-html" value="help/@isHTML = 'true'"/>
                                        <fr:tinymce ref="help[$is-html]">
                                            <xf:label ref="$resources/dialog-control-details/help/label"/>
                                            <xf:hint  ref="$resources/dialog-control-details/help/hint"/>
                                        </fr:tinymce>
                                        <xf:textarea ref="help[not($is-html)]">
                                            <xf:label ref="$resources/dialog-control-details/help/label"/>
                                            <xf:hint  ref="$resources/dialog-control-details/help/hint"/>
                                        </xf:textarea>
                                    </xh:td>
                                </xh:tr>
                            </fr:grid>
                        </fr:tab>
                        <!-- Custom control settings -->
                        <xsl:variable
                            xmlns:p="http://www.orbeon.com/oxf/pipeline"
                            name="custom-control-settings"
                            as="xs:string?"
                            select="p:trim(p:property('oxf.fb.extension.control-settings'))[p:non-blank()]"/>

                        <xsl:if test="$custom-control-settings">

                            <xsl:variable
                                name="prefix"
                                as="xs:string"
                                select="substring-before($custom-control-settings, ':')"/>

                            <xsl:variable
                                xmlns:p="http://www.orbeon.com/oxf/pipeline"
                                name="namespace-uri"
                                as="xs:string"
                                select="p:property(concat('oxf.xforms.xbl.mapping.', $prefix))"/>

                            <fr:tab>
                                <fr:label ref="$resources/custom-settings"/>
                                <xsl:element name="{$custom-control-settings}" namespace="{$namespace-uri}">
                                    <xsl:attribute name="id" select="'fb-custom-control-settings'"/>

                                    <!--  Allow component to update datatype -->
                                    <xf:setvalue
                                        event="fb-update-datatype"
                                        if="xxf:non-blank(event('datatype'))"
                                        ref="$i/validations/validation[@type = 'datatype']/builtin-type"
                                        value="event('datatype')"/>

                                </xsl:element>
                            </fr:tab>
                        </xsl:if>
                    </fr:tabbable>
                    <!-- See https://github.com/orbeon/orbeon-forms/issues/2337 -->
                    <xh:div class="fr-dialog-buttons" xml:space="preserve">
                        <xh:div class="pull-left">
                            <xf:trigger id="prev-button" ref="$i/prev-control-id">
                                <xf:label ref="xxf:r('buttons.previous', '|fr-fr-resources|')"/>
                            </xf:trigger>
                            <xf:trigger id="next-button" ref="$i/next-control-id">
                                <xf:label ref="xxf:r('buttons.next', '|fr-fr-resources|')"/>
                            </xf:trigger>
                        </xh:div>
                        <xf:trigger appearance="xxf:primary" id="save-button">
                            <xf:label ref="$resources/apply/label"/>
                        </xf:trigger>
                        <xf:output value="$resources/or/label"/>
                        <xf:trigger appearance="minimal" id="cancel-button">
                            <xf:label ref="$resources/cancel/label"/>
                        </xf:trigger>
                    </xh:div>
                </xxf:dialog>
            </xf:group>
        </xbl:template>
    </xbl:binding>
</xbl:xbl>